#!/usr/bin/perl
# -*- mode: perl; perl-indent-level: 2; -*-

use strict;
use DBI;
use Warehouse;

do '/etc/regol.conf' or die "No config file /etc/regol.conf";

my $dbh = DBI->connect(@$main::DatabaseDSN)
    or die "DBI connect failed: ".DBI->errstr;

$main::drain = 0;
$SIG{TERM} = $SIG{HUP} = $SIG{INT} = sub { $main::drain = 1; };

setup_tables();

my $wh = $main::Warehouses;
foreach (keys %$wh)
{
  if ($wh->{$_}->{whc} = new Warehouse %{$wh->{$_}})
  {
    $dbh->do ("replace into warehouse (name, servers) values (?,?)", undef,
	      $_, $wh->{$_}->{warehouse_servers});
  }
  else
  {
    warn "Can't create new Warehouse object for $_";
    delete $wh->{$_};
  }
}

while (1)
{
  foreach (keys %$wh)
  {
    update_job_table ($_);	# find out about new jobs from controller
    purge_todo_table ($_);	# remove jobs from todo once they've finished
    if (count_todo ($_) == 0)	# if all of my jobs on this wh are finished...
    {
      refill_todo ($_);
    }
    schedule_all_from_todo ($_);# copy "todo" to warehouse job queue
    exit 0 if $main::drain;
  }
  sleep (60);
  exit 0 if $main::drain;
}


sub update_job_table
{
  my $warehousename = shift;
  return undef unless $wh->{$warehousename}->{warehouse_servers};

  my $arrayref = $wh->{$warehousename}->{whc}->job_list
      or return undef;

  $dbh->do ("update warehouse set lastupdate=now() where name=?", undef,
	    $warehousename);

  foreach (@$arrayref)
  {
    $dbh->do ("insert ignore into job (warehousename, id) values (?,?)", undef,
	      $warehousename,
	      $_->{id});
    $dbh->do ("update job set
	       mrfunction=?, revision=?,
	       starttime=?, finishtime=?, success=?, knobs=?,
	       inputkey=?, outputkey=?, metakey=?
	       where warehousename=? and id=?",
	      undef,
	      $_->{mrfunction},
	      $_->{revision},
	      $_->{starttime} || undef,
	      $_->{finishtime} || undef,
	      defined $_->{success} ? $_->{success} : undef,
	      unescape ($_->{knobs}),
	      unescape ($_->{inputkey}),
	      $_->{outputkey} || undef,
	      $_->{metakey} || undef,
	      $warehousename,
	      $_->{id});
  }
  $dbh->do ("update job set spec_md5=md5(concat(mrfunction,revision,inputkey,knobs))");
}


sub purge_todo_table
{
  # clear completed jobs
  $dbh->do ("delete from todo
	     where concat(id_new,warehousename) in
	     (select concat(id,warehousename) from job
	      where finishtime is not null)");

  # give up on stale jobs (submitted long ago, never started)
  $dbh->do ("delete from todo
	     where submittime<date_add(now(),interval -1 day)");
}


sub count_todo
{
  my $warehousename = shift;
  my $sth = $dbh->prepare ("select count(*) from todo where warehousename=?");
  $sth->execute ($warehousename) or return -1;
  my @r = $sth->fetchrow () or return -1;
  return $r[0];
}


sub schedule_all_from_todo
{
  my $warehousename = shift;
  my $sth = $dbh->prepare ("select * from todo
			    left join job on id_orig=id
			    and todo.warehousename=job.warehousename
			    where warehousename=?");
  $sth->execute ($warehousename) or return -1;
  while (my $todo = $sth->fetchrow_hashref)
  {
    if (!defined $todo->{id_new})
    {
      $dbh->do ("update todo set submittime=now()
		 where warehousename=? and id_orig=?",
		undef,
		$todo->{warehousename}, $todo->{id_orig});
      my $id_new = $wh->{$warehousename}->{whc}->job_new
	  (mrfunction => $todo->{mrfunction},
	   revision => $todo->{revision},
	   inputkey => $todo->{inputkey},
	   knobs => $todo->{knobs},
	   nodes => $todo->{wantredo_nnodes},
	   photons => $todo->{wantredo_photons});
      if ($id_new)
      {
	$dbh->do
	    ("update todo set id_new=? where warehousename=? and id_orig=?",
	     undef, $id_new, $todo->{warehousename}, $todo->{id_orig});
	Log ($warehousename, $todo->{id_orig}, "re-queued as $id_new")
      }
      else
      {
	$dbh->do ("update todo set submittime=null
		   where warehousename=? and id_orig=?",
		  undef,
		  $todo->{warehousename}, $todo->{id_orig});
	Log ($warehousename, $todo->{id_orig}, "enqueue fail:",
	     $wh->{$warehousename}->{whc}->errstr);
      }
    }
  }
}


sub refill_todo
{
  my $warehousename = shift;
  $dbh->do ("insert into todo (warehousename, id_orig)
	     select warehousename, id from job
	     where warehousename=? and wantredo_nnodes>0",
	    undef,
	    $warehousename);
}


sub setup_tables
{
  map { $dbh->do ($_) } split (/;\n/, <<EOF);

  create table if not exists job
  (
   warehousename char(64),
   id bigint,
   mrfunction char(32),
   revision bigint,
   starttime datetime,
   finishtime datetime,
   success tinyint,
   wantredo_nnodes int,
   wantredo_photons int,
   spec_md5 char(32),
   knobs text,
   inputkey text,
   outputkey text,
   metakey text,
   unique(warehousename,id)
  );
  alter table job add mrfunction char(32) after id;
  alter table job add revision bigint after mrfunction;
  alter table job add success tinyint after finishtime;
  alter table job add wantredo_photons int after wantredo_nnodes;
  alter table job add key spec_md5 (spec_md5);

  create table if not exists todo
  (
   warehousename char(64),
   id_orig bigint,
   id_new bigint,
   submittime datetime,
   unique(warehousename,id_orig)
  );
  alter table todo add submittime datetime after id;

  create table if not exists warehouse
  (
   name char(64),
   servers char(255),
   lastupdate datetime,
   unique(name)
  );
EOF
    ;
}


sub unescape
{
  local $_ = shift;
  s/\\n/\n/g;
  s/\\\\/\\/g;
  $_;
}


sub Log
{
  print STDERR "@_\n";
}
