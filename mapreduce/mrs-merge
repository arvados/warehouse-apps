#!/usr/bin/perl
# -*- mode: perl; perl-indent-level: 2; -*-

use strict; 
use Warehouse;
use Warehouse::Manifest;
use Warehouse::Stream;

my %opt;
while ($ARGV[0] =~ /^-/)
{
  local $_ = shift @ARGV;
  if (/^--([^=]+)(=(.*))?$/)
  {
    $opt{$1} = $3;
  }
  elsif (/^-([^-=]+)$/)
  {
    foreach (split ("", $1))
    {
      $opt{$_} = 1;
    }
  }
}

die "usage: mrs-merge -h [-t] manifestkey subdir ...\n"
    if @ARGV < 2;

my $manifestkey = shift @ARGV;

my $whc = new Warehouse;
my $manifest = new Warehouse::Manifest (whc => $whc,
					key => $manifestkey);
my @stream;			# array of arrayrefs; $stream[0]->[0] is a Warehouse::Stream

foreach my $subdir (@ARGV)
{
  push @stream, [];
  $manifest->rewind;
  while (my $stream = $manifest->subdir_next)
  {
    if ($stream->name eq $subdir
	|| $subdir eq '*'
	|| ($subdir =~ /\*$/ && $stream->name =~ /^\Q$`\E/))
    {
      push @{$stream[-1]}, $stream;
    }
  }
  die "subdir not found: $subdir" if !@{$stream[-1]};
}

my @endpos;
map { getendpos ($_) } (0..$#stream);

my @nextline;
map { $nextline[$_] = $stream[$_]->[0]->read_until ($endpos[$_], "\n") } (0..$#stream);

if ($opt{"t"})
{
  # only output one taql header
  my $did = 0;
  for (0..$#stream)
  {
    my $hdrs = skiptaql($_);
    print $hdrs if !$did;
    $did = 1;
  }
}

while (1)
{
  my $low;
  for (0..$#stream)
  {
    if (defined $nextline[$_])
    {
      if (!defined $low
	  || $ {$nextline[$_]} < $ {$nextline[$low]})
      {
	$low = $_;
      }
    }
  }
  last if !defined $low;
  print $ {$nextline[$low]};
  $nextline[$low] = $stream[$low]->[0]->read_until ($endpos[$low], "\n");
  while (!defined $nextline[$low])
  {
    shift @{$stream[$low]};
    last if !@{$stream[$low]};
    getendpos ($low);
    $nextline[$low] = $stream[$low]->[0]->read_until ($endpos[$low], "\n");
    skiptaql ($low);
  }
}

sub skiptaql
{
  local $_ = shift;
  if ($ {$nextline[$_]} =~ /^\#: taql-/)
  {
    my $ret = $ {$nextline[$_]};
    my $morehdrs = $stream[$_]->[0]->read_until ($endpos[$_], "\n\#.\n");
    $ret .= $$morehdrs;
    $nextline[$_] = $stream[$_]->[0]->read_until ($endpos[$_], "\n");
    return $ret;
  }
  return "";
}

sub getendpos
{
  local $_ = shift;
  $endpos[$_] = 0;
  $stream[$_]->[0]->rewind;
  while (my ($pos, $size, $filename) = $stream[$_]->[0]->file_next)
  {
    last if !defined $pos;
    $endpos[$_] = $pos + $size if $endpos[$_] < $pos + $size;
  }
}
