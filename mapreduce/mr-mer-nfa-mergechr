#!/usr/bin/perl
# -*- mode: perl; perl-indent-level: 2; -*-

###MR_DESCRIPTION:collate output of mr-mer-nfa-merge, output one stream per chromosome
###MR_INPUT:manifest
###MR_KNOBS:REFERENCE=88f0fab736bdf704a559ae48ade5a423
###MR_KNOBS:INPUTSAMPLES=f3864330c9d4315b8fac14fa7ad4b583
###MR_KNOBS:INPUTSTREAM=./0
###MR_KNOBS:MERS_AND_GAPS=16,250-761,16
###MR_KNOBS:SMALLGAPMIN=1
###MR_KNOBS:SMALLGAPMAX=2
###MR_KNOBS:SMALLGAPPOS=8
###MR_KNOBS:SKIPDEGENERATES=0
###MR_KNOBS:SKIPNOSNPS=0

use strict; 
use Warehouse;
use Warehouse::Manifest;
use Warehouse::Stream;
use Safepipe;

my $manifestkey = $ENV{MR_INPUT0};
my $whc = new Warehouse;
my $m = new Warehouse::Manifest (whc => $whc,
				 key => $manifestkey);
$m->rewind;

if ($ENV{MR_LEVEL} == 0)
{
  my %chr_subdirs;
  while (my $s = $m->subdir_next)
  {
    if ($s->name =~ /^.\/(.*)-(\d+)$/)
    {
      $chr_subdirs{$1} = [] if !exists $chr_subdirs{$1};
      my $subdirs = $chr_subdirs{$1};
      push @$subdirs, $s->name;
    }
  }
  foreach my $chr (sort keys %chr_subdirs)
  {
    my $subdirs = $chr_subdirs{$chr};
    print STDERR "+++mrjobstep 1 $chr @$subdirs+++\n";
  }
  print "+++mrout d41d8cd98f00b204e9800998ecf8427e+++\n";
}

else
{
  my $n = 0;
  my ($chr, @subdirs) = split (/ /, $ENV{MR_INPUT});

  # read all placements for this chromosome, sort by pos0, output to
  # tmp/places.txt

  my $sort_started = 0;
  while (my $s = $m->subdir_next)
  {
    if ($s->name eq $subdirs[0])
    {
      shift @subdirs;
      $s->rewind;
      while (my ($pos, $size, $filename) = $s->file_next)
      {
	last if !defined $pos;
	$s->seek ($pos);
	++$n;
	my $taql_header = $s->read_until (undef, "\n#.\n");
	if (!$sort_started)
	{
	  my $taql_header_text = $$taql_header;
	  $taql_header_text =~ s{^#: taql-0.1\n}{#: taql-0.1/text\n}
	    or die "broken taql header: \"$taql_header\"";
	  open H, ">$ENV{MR_JOBSTEP_TMP}/header";
	  print H $taql_header_text;
	  close H;
	  open SORT, "|gprint |egrep -v '^#' |sort -n +3 --buffer-size=400M |cat $ENV{MR_JOBSTEP_TMP}/header - |gread >$ENV{MR_JOBSTEP_TMP}/places.dat";
	  print SORT $$taql_header;
	  $sort_started = 1;
	}
	while (my $data = $s->read_until ($pos + $size))
	{
	  print SORT $$data;
	}
      }
    }
  }

  close SORT or die "close SORT: $!";

  # run place-report -c ... on the sorted placements

  my @mers_and_gaps = split (",", $ENV{KNOB_MERS_AND_GAPS});
  my @mersize = shift @mers_and_gaps;
  while (@mers_and_gaps)
  {
    push @mersize, $mers_and_gaps[1];
    splice @mers_and_gaps, 0, 2;
  }

  Safepipe::readfrom
      ("main::REFERENCE",
       "mrs-fetch -h '$ENV{KNOB_REFERENCE}' . '$chr.fa'",
       "perl $ENV{MR_REVISION_INSTALLDIR}/src/madeleine/chr-to-dat.pl -n $mersize[0] >$ENV{MR_JOBSTEP_TMP}/ref.dat",
      )
      or die "reference pipe failed: $!";
  close REFERENCE or die "close REFERENCE: $!";

  Safepipe::readfrom
      ("main::SAMPLES",
       "mrs-fetch -h '$ENV{KNOB_INPUTSAMPLES}' '$ENV{KNOB_INPUTSTREAM}'",
       "mrs-select-reads",
       "perl $ENV{MR_REVISION_INSTALLDIR}/src/apps/tomc/simreads-to-mers-dat.pl @mersize >$ENV{MR_JOBSTEP_TMP}/samples.dat",
      )
      or die "samples pipe failed: $!";
  close SAMPLES or die "close SAMPLES: $!";

  Safepipe::readfrom
      ("main:VOTES",
       "place-report -o $ENV{MR_JOBSTEP_TMP}/pr.dat -p $ENV{MR_JOBSTEP_TMP}/places.dat -c - -r $ENV{MR_JOBSTEP_TMP}/ref.dat -s $ENV{MR_JOBSTEP_TMP}/samples.dat --two-inrecs-per-sample --mer0-col mer0 --mer1-col mer1 --gap-min $ENV{KNOB_SMALLGAPMIN} --gap-max $ENV{KNOB_SMALLGAPMAX} --gap-pos $ENV{KNOB_SMALLGAPPOS}",
       "mrs-store './$chr' place-report-c.dat",
       "mrs-output",
      );
  close VOTES or die "close VOTES: $!";

  while (0 <= (my $pid = wait)) { die "child $pid exited $?" if $?; }
  exit 0;
}
