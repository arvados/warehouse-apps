#!/usr/bin/perl
# -*- mode: perl; perl-indent-level: 2; -*-

###MR_DESCRIPTION:combine locally sorted BAM chunks into a globally sorted BAM
###MR_INPUT:manifest
###MR_KNOBS:SAM
###MR_KNOBS:REFERENCE
###MR_KNOBS:BAM_SLICE_SIZE=50000

use strict; 
use Warehouse;
use Warehouse::Manifest;
use Warehouse::Stream;
use Safepipe;
use Fcntl ':flock';
use POSIX qw(strftime);


my $tmp = $ENV{MR_JOBSTEP_TMP};

my $merge_radix = 100;
my $verbose = 1;
my $src = "$ENV{MR_REVISION_INSTALLDIR}/src";
my $num_nodes = $ENV{SLURM_JOB_NUM_NODES} or die;
my $input_manifest_key = $ENV{MR_INPUT0} or die;
my $reference_manifest_key = $ENV{KNOB_REFERENCE} or die;
my $sam_manifest_key = $ENV{KNOB_SAM} or die;
my $slice_size = 500_000;
$slice_size = 0 + $ENV{KNOB_BAM_SLICE_SIZE} if defined $ENV{KNOB_BAM_SLICE_SIZE};
my $size_per_task = 50_000_000;
$size_per_task = $slice_size if $size_per_task < $slice_size;
my $slices_per_task = $size_per_task / $slice_size;
my $reffile = "$tmp/ref";

my $sam_path="$tmp/sam";

my $whc = new Warehouse;

if ($ENV{MR_LEVEL} == 0)
{
  my $index_path = "$tmp/chrom.fa.fai";
  atomic_whget("$reference_manifest_key/chrom.fa.fai", $index_path);
  open FAI, $index_path;
  while (<FAI>) {
    my ($chr, $len) = split(/\t/);
    my $num_slices = int($len / $slice_size) + 1;
    for (my $slice = 0 ; $slice < $num_slices ; $slice += $slices_per_task) {
      print STDERR "+++mrjobstep 1 $chr $slice+++\n";
    }
  }
  close FAI;
  print STDERR "+++mrout d41d8cd98f00b204e9800998ecf8427e+++\n";
  exit 0;
}
if ($ENV{MR_LEVEL} == 1)
{
  my ($chr, $start_slice) = split (/ /, $ENV{MR_INPUT}, 2);
  atomic_whget_tar("$sam_manifest_key/samtools.tgz", $sam_path);
  my $ref = new Warehouse::Manifest (whc => $whc, key => $input_manifest_key);
  my $readfile="$tmp/input.bam";
  my $outfile="$tmp/output.bam";
  my $dir ="$tmp/merge";
  system "rm -rf $dir";
  mkdir $dir or die "mkdir $dir";
  my $filecount = 0;

  my $all_start = $start_slice * $slice_size;
  my $all_end = ($start_slice + $slices_per_task) * $slice_size - 1;
  my $range = "$chr:$all_start-$all_end";
  $range = "$chr" if $start_slice == 0 && $slice_size > 299_999_999;
  warn "$range\n" if $verbose;

  while (my $s = $ref->subdir_next)
  {
    my $subdir = $s->name;
    $subdir =~ s/^\.\///;
    while (my ($pos, $size, $filename) = $s->file_next)
    {
      last if !defined $pos;
      next unless $filename eq "$chr.bam";
      warn "$subdir\n" if $verbose;
      whget("$input_manifest_key/$subdir/${filename}", $readfile);
      system("$sam_path/samtools index $readfile") == 0
        or die "died at $sam_path/samtools index $readfile";
      system("$sam_path/samtools view -b -h $readfile $range > $dir/$filecount.bam") == 0
        or die "died at $sam_path/samtools view -b -h $readfile $range";
      system("$sam_path/samtools index $dir/$filecount.bam") == 0
        or die "died at $sam_path/samtools index $dir/$filecount.bam";
      $filecount++;
    }
  }

  my $stream = "";
  for (my $slice = $start_slice ; $slice < $start_slice + $slices_per_task ; $slice++) {
    my $start = $slice * $slice_size;
    my $end = ($slice + 1) * $slice_size - 1;
    my $range = "$chr:$start-$end";
    $range = "$chr" if $slice == 0 && $slice_size > 299_999_999;
    warn "$range\n" if $verbose;
    my @files;
    for (my $file = 0 ; $file < $filecount ; $file++) {
      system("$sam_path/samtools view -b -h $dir/$file.bam $range > $dir/m-$file.bam") == 0
        or die "died at slice samtools view -b -h $dir/$file.bam $range";
      push @files, "$dir/m-$file.bam";
    }

    my $level = 0;
    while (scalar(@files) > 1) {
      my @mfiles = @files;
      @files = ();
      my $count = 0;
      while(@mfiles) {
	my $len = $merge_radix;
	$len = scalar(@mfiles) if ($len > scalar(@mfiles));
	my @mfiles_slice = splice(@mfiles, 0, $len);
	my $files = join(" ", @mfiles_slice);
	my $outfile = "$dir/m$level-$count.bam";
	if (scalar(@mfiles_slice) == 1) {
	  warn("cp $files $outfile\n") if $verbose;
	  system("cp $files $outfile") == 0
	    or die "cp $files";
	}
	else {
	  warn("$sam_path/samtools merge $outfile ...\n") if $verbose;
	  system("$sam_path/samtools merge $outfile $files") == 0
	    or die "samtools merge $files";
	}
	$count++;
	push @files, $outfile;
      }
      $level++;
    }

    my $store = `mrs-store '.' '$chr-$start.bam' < $files[0]`;
    die "mrs-store $files[0]" unless $? == 0;
    $stream .= $store;
  }

  print STDERR "+++mrout $stream+++\n";
  exit 0;
}

sub whget {
  my ($source, $target) = @_;

  if (0 != system "whget '$source' '$target'")
  {
    die "whget exited $?";
  }
}

sub atomic_whget {
  my ($source, $target) = @_;

  if (open (L, "+>>", "$target.lock") &&
      flock (L, LOCK_EX) &&
      !-e ($target))
  {
    if (0 != system "whget '$source' '$target.tmp'")
    {
      system "rm -rf '$target.tmp'";
      close L;
      die "whget exited $?";
    }
    rename "$target.tmp", $target;
    system "rm -rf '$target.tmp'";
  }
  close L;
  die "Failed to whget $source -> $target" if !-e $target;
}

sub atomic_whget_tar {
  my ($source, $target) = @_;

  system "rm -rf '$target'";
  if (open (L, "+>>", "$target.lock") &&
      flock (L, LOCK_EX) )
  {
    if (0 != system "whget '$source' '$target.tgz.tmp'")
    {
      system "rm -rf '$target.tgz.tmp'";
      close L;
      die "whget exited $?";
    }
    rename "$target.tgz.tmp", "$target.tgz" or die "rename $target.tgz.tmp failed";
    mkdir "$target" or die "mkdir $target failed";
    system("tar -C $target -xzf $target.tgz") == 0 or die "tar -xz $target.tgz failed";
  }
  close L;
  die "Failed to whget $source -> $target" if !-e $target;
}

sub atomic_whget_dir {
  my ($source, $target) = @_;

  system "rm -rf '$target'";
  if (open (L, "+>>", "$target.lock") &&
      flock (L, LOCK_EX))
  {
    if (0 != system "whget -r '$source'/ '$target.tmp/'")
    {
      system "rm -rf '$target.tmp'";
      close L;
      die "whget exited $?";
    }
    rename "$target.tmp", $target;
    system "rm -rf '$target.tmp'";
  }
  close L;
  die "Failed to whget $source -> $target" if !-e $target;
}

sub emit_date {
  my $who = shift;
  my $now_string = strftime "%H:%M:%S", localtime;
  warn "$who @ $now_string\n";
}
