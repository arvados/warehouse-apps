#!/usr/bin/perl

#input: exons.RCA
#input: readfile (on STDIN)
#output: placementfile
# Greg Porreca 6-18-2007
# modified 12-02-2008 to place EcoP15I 24bp polonator reads
#                     prints output to stdout
# modified 12-03-2008 to pre-compute hexamer locations for speed increase
# modified 12-04-2008 to pre-compute read locations for speed increase
#
use FileHandle;

open(REFERENCE, "exons.RCA");
STDOUT->autoflush(1);
STDERR->autoflush(1);

#load reference into memory and compute lookup-table
print STDERR "Loading reference...\n";
$count=0;
while(<REFERENCE>){
    chop $_;
    @line = split(/\t/, $_);
    $line[3] = uc $line[3];

    $curr = $line[3] . $line[3];

    $annot[$count] = $line[0] . "\t" . $line[1] . "\t" . $line[2];
    $exons[$count] = $line[3];

    if ($count % 1000 == 0 && -t STDERR)
    {
	my $status = "$count";
	if ($ENV{DEBUG_MEMORY})
	{
	    if (open F, "<", "/proc/$$/stat")
	    {
		my $mem = (split / /, scalar <F>)[22];
		$status .= sprintf " %dM", $mem/2**20;
		close F;
	    }
	}
	print STDERR "\r$status";
    }
    for($i=0; $i<(length($curr)/2)+30; $i++){
	# store all 4 possible reads from this position

	my $packedcount = pack "L", $count;
	my $r1n = read2n(substr($curr, $i, 6)) << 12;

	$read = $r1n | read2n(substr($curr, $i + 6 + 13, 6));
	$LUT[$read] .= $packedcount;

	$read = $r1n | read2n(substr($curr, $i + 6 + 14, 6));
	$LUT[$read] .= $packedcount;

	$read = $r1n | read2n(substr($curr, $i + 6 + 15, 6));
	$LUT[$read] .= $packedcount;

	$read = $r1n | read2n(substr($curr, $i + 6 + 16, 6));
	$LUT[$read] .= $packedcount;
    }
    $count++;
}
print STDERR "\n";
close REFERENCE;

print STDERR "Placing reads...\n";
$s[0] = "A";
$s[1] = "C";
$s[2] = "G";
$s[3] = "T";

my $input;
while (defined ($input = <STDIN>))
{
    chomp $input;
    if($input !~ /\./){
	my $min_mm = 999;
	my $curr_exon_id;
	my $num_matching_pairs = 0;
	@line = split(/\t/, $input);
	
#expand read into all possible 1bp substitution variants, and search each against reference list
	@curr_read_array = split(//, $line[4]);
      TRY_MM:
	for (my $pos1 = 0; $pos1 < 24; $pos1++) {
	    for (my$base1 = 0; $base1 < 4; $base1++) {

		my $mm1 = $curr_read_array[$pos1] ne $s[$base1];
		# No need to check "no first mismatch" 24 times.
		next if $pos1 > 0 && !$mm1;

		for (my $pos2 = $pos1; $pos2 < 24; $pos2++) {

		    next if $pos1 != $pos2
			&& 2 > $ENV{KNOB_MAX_MISMATCHES};

		    for (my $base2 = 0; $base2 < 4; $base2++) {

			next if $pos1 == $pos2
			    && $base1 != $base2;
			next if $pos1 != $pos2
			    && $curr_read_array[$pos2] eq $s[$base2];

			my $mm2 = $pos1 != $pos2;

			@new_seqarray = @curr_read_array;
			$new_seqarray[$pos1] = $s[$base1];
			$new_seqarray[$pos2] = $s[$base2];
			$new_seq = join(/""/,@new_seqarray);

			$r1 = read2n(substr($new_seq, 0, 12));
			$r2 = read2n(substr($new_seq, 12, 12));

			if(exists $LUT[$r1]){
			    my $ex1h = {};
			    map { $ex1h->{$_}++ } unpack "L*", $LUT[$r1];

			    if (exists $LUT[$r2]) {
				for (unpack "L*", $LUT[$r2]) {
				    if ($ex1h->{$_} > 0) {
					$curr_exon_id = $_;
					$num_matching_pairs += $ex1h->{$_};
					last TRY_MM if $num_matching_pairs > 1;
				    }
				}
			    }
			}
			
			if (defined $curr_exon_id)
			{
			    $mutated_seq = $new_seq;
			    $min_mm = $mm1 + $mm2;
			}
		    }
		}
	    }
	}
	
	if($num_matching_pairs == 0){
	    print "0\t$num_matching_pairs\t.\t.\t.\t.\t.\t$input\n";
	}
	elsif($num_matching_pairs == 1){
	    print "U\t$num_matching_pairs\t$annot[$curr_exon_id]\t$exons[$curr_exon_id]\t$mutated_seq\t$input\t$min_mm\n";
	}
	else{
	    print "N\t$num_matching_pairs\t.\t.\t.\t.\t.\t$input\n";
	}	
    }
}

sub read2n
{
    my $fasta = shift;
    my $n = 0;
    for (split (//, $fasta))
    {
	tr/ACGTacgt/01230123/ || die;
	$n = ($n << 2) | $_;
    }
    return $n;
}
