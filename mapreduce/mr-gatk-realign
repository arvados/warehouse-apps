#!/usr/bin/perl
# -*- mode: perl; perl-indent-level: 2; -*-

###MR_DESCRIPTION:GATK realign
###MR_INPUT:manifest
###MR_KNOBS:GATK_TAR_BZ2
###MR_KNOBS:GATK_BUNDLE
###MR_KNOBS:PICARD_ZIP

use strict; 
use Warehouse;
use Warehouse::Manifest;
use Warehouse::Stream;
use Safepipe;
use Safeget;
use Fcntl ':flock';
use List::Util qw'min max';

my $jobstep_tmp = $ENV{MR_JOBSTEP_TMP};
my $job_tmp = $ENV{MR_JOB_TMP};
my $mem_limit = max($ENV{MR_SLOT_RAM_MB} - 700, 500);

Safeget::wh_manifest_tree ($ENV{KNOB_PICARD_ZIP}, "$job_tmp/picard");
die "picard $ENV{MR_PICARD_ZIP}: $!" unless 0 ==
    system "unzip -d '$jobstep_tmp/picard' '$job_tmp/picard/'*.zip";
my ($picard_dir) = <$jobstep_tmp/picard/picard-tools-*>;

Safeget::wh_manifest_tree ($ENV{KNOB_GATK_TAR_BZ2}, "$job_tmp/gatk");
die "gatk $ENV{MR_GATK_TAR_BZ2}: $!" unless 0 ==
    system "tar -C '$jobstep_tmp' -xjf '$job_tmp/gatk/'*.bz2";
($main::gatk_dir) = <$jobstep_tmp/GenomeAnalysisTK-*>;

my $concurrency = 0 + `egrep -c ^processor /proc/cpuinfo`;
if ($ENV{SLURM_CPUS_ON_NODE} > $concurrency) {
  $concurrency = $ENV{SLURM_CPUS_ON_NODE};
}
$concurrency = 1 if $concurrency < 1;

my $whc = new Warehouse;
my $m = new Warehouse::Manifest (whc => $whc, key => $ENV{MR_INPUT0});
$m->rewind;
my $i = -1;
while (my $s = $m->subdir_next) {
  while (my ($pos, $size, $filename) = $s->file_next) {
    last if !defined $pos;
    ++$i;
    if ($ENV{MR_LEVEL} == 0) {
      print STDERR "+++mrjobstep 1 $i+++\n" if $filename =~ /\.bam$/;
    } elsif ($i == $ENV{MR_INPUT}) {
      go($s, $pos, $size, $filename);
      exit 0;
    }
  }
}
if ($ENV{MR_LEVEL} == 0) {
  print STDERR "+++mrout d41d8cd98f00b204e9800998ecf8427e+++\n";
  exit 0;
}

sub go {
  my ($stream, $pos, $size, $filename) = @_;

  for my $part (qw(dict fasta.fai fasta)) {
    Safeget::wh_file("$ENV{KNOB_GATK_BUNDLE}/human_g1k_v37.$part.gz", "$job_tmp/human_g1k_v37.$part");
  }
  for my $vcf (qw(dbsnp_137 Mills_and_1000G_gold_standard.indels)) {
    Safeget::wh_file("$ENV{KNOB_GATK_BUNDLE}/$vcf.b37.vcf.gz", "$job_tmp/$vcf.b37.vcf");
    Safeget::wh_file("$ENV{KNOB_GATK_BUNDLE}/$vcf.b37.vcf.idx.gz", "$job_tmp/$vcf.b37.vcf.idx");
  }

  symlink "/dev/stdin", "$jobstep_tmp/stdin.bam";

  open BAM, ">", "$jobstep_tmp/input.bam";
  open INDEX, "|-", ("java -Xmx1g -Djava.io.tmpdir='$jobstep_tmp' ".
		     "-jar $picard_dir/BuildBamIndex.jar ".
		     "I=$jobstep_tmp/stdin.bam O=$jobstep_tmp/input.bai ".
		     "VALIDATION_STRINGENCY=LENIENT") or die;
  $stream->rewind;
  $stream->seek ($pos);
  while (my $dataref = $stream->read_until ($pos + $size))
  {
    print BAM $$dataref or die;
    print INDEX $$dataref or die;
  }
  close BAM or die;
  close INDEX or die;

  die unless 0 == system("java -Xmx${mem_limit}m -Djava.io.tmpdir='$jobstep_tmp' ".
			 "-jar $main::gatk_dir/GenomeAnalysisTK.jar ".
			 "-nt $concurrency ".
			 "-T RealignerTargetCreator ".
			 "-R $job_tmp/human_g1k_v37.fasta ".
			 "-I $jobstep_tmp/input.bam ".
			 "-o $jobstep_tmp/intervals.list ".
			 "-known $job_tmp/dbsnp_137.b37.vcf ".
			 "-known $job_tmp/Mills_and_1000G_gold_standard.indels.b37.vcf >&2 ");

  die unless 0 == system("bash", "-c",
			 "java -Xmx${mem_limit}m -Djava.io.tmpdir='$jobstep_tmp' ".
			 "-jar $main::gatk_dir/GenomeAnalysisTK.jar ".
			 "-T IndelRealigner ".
			 "-R $job_tmp/human_g1k_v37.fasta ".
			 "-targetIntervals $jobstep_tmp/intervals.list ".
			 "-I $jobstep_tmp/input.bam ".
			 "-o >(mrs-store . '$filename' > '$jobstep_tmp/outmanifest' ) ".
			 "-known $job_tmp/dbsnp_137.b37.vcf ".
			 "-known $job_tmp/Mills_and_1000G_gold_standard.indels.b37.vcf >&2");

  if (0 != system("fuser /dev/stdin")) {
    warn "fuser does not seem to work; sleeping 1 and hoping for the best";
    sleep 1;
  } else {
    while (0 == system("fuser '$jobstep_tmp/outmanifest'")) {
      sleep 1;
    }
  }
  system "mrs-output < '$jobstep_tmp/outmanifest'";
}

sub feed_stream
{
  use IO::Handle;
  my ($stream, $pos, $size, $filename) = @_;
  my $handle = new IO::Handle;
  my $child = open $handle, "-|";
  die "feed_stream: fork: $!" if !defined $child;
  return $handle if $child;

  close STDIN;
  my $s = new Warehouse::Stream (whc => new Warehouse,
				 subdir => $stream->as_string);
  $stream->rewind;
  $stream->seek ($pos);
  while (my $dataref = $stream->read_until ($pos + $size))
  {
    print $$dataref or die "feed_stream: write: $!";
  }
  close STDOUT or die "feed_stream: close: $!";
  exit 0;
}
