#!/usr/bin/perl
# -*- mode: perl; perl-indent-level: 2; -*-

###MR_DESCRIPTION:run megablast against reference db
###MR_INPUT:manifest
###MR_KNOBS:REFERENCE=f4c53b5ea8ed51077c46116b5c591fae
###MR_KNOBS:REFERENCEDIR=homo_sapiens
###MR_KNOBS:BATCHSIZE=1000
###MR_KNOBS:MAXBATCHES=0
###MR_KNOBS:MAXBATCHESPERJOB=0
###MR_KNOBS:FILTER400BP=1

use strict; 
use Warehouse;
use Warehouse::Manifest;
use Warehouse::Stream;
use Safepipe;
use Fcntl ':flock';


my $traces_manifest_key = $ENV{MR_INPUT0};
my $reference_manifest_key = $ENV{KNOB_REFERENCE};
my $reference_manifest_dir = $ENV{KNOB_REFERENCEDIR};
$ENV{KNOB_MAXBATCHESPERJOB} += 0;
$ENV{KNOB_MAXBATCHES} += 0;
$ENV{KNOB_BATCHSIZE} += 0;
$ENV{KNOB_BATCHSIZE} ||= 1000;

my $whc = new Warehouse;

if ($ENV{MR_LEVEL} == 0)
{
  # queue a level 1 jobstep for each file in the input manifest

  my $ref = new Warehouse::Manifest (whc => $whc,
				     key => $traces_manifest_key);
  my $nfiles = 0;
  if ($ENV{KNOB_MAXBATCHESPERJOB} > 0)
  {
    $ref->rewind;
    while (my $s = $ref->subdir_next)
    {
      while (my ($pos, $size, $filename) = $s->file_next)
      {
	last if !defined $pos;
	++$nfiles;
      }
    }
  }
  $ref->rewind;
  while (my $s = $ref->subdir_next)
  {
    my $subdir = $s->name;
    while (my ($pos, $size, $filename) = $s->file_next)
    {
      last if !defined $pos;
      print STDERR "+++mrjobstep 1 $nfiles $subdir $filename+++\n";
    }
  }
  print STDERR "+++mrout d41d8cd98f00b204e9800998ecf8427e+++\n";
  exit 0;
}

if ($ENV{MR_LEVEL} == 1)
{
  # queue a level 2 jobstep for each batch of traces in the specified file

  my ($nfiles, $subdir, $filename) = split (/ /, $ENV{MR_INPUT}, 3);
  Safepipe::readfrom
      ("main::TRACES",
       "mrs-fetch -h '$traces_manifest_key' '$subdir' '$filename'")
      or die "pipe failed: $!";

  my $maxbatches;		# stop after queueing this many jobs
  if ($ENV{KNOB_MAXBATCHESPERJOB} > 0 && $nfiles > 0)
  {
    $maxbatches = int($ENV{KNOB_MAXBATCHESPERJOB} / $nfiles);
    $maxbatches++ if $ENV{MR_ID} <= $ENV{KNOB_MAXBATCHESPERJOB} % $nfiles;
    if ($ENV{KNOB_MAXBATCHES} > 0 && $maxbatches > $ENV{KNOB_MAXBATCHES})
    {
      $maxbatches = $ENV{KNOB_MAXBATCHES};
    }
  }
  else
  {
    $maxbatches = $ENV{KNOB_MAXBATCHES};
  }
  print STDERR "id=$ENV{MR_ID} maxbatches=$maxbatches input=$ENV{MR_INPUT}\n"
      if $ENV{KNOB_DEBUG};

  my $nbatches = 0;		# batches queued so far (not incl. current)
  my $ntraces = 0;		# traces seen in input so far (incl. current)
  my $batchstart = 0;		# byte pos in input file of current batch start
  my $batchend = 0;		# byte pos in input file of current batch end
  my $bpcount = 0;		# ACGT base pairs counted in current trace
  my $have_good_reads = 0;	# any >= 400bp traces seen yet in this batch?
  my $have_any_reads = 0;	# any traces at all seen yet in this batch?
  while (defined ($_ = <TRACES>))
  {
    if (/^>/)
    {
      ++$ntraces;
      if ($ENV{KNOB_FILTER400BP} && $bpcount < 400)
      {
	--$ntraces;
	$batchstart = $batchend if !$have_good_reads;
      }
      elsif ($ntraces > 1 &&
	     $ntraces % $ENV{KNOB_BATCHSIZE} == 1)
      {
	print STDERR "+++mrjobstep 2 $batchstart $batchend $subdir $filename+++\n"
	    if $have_any_reads;
	$batchstart = $batchend;
	$have_good_reads = 0;
	$have_any_reads = 0;
	if (++$nbatches == $maxbatches)
	{
	  while (<TRACES>) { }
	  last;
	}
      }
      $bpcount = 0;
    }
    else
    {
      $bpcount += tr/acgtACGT/acgtACGT/;
      $have_good_reads = 1 if $bpcount >= 400;
      $have_any_reads = 1 if $bpcount > 0;
    }
    $batchend += length;
  }
  print STDERR "+++mrjobstep 2 $batchstart $batchend $subdir $filename+++\n"
      if $batchend > $batchstart;
  close TRACES or die "Pipe failed: $!, exited $?";

  print STDERR "+++mrout d41d8cd98f00b204e9800998ecf8427e+++\n";
  exit 0;
}

if ($ENV{MR_LEVEL} == 2)
{
  my ($batchstart, $batchend, $subdir, $filename)
      = split (/ /, $ENV{MR_INPUT}, 4);

  my $tmp = $ENV{MR_JOB_TMP};
  my $refdir = "$tmp/$reference_manifest_key";
  if (open (L, "+>>", "$refdir.lock") &&
      flock (L, LOCK_EX) &&
      !-d ($refdir) &&
      mkdir ("$refdir.tmp"))
  {
    if (0 != system "whget '$reference_manifest_key/$reference_manifest_dir/' '$refdir.tmp/'")
    {
      system "rm -rf '$refdir.tmp'";
      close L;
      die "whget exited $?";
    }
    rename "$refdir.tmp", $refdir;
    system "rm -rf '$refdir.tmp'";
  }
  close L;
  die "Failed to whget reference data" if !-d $refdir;

  opendir D, $refdir or die "opendir failed";
  my $reffilename;
  map { $reffilename = $1 if /^(\S+)\.nsq$/ } readdir D;
  closedir D;
  die "Failed to find *.nsq in reference data" if !defined $reffilename;

  Safepipe::readfrom
      ("main::MEGABLAST",
       "mrs-fetch -h '$traces_manifest_key' '$subdir' '$filename'",
       "mrs-selectbytes $batchstart $batchend",
       "megablast -i stdin -d $refdir/$reffilename -f -s 400 -p 97 -F F -G25 -E10 -W60",
       "gzip -1",
       "mrs-store '$subdir/$filename-$batchstart-$batchend' '$filename-$batchstart-$batchend.mega.gz'",
       "mrs-output",
      )
      or die "pipe failed: $!";
  close MEGABLAST or die "Pipe failed: $!";
  exit 0;
}
