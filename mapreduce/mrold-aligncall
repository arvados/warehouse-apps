#!/usr/bin/perl

###MR_DESCRIPTION:(frame ID, cycles) -> list of reads
###MR_INPUT:frames
###MR_KNOBS:FOCUSPIXELS=20000
###MR_KNOBS:ALIGNWINDOW=15
###MR_KNOBS:OBJECTTHRESHOLD=7000
###MR_KNOBS:GZIP=yes

use MetaMog;
use Compress::Zlib; 

if ($ENV{MR_LEVEL} == 0)
{
  # init
  $ENV{MR_INPUT} = $ENV{MR_INPUT0};
  open STDIN, "mrtask-framelist |" or die "Input pipe failed: $!";
  while (defined ($_ = <STDIN>))
  {
    chomp;
    print STDERR "+++mrjobstep 1 $_+++\n";
  }
  close STDIN or die "Input stream exited $?";
  print STDERR "+++mrjobstep 2 +++\n";
}

elsif ($ENV{MR_LEVEL} == 1)
{
  # map
  $ENV{PATH} .= ":/usr/local/polony-tools/$ENV{MR_REVISION}/src/align-call";

  my (@hybrid) = split (",", $ENV{KNOB_HYBRID});
  my (@baseorder) = split (",", $ENV{KNOB_BASEORDER});
  $ENV{HYBRIDDIRORDER} = "@hybrid";
  $ENV{DIRORDER} = "@baseorder";
  for (qw(FOCUSPIXELS ALIGNWINDOW OBJECTTHRESHOLD))
  {
    $ENV{$_} = $ENV{"KNOB_$_"};
  }

  #this should be in (numerical) frame order (!?!)
  open (STDIN, "mrtask-framekeys "
	. "| mrtask-streaminput --raw-images "
	. "| perl -S find_objects-register_raw_pipe.pl "
	. "| perl -S raw_to_reads.pl |")
      or die "Input pipe failed: $!";
  while (defined ($_ = <STDIN>))
  {
    print "$ENV{MR_INPUT} $_";
  }
  close STDIN or die "Input stream exited $?";
}

elsif ($ENV{MR_LEVEL} == 2)
{
  # reduce
  open STDIN, "mrtask-streaminputkeys | mrtask-streaminput |";
  
  binmode STDOUT;
  my $gz;
  if ($ENV{KNOB_GZIP} && $ENV{KNOB_GZIP} !~ /no/i) {
    $gz = gzopen (\*STDOUT, "wb") 
	or die "Cannot open stdout: $gzerrno\n"; 
  }
  else
  {
    my $size = 'XXX';		# fixme: must predict size here!
    open STDOUT, "|mrtask-storebigoutput $size" or die "open failed: $!";
  }

  while (defined ($_ = <STDIN>))
  {
    my ($dataset_id, $frame_id, $read, $object_id, $size) = split; 
    my $output = sprintf ("%05d-%05d-%05d %s\n", $frame_id, $object_id, $size, $read);
    if ($gz)
    {
      $gz->gzwrite ($output) or die "error writing: $gzerrno\n";
    }
    else
    {
      print STDOUT $output;
    }
  }
  close STDIN or die "Input stream exited $?";
  if ($gz)
  {
    $gz->gzclose();		# or die "gzclose() failed: $gzerrno";
				# (gzclose() is supposed to return 1 on
				# success, but doesn't...?)
  }
  else
  {
    close STDOUT or die "close STDOUT failed: $!";
  }
  print STDERR "+++mrjobstep 3 $ENV{MR_OUTPUTKEY}+++\n";
}

elsif ($ENV{MR_LEVEL} == 3)
{
  my $m = MetaMog->new;
  $m->rename ($ENV{MR_INPUT}, "mrjob/$ENV{MR_JOB_ID}") or die $m->errstr;
}
