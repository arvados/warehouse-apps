#!/usr/bin/perl

use strict;

my %addslashes = qw(* -
		    A A
		    C C
		    G G
		    T T
		    M A/C
		    R A/G
		    W A/T
		    S C/G
		    Y C/T
		    K G/T
		    V A/C/G
		    H A/C/T
		    D A/G/T
		    B C/G/T
		    N A/C/G/T
		    X A/C/G/T);

while (<>)
{
    chomp;
    my $error = "";
    my @in = split;
    next if $in[1] !~ /^\d+$/;
    my $ref_bp = uc $in[2];
    my $start = $in[1];
    my $end = $in[1];
    my $bp = $addslashes{uc $in[3]};
    if ($ref_bp eq '*') {
	# parse indel from samtools pileup -vcf

	$ref_bp = '-';

	# '-A/-AC' -> ('-A', '-AC')
	my @indel = split ('/', uc($in[3]));

	# figure out ref sequence (i.e., longest deletion)
	my $ref_length = 0;
	for (@indel) {
	    if (/^-([ACGT]+)$/ && length($1) > $ref_length) {
		$ref_length = length($1);
		$ref_bp = $1;
	    }
	}

	$end = $start + $ref_length - 1;

	# figure out inserted/substituted sequences
	my @bp;
	for (@indel) {
	    if (/^\+([ACGT]+)$/) {
		push @bp, $1;
	    }
	    elsif (/^-([ACGT]+)$/) {
		if (length($1) == $ref_length) {
		    # entire specified region deleted
		    push @bp, '-';
		}
		else {
		    # (Noting [length($1) < $ref_length] is always
		    # true here) Some of the ref_bp are not deleted on
		    # this copy. samtools tells us which bp *are*
		    # deleted; we want to output the bp that *are not*
		    # deleted.
		    my $deleted = $1;
		    if ($ref_bp =~ /^(.*)\Q$deleted\E(.*)$/) {
			push @bp, "$1$2";
		    }
		    else {
			# Well, this is awkward.  If we get here,
			# samtools must think the reference is
			# heterozygous.
			$error = "#indel-ref-error#";
		    }
		}
	    }
	    elsif ($_ eq '*') {
		push @bp, '-';
	    }
	    else {
		$error = "#indel-format-error#";
	    }
	}
	pop @bp if (2 == @bp && $bp[0] eq $bp[1]);
	$bp = join ('/', @bp);
    }
    next if $bp eq "A/C/G/T";
    my $feature = 'INDEL';
    if ($start == $end && $bp =~ /^([ACGT]\/)*[ACGT]$/) {
	$feature = 'SNP';
    } elsif ($bp =~ /^([ACGT]+)\/([ACGT]+)$/ &&
	     length $1 == length $2 &&
	     length $1 == length $ref_bp) {
	$feature = 'SUB';
    }
    my $additional = ";consq $in[4];snpq $in[5]";
    if ($feature eq 'INDEL') {
	next if $in[4] < 300; # consensus quality
	next if $in[5] < 500; # snp quality
	$additional .= ";call_depth $in[8],$in[10],$in[9],$in[11],N,$in[12]";
    }
    print $error;
    print join ("\t",
		$in[0],
		"bam", $feature,
		$start, $end,
		".", "+", ".",
		"alleles $bp;ref_allele $ref_bp;read_depth $in[7]$additional");
    print "\n";
}
