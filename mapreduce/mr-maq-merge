#!/usr/bin/perl
# -*- mode: perl; perl-indent-level: 2; -*-

###MR_DESCRIPTION:maq merge
###MR_INPUT:manifest
###MR_KNOBS:MAQ_DEB=ec9aba3c23989d66f813589e2d4450db
###MR_KNOBS:REFERENCE=99259f4330907e84fe7253bd4e52dd3e
###MR_KNOBS:REFERENCEFILE=homo_sapiens.bfa
###MR_KNOBS:MAX_MERGE=100

use strict;
use Warehouse;
use Warehouse::Manifest;
use Safepipe;

$ENV{KNOB_MAQ_DEB} ||= "ec9aba3c23989d66f813589e2d4450db";
$ENV{KNOB_REFERENCE} ||= "99259f4330907e84fe7253bd4e52dd3e";
$ENV{KNOB_REFERENCEFILE} ||= "homo_sapiens.bfa";
$ENV{KNOB_MAX_MERGE} ||= 100;

my $tmp = $ENV{MR_JOBSTEP_TMP};
chdir ($tmp) or die "chdir $tmp: $!";
mkdir "out" or die "mkdir out: $!";

my $whc = new Warehouse;

fetch_to_file ($whc, $ENV{KNOB_MAQ_DEB}, "maq.deb");
system ("dpkg --extract maq.deb .")
    == 0 or die "dpkg exited $?";

system ("whget $ENV{KNOB_REFERENCE}/ $tmp/")
    == 0 or die "whget $ENV{KNOB_REFERENCE}/ $tmp/ exited $?";

my $queue_only = $ENV{MR_LEVEL} == 0 && $ENV{KNOB_PARTIAL};
my $start_after = $ENV{MR_LEVEL} == 1 ? $ENV{MR_INPUT} : 0;
my $outfile = $ENV{KNOB_PARTIAL} ? sprintf ("%03d", $start_after) : "all";
my @files;
my $m = new Warehouse::Manifest (whc => $whc,
				 key => $ENV{MR_INPUT0});
$m->rewind;
SUBDIR:
while (my $s = $m->subdir_next)
{
  $s->rewind;
  while (my ($pos, $size, $filename) = $s->file_next)
  {
    last if !defined $pos;
    if ($filename =~ m{ ^[^/]+\.map$ }x)
    {
      if ($queue_only)
      {
	if ($start_after % $ENV{KNOB_MAX_MERGE} == 0)
	{
	  print STDERR "+++mrjobstep 1 $start_after+++\n";
	}
	$start_after++;
	next;
      }
      next if 0 < $start_after--;
      open F, ">", $filename or die "open $filename: $!";
      $s->seek ($pos);
      while (my $dataref = $s->read_until ($pos+$size))
      {
	print F $$dataref;
      }
      close F or die "close $filename: $!";
      push @files, $filename;
    }
    if (@files >= $ENV{KNOB_MAX_MERGE})
    {
      last SUBDIR if $ENV{KNOB_PARTIAL};
      system ("./usr/bin/maq mapmerge out/$outfile.map *.map")
	  == 0 or die "maq mapmerge exited $?";
      unlink @files;
      rename "out/$outfile.map", "merged.map" or die "rename out/$outfile.map -> merged.map: $!";
      @files = ("merged.map");
    }
  }
}

if ($queue_only)
{
  print STDERR "+++mrout d41d8cd98f00b204e9800998ecf8427e+++\n";
  exit 0;
}

system ("./usr/bin/maq mapmerge out/$outfile.map *.map")
    == 0 or die "maq mapmerge exited $?";

system ("./usr/bin/maq mapcheck $ENV{KNOB_REFERENCEFILE} out/$outfile.map >out/mapcheck.txt")
    == 0 or die "maq mapcheck exited $?";

my $key = `whput out/`;
$key =~ s/^(.*? |)([0-9a-f]{32}\S*).*/$2/s
    or die "whput did not provide a manifest key";
print STDERR "+++mrout $key+++\n";
exit 0;

sub fetch_to_file
{
  my ($whc, $hash, $filename) = @_;
  my $dataref = $whc->fetch_block_ref ($hash) or die "fetch $hash: ".$whc->errstr;
  open F, ">", $filename or die "open $filename: $!";
  print F $$dataref or die "write $filename: $!";
  close F or die "close $filename: $!";
  return 1;
}
