#!/usr/bin/perl
# -*- mode: perl; perl-indent-level: 2; -*-

use strict; 

my @numeric2_bp = ( 'a', 'c', 'g', 't'); 
 
my $collision_limit = 2**$ENV{KNOB_COLLISION_BITS}; 

my @reads; 
my $count = 0;
my $skip = 0; 
my $skipsuffix = 0; 
my $emptysuffix = 0; 

while (read(STDIN, my $read_tuple, 14)) {
  
  my ($mer0,$mer1,$mer2,$mer3,$id_16,$id_32 ) = unpack "SSSSSN", $read_tuple;

  my $index = (($mer0>>8) << 16 )| $mer1;

  if (length ($reads[$index]) == 10 * $collision_limit) {
    $skip++;
    next;
  } 
  $reads[$index] .= pack "SSSSS", 
  $mer2, $mer3, $id_16, $id_32>>16, $id_32 & 0xFFFF;     

  if (length ($reads[$index]) == 10 * $collision_limit) {       
    $skipsuffix++;  
    $count -= ($collision_limit-1); 
    $skip += $collision_limit; 

    print STDERR "skip ".convert_mers (($mer0,$mer1))."\n";
  }
  else {
    $count++;     
  }
}
#conceivably exits without consuming all input (eg. if malformed input.)
print STDERR "count = $count skip = $skip\n";

my $pos = 0; 
for (my $i = 0; $i <= 2**24; $i++ ) {
  vec(my $index, 0, 32) = $pos; 
  print $index;
  my $len = length($reads[$i]);
  if ($len < 10*$collision_limit) {
    $pos += $len/2; 
  } 
}
 
my $recount = 0; 
for (my $i = 0; $i < 2**24; $i++) {
  my $len = length($reads[$i]);
  if ($len == 10*$collision_limit) {
    next; 
  } 
  my @list = unpack "S*", $reads[$i]; 
  my $mers;
  my $k = 0; 
  for (my $j = 0 ; $j < @list; $j+=5) {
    vec($mers, $k++, 16) = $list[$j];
    vec($mers, $k++, 16) = $list[$j+1];
    vec($mers, $k++, 16) = $list[$j+2];
    vec($mers, $k++, 16) = $list[$j+3];
    vec($mers, $k++, 16) = $list[$j+4];
    $recount++; 
  }
  if ($len) {
    print $mers; 
  }
  else {
    $emptysuffix++; 
  }
}
if ($recount != $count) {
  print STDERR "recount = $recount but should be $count\n"; 

}
print STDERR "skipsuffix = $skipsuffix emptysuffix = $emptysuffix\n"; 

sub convert_mers {

  my @mers = @_;

  my $read = ""; 
  
  foreach my $mer (@mers) {  
    for (my $j = 14 ; $j >= 0; $j-=2) { 
      $read .= $numeric2_bp[($mer>>$j)&3];
    } 
  }
  return $read; 
}
