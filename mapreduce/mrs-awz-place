#!/usr/bin/perl
# -*- mode: perl; perl-indent-level: 2; -*-

#KNOBS:PREFIXBITS, SUFFIXBITS

use strict; 

my $bp = $ENV{MR_INPUT};
my $prefixbits = $ENV{KNOB_PREFIXBITS}; 
my $suffixbits = $ENV{KNOB_SUFFIXBITS};
my $suffixmask = 2 ** $suffixbits -1;
my $count;
my $overflow; 

print STDERR "$bp $prefixbits $suffixbits $suffixmask\n"; 

my @reads; 
my $count = 0;
my $skip = 0; 

my $j = 0; 

while (read(STDIN, my $read_tuple, 14)) {
  
  my ($mer0,$mer1,$mer2,$mer3,$id_16,$id_32 ) = unpack "SSSSSN", $read_tuple;
  
  my $index = (($mer0>>8) << 16 )| $mer1;

  my @list = unpack "S*", $reads[$index];   

  my $not_present = 1; 
  for (my $i = 0 ; $i < @list; $i+=2) {
    if ($list[$i] == $mer2 && $list[$i+1] == $mer3) {
      $not_present = 0; 
      last; 
    }    
  }
  if ($not_present) {
    $reads[$index] .= pack "SS", $mer2, $mer3; 
    $count++; 
  }
  else {
    $skip++; 
  }

  if ($count == 40000000 ) {
    while (<>) {}; 
    last; 
  }
}
#conceivably exits without consuming all input (eg. if malformed input.)

print STDERR "count = $count skip = $skip\n"; 

my %hash; 
for (my $i = 0; $i < 2**24; $i++ ) {
  $hash{length($reads[$i])}++; 
}
while ( my ($k, $v) = each %hash ) {
  $k /= 4;
  print "$v $k\n";
}
