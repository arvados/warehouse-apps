#!/usr/bin/perl -w
# -*- mode: perl; perl-indent-level: 4; -*-

use strict;

my @numeric2_bp = ( 'a', 'c', 'g', 't'); 
 
my $id_ref = \&id_64;
$id_ref = \&id_32 if ( 2**(32-$ENV{KNOB_SUFFIXBITS})  < $ENV{MR_ID});

while (read (STDIN, my $read_triple, 12)) {
     
    my ($mers0_32, $mers1_32, $id_32) = unpack "NNN", $read_triple; 

    my $mers0;
    my $mers1; 

    for (my $j = 30 ; $j >= 0; $j-=2) { 
	$mers0 .= $numeric2_bp[($mers0_32>>$j)&3];
	$mers1 .= $numeric2_bp[($mers1_32>>$j)&3];
    }
    my $id = $id_ref->($id_32); #can be 64bit scalar  

    print "$mers0 $mers1 $id\n"; 
}
#conceivably exits without consuming all input (eg. if malformed input.)

sub id_32 {
    use Math::BigInt;
    my ($id_suffix) = @_; 
    my $id = Math::BigInt->new(($ENV{MR_ID}-1)); 
    $id->blsft ($ENV{KNOB_SUFFIXBITS}); 
    $id->bior($id_suffix);
    return $id
}	
    
sub id_64 {
    my ($id_suffix) = @_; 
    return ($ENV{MR_ID}-1)<<$ENV{KNOB_SUFFIXBITS}|$id_suffix;
}
