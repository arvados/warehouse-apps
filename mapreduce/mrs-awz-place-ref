#!/usr/bin/perl
# -*- mode: perl; perl-indent-level: 2; -*-

use strict; 
use Warehouse;
use Warehouse::Manifest;
use Warehouse::Stream;

#knobs
my $dump_N = $ENV{"KNOB_DUMP_READS"};
my $ref_key = $ENV{"KNOB_REFERENCE"}; 

my $index; 
my $buf; 

if (2**26 != read(STDIN, $index, 2**26)) {
  die "failed to read 2**26 byte index\n";
}
my $count = vec ($index, 2**24-1, 32);  

if ($count*2 != read(STDIN, $buf, $count*2)) {
  die "failed to read $count reads\n"; 
}

#conceivably exits without consuming all input (eg. if malformed input.)
print STDERR "count = $count\n"; 


if ($dump_N) {
  dump_reads($dump_N);
}
else {
  place_reads (); 
  
}

sub dump_reads {
  my ($dump_N) = @_; 
  my %hash; 

  for (my $i = 0; $i < 2**24; $i++ ) {
    my $start = $i ? vec($index, $i-1, 32) : 0;
    my $len = vec ($index, $i, 32) - $start; 
    $hash{$len}++;
    
    if ($i % $dump_N == 0) {
      for (my $j = 0; $j < $len; $j+=3) {
	print STDOUT
	    vec($buf, $start+$j, 16)." ".
	    vec($buf, $start+$j+1, 16)." ". 
	    vec($buf, $start+$j+2, 16)." ";  
      }
      if ($len) {
	print STDOUT "*** $i\n";
      }
    }  
  } 
  print "\nFrequencies:\n";
  while ( my ($k, $v) = each %hash ) {  
    $k/=3;
    print "$v $k\n"; 
  }
}

sub place_reads {

  print STDERR "!!! starting place reads... !!!\n"; 
  
  my $whc = new Warehouse
      (memcached_size_threshold => $ENV{KNOB_MEMCACHED_SIZE});  #needed? 
  
  my $manifest = new Warehouse::Manifest (whc => $whc,
					  key => $ref_key);

  $manifest->rewind; 

  print STDERR "!!! opened $ref_key for input... !!!\n";  
  
  while (my $instream = $manifest->subdir_next) {
    print "Reading $instream->name\n";
    while (my ($pos, $size, $filename) = $instream->file_next) {
      last if !defined $pos; 
      $instream->seek ($pos); 
      my $reference; 
      while (my $dataref = $instream->read_until ($pos+$size)) {
	print STDERR length ($$dataref)." "; 
      }
      print STDERR "$filename\n"; 
    }  
  }
  print STDERR "!!! read manifest, exiting... !!!\n"; 
}
