#!/usr/bin/perl
# -*- mode: perl; perl-indent-level: 2; -*-

use strict; 

use Warehouse;
use Warehouse::Manifest;
use Warehouse::Stream;


my @numeric2_bp = ( 'a', 'c', 'g', 't'); 
 
my $max_blocks = 1000000; 
$max_blocks = $ENV{KNOB_MAX_BLOCKS} if $ENV{KNOB_MAX_BLOCKS};
 
my $dump_N = $ENV{KNOB_DUMP_READS};
my $ref_key = $ENV{KNOB_REFERENCE}; 
my $prefix = $ENV{MR_ID}-1; 
my $place_ref = \&place0;
$place_ref = \&place1 if $ENV{KNOB_VARIANT};

print STDERR "PREFIX *** $prefix ***\n"; 

my $index; 
my $buf; 

my $read_error = 0; 
if (2**26 != read(STDIN, $index, 2**26)) {
  print STDERR "failed to read 2**26 byte index\n";
  $read_error = 1;
}
my $count = vec ($index, 2**24-1, 32);  

print STDERR "read index, count = $count\n"; 

if ($count*2 != read(STDIN, $buf, $count*2)) {
  print STDERR "failed to read $count reads\n"; 
  $read_error = 1; 
}
#conceivably exits without consuming all input (eg. if malformed input.)
print STDERR "read buf, count = $count\n"; 

if ($read_error) {
  while (<>) {};
  print STDERR "read error; exiting...\n"; 
  exit (0); 
}

my $pause = int (rand(100)); 
sleep (rand(100));
print "Hello World, paused for $pause seconds\n"; 
exit(0); 

if ($dump_N) {
  #dump_reads($dump_N);
}
else {
  #place_reads (); 
  #dump_placements(); 
}


sub dump_reads {
  my ($dump_N) = @_; 
  my %hash; 

  for (my $i = 0; $i < 2**24; $i++ ) {
    my $start = $i ? vec($index, $i-1, 32) : 0;
    my $len = vec ($index, $i, 32) - $start; 
    $hash{$len}++;
 
    if ($len) {
      my $read01 = $prefix << 24 | $i;
      
      print convert_mers (($read01 >> 16, $read01 & 0xFFFF));

      if ($i % $dump_N == 0) {
	for (my $j = 0; $j < $len; $j+=3) {
	  print " ".convert_mers ( (vec($buf, $start+$j,   16),
				    vec($buf, $start+$j+1, 16)));
	}
	print "\n";
      }  
    }
  } 
  print "\nFrequencies:\n";
  while ( my ($k, $v) = each %hash ) {  
    $k/=3;
    print "$v $k\n"; 
  }
}

sub dump_placements {
  my ($dump_P) = @_; 
  my %hash; 

  print STDERR "entering dump placements\n";

  for (my $i = 0; $i < 2**24; $i++ ) {
    my $start = $i ? vec($index, $i-1, 32) : 0;
    my $len = vec ($index, $i, 32) - $start; 
    
    for (my $j = 0; $j < $len; $j+=3) {
      $hash{vec($buf, $start+$j+2, 16)}++  
    }
  }   
  while ( my ($k, $v) = each %hash ) {  
    print "$v $k\n"; 
  }
}


sub place_reads {
 
  my $whc = new Warehouse
      (memcached_size_threshold => $ENV{KNOB_MEMCACHED_SIZE});  #needed? 
  
  my $manifest = new Warehouse::Manifest (whc => $whc,
					  key => $ref_key);

  $manifest->rewind; 

  print STDERR "!!! opened $ref_key for input... !!!\n";  
  
  while (my $instream = $manifest->subdir_next ) {
    while (my ($pos, $size, $filename) = $instream->file_next) {
      last if !defined $pos; 
      $instream->seek ($pos); 
      while (my $dataref = $instream->read_until($pos+$size)) {
	if ($max_blocks){ 
	  print STDERR $place_ref->($dataref)." "
	      .length($$dataref)." $filename\n";
	}
	$max_blocks--;
      } 
    }  
  }
  print STDERR $whc->iostats; 
}

sub place0 {

  my ($dataref) = @_; 

  my $count = 0; 
  
  my $bp = length ($$dataref); 
  if ($bp % 2) {
    print STDERR "!!! expected even number of bytes; got $bp !!!\n";
    return 0;
  }
  $bp /= 2; 

  my @hash_mers; 
  for (my $i = 750; $i < 1256; $i++) {
    $hash_mers[vec($$dataref, $i, 16)] = $i; #doesn't handle collisions -- fix!
  }
  for (my $i = 0; $i < $bp-1400; $i++){
    my $mer0 = vec($$dataref, $i, 16); 
    
    foreach my $wobble01 (9..10) {

      if ( $mer0>>8 == $prefix) {
        
	my $mer1 = vec($$dataref, $i+$wobble01, 16);
	my $suffix = ($mer0 << 16 | $mer1) & 0xFFFFFF; 
		  
	my $start = $suffix ? vec($index, $suffix-1, 32) : 0;
	my $stop = vec ($index, $suffix, 32); 

	for (my $j = $start; $j <= $stop; $j+=3) {
	  my $mer2 = vec ($buf, $j, 16);  
	  my $mer3 = vec ($buf, $j+1, 16);
	  my $pos2 = $hash_mers[$mer2];
	  my $pos3 = $hash_mers[$mer3]; 
	  
	  my $wobble23 = $pos3-$pos2; 
	  if ( $wobble23 == 9 || $wobble23 == 10) {	    
	    my $read = convert_mers($mer0, $mer1, $mer2, $mer3); 
	    
#	    my $ref = convert_mers (vec($$dataref, $i, 16),
#				    vec($$dataref, $i+$wobble01, 16),
#				    vec($$dataref, $pos2, 16), 
#				    vec($$dataref, $pos3, 16)); 
	    
#	    print "$read $i ".($i+$wobble01)." $pos2 $pos3\n";
	   
	    if (vec ($buf, $j+2, 16) < 65535) {
	      vec($buf, $j+2, 16)++; 
	    }
	    $count++; 
	  }
	}
      }
    }
    $hash_mers[vec($$dataref, $i+750, 16)] = 0; 
    $hash_mers[vec($$dataref, $i+1256, 16)] = $i+1256;
  }  
  return $count; 
}


sub place1 {

  my ($dataref) = @_; 
 
  my $count; 
  for (my $i = 0; $i < length ($$dataref); $i+=2){
    if ( vec($$dataref, $i+1, 16) == $prefix) {


    }	
  }
  return $count; 
}


sub convert_mers {

  my @mers = @_;

  my $read = ""; 
  
  foreach my $mer (@mers) {  
    for (my $j = 14 ; $j >= 0; $j-=2) { 
      $read .= $numeric2_bp[($mer>>$j)&3];
    } 
  }
  return $read; 
}
