#!/usr/bin/perl
# -*- mode: perl; perl-indent-level: 2; -*-

###MR_DESCRIPTION:gzip all subdirs
###MR_INPUT:manifest

use Warehouse;
use Warehouse::Manifest;
use Warehouse::Stream;
use IO::Compress::Gzip qw($GzipError);

# don't try to hold all compressed data in RAM when uncompressed file size > 128M.
my $PIPE_SIZE_THRESHOLD = 2**27;

my $manifestkey = $ENV{MR_INPUT0};

if ($ENV{MR_LEVEL} == 0)
{
  $ENV{MR_INPUT} = $manifestkey;
  do "mrtask-queuelines";
}

elsif ($ENV{MR_LEVEL} == 1)
{
  my $line = $ENV{MR_INPUT};
  my $whc = new Warehouse
      (memcached_size_threshold => $ENV{KNOB_MEMCACHED_SIZE});

  my $instream;
  if ($line =~ /^\#(\d+)$/) {
    my $line_number = $1;
    my $manifest = new Warehouse::Manifest (whc => $whc,
					    key => $ENV{MR_INPUT0});
    $manifest->rewind;
    while ($instream = $manifest->subdir_next)
    {
      last if --$line_number == 0;
    }
    die "no such input line: $line" if !defined $instream;
    $line = $instream->as_string;
  }
  else {
    $instream = new Warehouse::Stream (whc => $whc,
				       subdir => $line);
  }

  my $already_gzipped = 1;
  $instream->rewind;
  while (my ($pos, $size, $filename) = $instream->file_next)
  {
    last if !defined $pos;
    $already_gzipped=0, last if $filename !~ /\.g?z$/;
  }
  if ($already_gzipped)
  {
    print STDERR "+++mrout $line+++\n";
    exit 0;
  }

  my $outstream = new Warehouse::Stream (whc => $whc);
  $outstream->name ($instream->name);
  $outstream->clear;

  $instream->rewind;
  while (my ($pos, $size, $filename) = $instream->file_next)
  {
    last if !defined $pos;
    if ($filename =~ /\.g?z$/i) # already compressed, just copy
    {
      $outstream->write_start ($filename);
      $instream->seek ($pos);
      while (my $dataref = $instream->read_until ($pos + $size))
      {
	$outstream->write_data ($dataref);
      }
      $outstream->write_finish;
    }
    elsif ($size > $PIPE_SIZE_THRESHOLD)
    {
      use IO::Pipe;
      my $pipe = new IO::Pipe;
      my $pid;
      if ($pid = fork()) {
	# parent
	$pipe->reader();
	$outstream->write_start ($filename.".gz");
	my $buf;
	while (my $bufsize = $pipe->read ($buf, 2**20))
	{
	  die "assert failed" unless $bufsize == length $buf;
	  $outstream->write_data (\$buf)
	      or die "write failed: ".$outstream->errstr;
	  $readsize += $bufsize;
	}
	$outstream->write_finish;
	wait;
	die "gzip child exited with status $?" if $?;
      }
      elsif (defined $pid)
      {
	# child
	$pipe->writer();
	my $z = new IO::Compress::Gzip $pipe, Minimal=>1
	    or die "gzip failed: $GzipError";
	my $wrote = 0;
	$instream->seek ($pos);
	while (my $dataref = $instream->read_until ($pos + $size))
	{
	  $wrote += length($$dataref) if print $z $$dataref;
	}
	$z->close or die "gzip failed: $GzipError";
	$pipe->close or die "pipe close failed: $!";
	$wrote==$size or die "Only wrote $wrote bytes to gzip, file size was $size";
	exit 0;
      }
      else
      {
	die "fork failed";
      }
    }
    else
    {
      my $compressed;
      my $z = new IO::Compress::Gzip \$compressed, Minimal=>1
	  or die "gzip failed: $GzipError\n";
      $instream->seek ($pos);
      while (my $dataref = $instream->read_until ($pos + $size))
      {
	print $z $$dataref;
      }
      $z->close
	  or die "gzip failed: $GzipError\n";
      $outstream->write_start ($filename.".gz");
      $outstream->write_data (\$compressed)
	  or die "write failed: ".$outstream->errstr;
      $outstream->write_finish;
    }
  }
  my $fragkey = $whc->store_block ($outstream->as_string)
      or die "store_block failed: ".$whc->errstr;
  print STDERR "+++mrout ".$fragkey."+++\n";
  print STDERR $whc->iostats;
  exit 0;
}
