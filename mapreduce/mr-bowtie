#!/usr/bin/perl
# -*- mode: perl; perl-indent-level: 2; -*-

###MR_DESCRIPTION:run BWA against reference
###MR_INPUT:manifest
###MR_KNOBS:BOWTIE
###MR_KNOBS:REFERENCE

use strict; 
use Warehouse;
use Warehouse::Manifest;
use Warehouse::Stream;
use Safepipe;
use Fcntl ':flock';
use POSIX qw(strftime);


my $tmp = $ENV{MR_JOB_TMP};

my $src = "$ENV{MR_REVISION_INSTALLDIR}/src";
my $num_nodes = $ENV{SLURM_JOB_NUM_NODES} or die;
my $input_manifest_key = $ENV{MR_INPUT0} or die;
my $reference_manifest_key = $ENV{KNOB_REFERENCE} or die;
my $bowtie_manifest_key = $ENV{KNOB_BOWTIE} or die;
my $sam_manifest_key = $ENV{KNOB_SAM} or die;
my $max_mismatches = $ENV{KNOB_MAX_MISMATCHES};
$max_mismatches = 0.04 unless defined $max_mismatches;
my $reffile = "$tmp/ref";

my $MAQ_bin_key = '225ad960b8c87dd2c2b4091194ea4461';
my $MAQ_path="$tmp/maq";

my $bowtie_path="$tmp/bowtie";
my $sam_path="$tmp/sam";

my $whc = new Warehouse;

if ($ENV{MR_LEVEL} == 0)
{
  my $num_inputs = 0;
  my $ref = new Warehouse::Manifest (whc => $whc,
				     key => $input_manifest_key);
  $num_inputs++ while (my $s = $ref->subdir_next);

  my $inputs_per_node = $num_inputs / ($num_nodes + $num_inputs - 1);
  $ref = new Warehouse::Manifest (whc => $whc, key => $input_manifest_key);
  while (my $s = $ref->subdir_next)
  {
    my $subdir = $s->name;
    $subdir =~ s/^\.\///;
    my @files;
    while (my ($pos, $size, $filename) = $s->file_next)
    {
      last if !defined $pos;
      next if $filename !~ /(.*)\.(bfq|fq|fastq|fq.gz|fastq.gz)$/;
      # Assume _2 are reverse strand in pair-end-reads - next level does not need
      # them passed in.
      next if $1 =~ /_2$/;
      push @files, $filename;
      if (scalar(@files) >= $inputs_per_node) {
	my $filenames = join(',', @files);
	print STDERR "+++mrjobstep 1 $subdir $filenames+++\n";
	@files = ();
      }
    }
    if (@files) {
	my $filenames = join(',', @files);
	print STDERR "+++mrjobstep 1 $subdir $filenames+++\n";
    }
  }
  print STDERR "+++mrout d41d8cd98f00b204e9800998ecf8427e+++\n";
  exit 0;
}
if ($ENV{MR_LEVEL} == 1)
{
  my ($subdir, $filenames) = split (/ /, $ENV{MR_INPUT}, 2);
  my @files = split(/,/, $filenames);

  emit_date("start");
  atomic_whget_tar("$bowtie_manifest_key/bowtie.tgz", $bowtie_path);
  atomic_whget_tar("$sam_manifest_key/samtools.tgz", $sam_path);
  die "$bowtie_path/bowtie not found" unless -x "$bowtie_path/bowtie";
  atomic_whget_dir($reference_manifest_key, $reffile);
  atomic_whget($MAQ_bin_key, $MAQ_path);
  chmod 0755, $MAQ_path;

  foreach my $filename (@files) {
    my $bowtie_cmd;

    my $bamfile = "$tmp/${filename}-unsorted.bam";
    my $readfile1 = "$tmp/${filename}";
    my $readfile2;

    if ($filename =~ /(.+)_1\.(.+)$/) {
      # assume paired reads
      warn "paired reads\n"; 
      my $filename2 = "${1}_2.$2";
      $readfile2 = "$tmp/${filename2}";
      atomic_whget("$input_manifest_key/$subdir/${filename}", $readfile1);
      atomic_whget("$input_manifest_key/$subdir/${filename2}", $readfile2);
      if ($readfile1 =~ /.gz$/) {
	system("gunzip -f $readfile1") == 0 or die "gunzip $readfile1";
	system("gunzip -f $readfile2") == 0 or die "gunzip $readfile2";
	$readfile1 =~ s/.gz$//;
	$readfile2 =~ s/.gz$//;
      }
      elsif ($readfile1 =~ /.bfq$/) {
	system("$MAQ_path bfq2fastq $readfile1 $readfile1.fq") == 0 or die "maq bfq2fastq $readfile1";
	unlink $readfile1;
	system("$MAQ_path bfq2fastq $readfile2 $readfile2.fq") == 0 or die "maq bfq2fastq $readfile2";
	unlink $readfile2;
	$readfile1 .= ".fq";
	$readfile2 .= ".fq";
      }
      $bowtie_cmd = "$bowtie_path/bowtie --sam --time --threads 4 $reffile/index -1 $readfile1 -2 $readfile2";
    }
    else {
      warn "single-end reads"; 
      atomic_whget("$input_manifest_key/$subdir/${filename}", $readfile1);
      if ($readfile1 =~ /.gz$/) {
	system("gunzip $readfile1") == 0 or die "gunzip $readfile1";
	$readfile1 =~ s/.gz$//;
      }
      $bowtie_cmd = "$bowtie_path/bowtie --sam --time --threads 4 $reffile/index -1 $readfile1";
    }

    emit_date("before bowtie");

    system("bash -c 'set -o pipefail; $bowtie_cmd | $sam_path/samtools view -S -b - > $bamfile'") == 0
      or die "failed bowtie";
    emit_date("before sort");
    # Sort by read then by position to get deterministic output
    system("$sam_path/samtools sort -n -m 3000000000 $bamfile $readfile1-byread") == 0
      or die "failed sort";
    system("$sam_path/samtools sort -m 3000000000 $readfile1-byread.bam $readfile1") == 0
      or die "failed sort";
    system("$sam_path/samtools index $readfile1.bam") == 0
      or die "failed index";

    my @chrs = `$sam_path/samtools view -H $readfile1.bam | sed -n 's/\@SQ.*SN:\\(\\w*\\).*/\\1/ p'`;

    emit_date("before output");
    my $stream = "";
    foreach my $chr (@chrs) {
      chomp $chr;
      Safepipe::readfrom(
	"main::PIPELINE",
	"$sam_path/samtools view -b $readfile1.bam $chr",
	"mrs-store './$filename' '$chr.bam'"
      )
	or die "pipe failed: $!";
      $stream .= <PIPELINE>;
      close PIPELINE or die "Pipe failed: $!";
    }
    print STDERR "+++mrout $stream+++\n";
    emit_date("after output");
    unlink $readfile1;
    unlink $readfile2 if $readfile2;
    unlink $bamfile;
    unlink "$readfile1.bam";
    unlink "$readfile1.bam.bai";
    unlink "$readfile1-byread.bam";
  }
  exit 0;
}

sub atomic_whget {
  my ($source, $target) = @_;

  if (open (L, "+>>", "$target.lock") &&
      flock (L, LOCK_EX) &&
      !-e ($target))
  {
    if (0 != system "whget '$source' '$target.tmp'")
    {
      system "rm -rf '$target.tmp'";
      close L;
      die "whget exited $?";
    }
    rename "$target.tmp", $target;
    system "rm -rf '$target.tmp'";
  }
  close L;
  die "Failed to whget $source -> $target" if !-e $target;
}

sub atomic_whget_tar {
  my ($source, $target) = @_;

  system "rm -rf '$target'";
  if (open (L, "+>>", "$target.lock") &&
      flock (L, LOCK_EX) )
  {
    if (0 != system "whget '$source' '$target.tgz.tmp'")
    {
      system "rm -rf '$target.tgz.tmp'";
      close L;
      die "whget exited $?";
    }
    rename "$target.tgz.tmp", "$target.tgz" or die "rename $target.tgz.tmp failed";
    mkdir "$target" or die "mkdir $target failed";
    system("tar -C $target -xzf $target.tgz") == 0 or die "tar -xz $target.tgz failed";
  }
  close L;
  die "Failed to whget $source -> $target" if !-e $target;
}

sub atomic_whget_dir {
  my ($source, $target) = @_;

  system "rm -rf '$target'";
  if (open (L, "+>>", "$target.lock") &&
      flock (L, LOCK_EX))
  {
    if (0 != system "whget -r '$source'/ '$target.tmp/'")
    {
      system "rm -rf '$target.tmp'";
      close L;
      die "whget exited $?";
    }
    rename "$target.tmp", $target;
    system "rm -rf '$target.tmp'";
  }
  close L;
  die "Failed to whget $source -> $target" if !-e $target;
}

sub emit_date {
  my $who = shift;
  my $now_string = strftime "%H:%M:%S", localtime;
  warn "$who @ $now_string\n";
}
