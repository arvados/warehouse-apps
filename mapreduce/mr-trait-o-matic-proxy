#!/usr/bin/perl
# -*- mode: perl; perl-indent-level: 2; -*-

###MR_DESCRIPTION:use remote trait-o-matic service to process variants
###MR_INPUT:manifest
###MR_KNOBS:REMOTE_BASE_PUBLIC=
###MR_KNOBS:REMOTE_BASE=
###MR_KNOBS:GENOTYPE=
###MR_KNOBS:GENOTYPE_SUBDIR=
###MR_KNOBS:COVERAGE=
###MR_KNOBS:COVERAGE_SUBDIR=
###MR_KNOBS:PROFILE=
###MR_KNOBS:PROFILE_SUBDIR=
###MR_KNOBS:PHENOTYPE_LOCATOR=

use Warehouse;
my $whc = new Warehouse;


die "No REMOTE_BASE provided" if $ENV{KNOB_REMOTE_BASE} !~ /:\/\//;
$ENV{KNOB_REMOTE_BASE_PUBLIC} ||= $ENV{KNOB_REMOTE_BASE};


my $phenotype_locator;
if ($ENV{KNOB_PROFILE})
{
  # Convert profile to trait-o-matic phenotype/profile
  my $profile = $ENV{KNOB_PROFILE};
  if (exists $ENV{KNOB_PROFILE_SUBDIR})
  {
    $profile .= $ENV{KNOB_PROFILE_SUBDIR};
  }
  $profile = `whget $profile -`;
  die sprintf ("whget exit value %d signal %d", $?>>8, $?&127) if $?;
  $profile =~ s/^( *)- /$1/gm;
  use YAML;
  use YAML::Loader;
  my $loader = YAML::Loader->new;
  my $ynative = $loader->load($profile);

  my $jnative = {
    "sex" => $ynative->{records}->{traits}->{sex}->{value},
    "ancestry" => [ethnicity2ancestry ($ynative->{records}->{ethnicity}->{race}->{value})],
  };
  use JSON;
  my $json = new JSON;
  eval { $json->allow_blessed; }; # new version of JSON
  local $JSON::ConvBlessed = 1; # old version
  $phenotype = eval { $json->encode ($jnative) } || $json->objToJson ($jnative);

  use Warehouse::Stream;
  my $s = new Warehouse::Stream (whc => $whc);
  $s->clear;
  $s->name (".");
  $s->write_start ("profile.json");
  $s->write_data (\$phenotype);
  $s->write_finish;
  $phenotype_locator = $whc->store_block ($s->as_string) or die $whc->errstr;
  $phenotype_locator = "warehouse:///$phenotype_locator/profile.json";
}
else
{
  $phenotype_locator = $ENV{KNOB_PHENOTYPE_LOCATOR};
}

my $genotype_locator = "warehouse:///" . $ENV{KNOB_GENOTYPE} . $ENV{KNOB_GENOTYPE_SUBDIR};


my $coverage_locator = "warehouse:///" . $ENV{KNOB_COVERAGE} . $ENV{KNOB_COVERAGE_SUBDIR};


my $tmp = $ENV{MR_JOBSTEP_TMP};
mkdir "$tmp/out" or die "mkdir $tmp/out: $!";


my $child = open STDIN, "-|";
die "fork failed" if !defined $child;

if ($child == 0)
{
  # Submit locators to trait-o-matic

  exec ("curl",
	"-s",
	"-f",
	"--cookie-jar",
	"$tmp/cookies",
	"-Fgenotype_locator=$genotype_locator",
	"-Fcoverage_locator=$coverage_locator",
	"-Fphenotype_locator=$phenotype_locator",
	"-Fsubmit-from-warehouse-form=Next",
	"$ENV{KNOB_REMOTE_BASE}/query/",
	);
  exit 1;
}

$/ = undef;
my $form2 = <STDIN>;
close STDIN or die "close pipe: $!";

my ($remote_job_id) = $form2 =~ /<input[^>]+name="job"[^>]+value="(\d+)"/i;
die "Could not find job id in response from $ENV{KNOB_REMOTE_BASE}/query/"
    if !defined $remote_job_id;


# Make up a simple username and password to attach to the job

my $username = "proxy-" . $ENV{MR_JOB_ID} . "-" . $whc->{warehouse_name};
my $password = time;

my $child = open STDIN, "-|";
die "fork failed" if !defined $child;

if ($child == 0)
{
  # Submit username and password

  exec ("curl",
	"-s",
	"-f",
	"--cookie",
	"$tmp/cookies",
	"-Fusername=$username",
	"-Fpassword=$password",
	"-Fverify-password=$password",
	"-Fjob=$remote_job_id",
	"-Fsubmit-signup-form=Submit",
	"$ENV{KNOB_REMOTE_BASE}/query/",
	);
  exit 1;
}

my $ignore_result = <STDIN>;
close STDIN or die "close pipe: $!";


print STDERR qq{
Submitted at $ENV{KNOB_REMOTE_BASE}/query/
username $username
password $password
remote job id $remote_job_id
};


# Wait for trait-o-matic to process the data (TODO: just output the
# login info here, and split "retrieve results" into a second
# mr-function.)

my $failures = 0;
my $html;
my $sleep = 1;

until ($html =~ /<!--.*"state":"(.*?)"/m
       ? $1 eq "finished"
       : ($html =~ /<!-- processed (\S*) -->/
	  ? length($1)
	  : ($html =~ /span class="count"/ &&
	     $html =~ /chr\S\S?:\d+/)))
{
  sleep $sleep;
  ++$sleep if $sleep < 10;

  # Get results page (we should get a blank template page if
  # processing isn't finished)
  $html = fetch_results ("/results/");

  # If we didn't get a status message, perhaps the server is
  # down/broken
  if (!defined $html || $html !~ /<!--.*"state":".*?"/)
  {
    $sleep = 10;
    if (++$failures > 3)
    {
      die "Exceeded max polling failures ($!), giving up";
    }
  }

  # For debugging purposes, save html output even if we end up
  # waiting to poll again

  $html =~ s{(href|src)="/}{$1="$ENV{KNOB_REMOTE_BASE_PUBLIC}/}g;
  $html =~ s{div id="head".*?(div id="body")}{$1}s;
  $html =~ s{.*/(download|chmod|reprocess)/.*}{}gm;
  $html =~ s{.*\Q$username\E.*}{}gm;

  open R, ">", "$tmp/out/out.html";
  print R $html;
  close R;
}


# Now that the html looks like it's finished processing, we know the
# JSON data is available, so we'll download and save that.

my $json;
for (1..3)
{
  $json = fetch_results ("/download/json/$remote_job_id");
  last if $json; 
}
if ($json)
{
  $json =~ s/"username":"\Q$username\E",//;
  $json =~ s/"job_id":"\Q$remote_job_id\E",//;
  open J, ">", "$tmp/out/out.json";
  print J $json;
  close J or die "$tmp/out/out.json: $!";
}


open STDOUT, "| whput -r --as-stream $tmp/out | mrs-output";
close STDOUT or die "close pipe: $!";
exit 0;


sub fetch_results
{
  my $uri = shift;
  my $child = open STDIN, "-|";
  die "fork failed" if !defined $child;

  if ($child == 0)
  {
    # fetch results
    exec ("curl",
	  "-s",
	  "-f",
	  "--cookie",
	  "$tmp/cookies",
	  "-Fusername=$username",
	  "-Fpassword=$password",
	  "-Fsubmit-results-form=Submit",
	  "-Fsuppress-timing-data=1",
	  "$ENV{KNOB_REMOTE_BASE}$uri",
	  );
    exit 1;
  }

  my $ret = <STDIN>;
  return undef if !close STDIN;
  return $ret;
}

sub ethnicity2ancestry
{
  my $ethnicity = shift;
  my $ancestry = {};
  my @map = ( "white" => "eur",
	      "african" => "afn",
	      "african" => "afs",
	      "asia" => "asc",
	      "asia" => "ase",
	      "asia" => "asw",
	      "america" => "ami",
	      "ocean" => "oci",
      );
  while (my ($e, $a) = splice @map, 0, 2)
  {
    # recognize vague terms (regexps) from map
    $ancestry->{$a} = 1 if $ethnicity =~ /$e/;
    # add the more specific three-letter codes too if they appear
    $ancestry->{$a} = 1 if $ethnicity =~ /\b$a\b/;
  }
  return sort keys %$ancestry;
}
