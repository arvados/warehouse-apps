#!/usr/bin/perl

if (open STDIN, "-|")
{
    my @all = <STDIN>;
    chomp @all;
    my $tot = 0;
    my $call = 0;
    for (@all)
    {
	if (/(\d+)$/)
	{
	    my $n = $1;
	    $tot += $n;
	    $call += $n if !/^noc/;
	}
    }
    print join ("\t", $ENV{MR_ID}, @all, "call", $call, "total", $tot), "\n";
    exit 0;
}
else
{
    if ($ENV{KNOB_POPULATION_SNPS_ONLY})
    {
	use Safepipe;
	Safepipe::readfrom
	    ("main::POP",
	     "whget -r $ENV{MR_INPUT0}/ -",
	     "mrs-population-snplist",
	     "sed -e 's/[ \t]/-/'",
	     "sort -uk1,1 >$ENV{MR_JOBSTEP_TMP}/popsnp.txt");
	while (<POP>) { }
	close POP or die "Pipe failed: $!";
	open STDIN, "-|", "perl -pe 's/[ \t]/-/' | sort -u -sk1,1 | join $ENV{MR_JOBSTEP_TMP}/popsnp.txt - | perl -pe 's/-/\t/' | sort -snk2,2 | sort -sk1,1"
	    or die "Pipe failed: $!";
    }
    if ($ENV{KNOB_SNPREFERENCE})
    {
	# distribute input to two child procs
	my @writehandle;
	for my $in_reflist (1, 0)
	{
	    my ($r, $w) = ("READER$in_reflist", "WRITER$in_reflist");
	    pipe ($r, $w) or die "pipe: $!";
	    if (fork() == 0)
	    {
		close $w;
		open STDIN, "<&", $r or die "open: $!";
		$ENV{KNOB_WANT_SNPS} = 0;
		open STDIN, "-|", "mrs-maq-alnfilter", ($in_reflist ? () : ("-v"))
		    or die "mrs-maq-alnfilter: $!";
		&do_stats($in_reflist);
		exit 0;
	    }
	    close $r;
	    push @writehandle, $w;
	}
	while (<>)
	{
	    for my $w (@writehandle) { print $w $_ }
	}
	for my $w (@writehandle) { close $w; }
	exit 0;
    }
    else
    {
	&do_stats (0);
    }
}

sub do_stats
{
    my $in_reflist = shift;
    my %stat = (het => 0,
		hom => 0,
		ref => 0,
		noc => 0);
    while (<>)
    {
	my ($chr, $pos, $ref, $call) = /^(\S+)\s(\d+)\s([A-Z])+\s([A-Z])+\s/;
	if (!defined $chr)
	{
	    ($chr, $pos) = /^(\S+)\s(\d+)\n/;
	    ($ref, $call) = ("N", "N");
	}
	next if !defined $chr;
	++$stat{het} if is_het($call);
	++$stat{hom} if is_hom($call);
	++$stat{noc} if is_nocall($call);
	++$stat{ref} if is_hom($call) && $call eq $ref;
    }
    my $yn = $in_reflist ? "y" : "n";
    print "het/$yn\t$stat{het}\n";
    print "hom/$yn\t$stat{hom}\n";
    print "ref/$yn\t$stat{ref}\n";
    print "noc/$yn\t$stat{noc}\n";
}

sub fasta2bin
{
    my $x = shift;
    $x =~ tr/a-z/A-Z/;
    $x =~ tr/XACMGRSVTWYHKDBN/0123456789abcdef/;
    $x = hex($x);
    while ($x & ~0xf)
    {
	$x = ($x & 0xf) | ($x >> 4);
    }
    return $x;
}

sub is_het
{
    my $x = fasta2bin (@_);
    $x !~ /^(0|1|2|4|8|15)$/;
}

sub is_hom
{
    my $x = fasta2bin (@_);
    $x =~ /^(1|2|4|8)$/;
}

sub is_nocall
{
    my ($x) = shift;
    $x =~ /^[NX]/i;
}
