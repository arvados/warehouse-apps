#!/usr/bin/perl

# mrtaskmanager: run a map or reduce function on one input.

use strict;

eval {
    # limit virtual memory to real mem size if libbsd-resource-perl is installed
    use BSD::Resource;
    my $slots = $ENV{MR_NODE_SLOTS} || 1;
    my ($kibibytes) = `cat /proc/meminfo` =~ /MemTotal:\s*(\d+)/;
    $kibibytes = 2**23 if $kibibytes < 2**18; # assume 8GB if meminfo seems wrong
    my $mebibytes = int($kibibytes/$slots) >> 10;
    setrlimit(RLIMIT_AS, $mebibytes<<20, $mebibytes<<20);
    $ENV{MR_SLOT_RAM_MB} = $mebibytes;
};

$ENV{PATH} = "$ENV{MR_REVISION_INSTALLDIR}/bin"
    . ":$ENV{MR_REVISION_INSTALLDIR}/usr/bin"
    . ":$ENV{MR_REVISION_SRCDIR}/warehouse/client"
    . ":$ENV{MR_REVISION_SRCDIR}/mapreduce"
    . ":$ENV{MR_REVISION_INSTALLDIR}/src/mapreduce"
    . ":$ENV{PATH}";
$ENV{PERLLIB} = "$ENV{MR_REVISION_INSTALLDIR}/usr/share/perl5"
    . ":$ENV{MR_REVISION_SRCDIR}/mapreduce"
    . ":$ENV{MR_REVISION_SRCDIR}/libwarehouse-perl/lib"
    . ":$ENV{PERLLIB}";

$ENV{GZIP_COMMAND} = 'gzip -n';
if (scalar `which pigz` && $? == 0) {
    $ENV{GZIP_COMMAND} = 'pigz -T -n';
}

$ENV{TMPDIR} ||= "/tmp";
$ENV{MR_JOB_TMP} ||= "$ENV{TMPDIR}/mrcompute/work";
$ENV{MR_JOBSTEP_TMP} ||= "$ENV{TMPDIR}/mrcompute/work/$ENV{MR_SLOT}";
if (-d $ENV{MR_JOBSTEP_TMP}) {
  opendir D, $ENV{MR_JOBSTEP_TMP} or die "opendir $ENV{MR_JOBSTEP_TMP}: $!";
  while (my $f = readdir D) {
    if ($f ne '.' && $f ne '..') {
      system ("rm", "-rf", "$ENV{MR_JOBSTEP_TMP}/$f");
    }
  }
  closedir D;
} else {
  -d $ENV{MR_JOB_TMP} or mkdir $ENV{MR_JOB_TMP} or -d $ENV{MR_JOB_TMP} or die "mkdir $ENV{MR_JOB_TMP}: $!";
  mkdir $ENV{MR_JOBSTEP_TMP} or die "mkdir $ENV{MR_JOBSTEP_TMP}: $!";
}

$ENV{TMPDIR} = $ENV{MR_JOBSTEP_TMP};

foreach (split ("\n", $ENV{MR_KNOBS}))
{
  my ($k, $v) = split ("=", $_, 2);
  $v =~ s/\\(.)/$1 eq "n" ? "\n" : $1/ges;
  $ENV{"KNOB_$k"} = $v;
  $ENV{"JOB_PARAMETER_$k"} = $v;
  $ENV{$k} = $v if $k =~ /^DEBUG_/;
}

foreach (split ("\n", $ENV{TASK_PARAMETERS}))
{
  my ($k, $v) = split ("=", $_, 2);
  $v =~ s/\\(.)/$1 eq "n" ? "\n" : $1/ges;
  $ENV{"TASK_PARAMETER_$k"} = $v;
}

$ENV{NOCACHE} ||= $ENV{KNOB_NOCACHE};
$ENV{NOCACHE_READ} ||= $ENV{KNOB_NOCACHE_READ};
$ENV{NOCACHE_WRITE} ||= $ENV{KNOB_NOCACHE_WRITE};

$ENV{GNUPGHOME} = $ENV{MR_JOBSTEP_TMP}."/.gnupg";
if (length $ENV{GPG_KEYS}) {
    warn "GPG_KEYS => ".length($ENV{"GPG_KEYS"})." bytes\n" if $ENV{"DEBUG_GPG"};
    mkdir $ENV{GNUPGHOME}, 0700;
    system ("gpgsetup") == 0 or die "gpgsetup: error $! exit $?";
    delete $ENV{GPG_KEYS};
    if ($ENV{ENCRYPT_TO} !~ /[^\s,]/) {
	die "Fatal: GPG_KEYS provided, but gpgsetup failed.\n";
    }
    warn "ENCRYPT_TO => ".$ENV{"ENCRYPT_TO"}."\n" if $ENV{"DEBUG_GPG"};
}


open STDOUT, ">/dev/null";

exec "mr-$ENV{MR_FUNCTION}";
die "mr-$ENV{MR_FUNCTION}: $!";
