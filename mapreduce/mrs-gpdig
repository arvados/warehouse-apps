#!/usr/bin/perl

use strict;

use Safepipe;
Safepipe::readfrom ("main::R",
		    "whget -r \"$ENV{KNOB_SNPREFERENCE}\" -",
		    "gzip -cdf",
		    )
    or die "pipe failed: $!";
my @snpref;
while (<R>)
{
    chomp;
    push @snpref, [split];
    # special kludge for bed/dbsnp
    ++$snpref[-1]->[1]
	if ($snpref[-1]->[1]+1 == $snpref[-1]->[2]);
}
close R or die "pipe failed; $!";

@snpref = sort { ( $a->[0] cmp $b->[0] ||
		   $a->[1] <=> $b->[1] ||
		   $#$a <=> $#$b ) } @snpref;
for (my $i=$#snpref-1; $i>=0; $i--)
{
    if ($snpref[$i]->[0] eq $snpref[$i+1]->[0] &&
	$snpref[$i]->[1] == $snpref[$i+1]->[1])
    {
	splice @snpref, $i, 1;
    }
}

my $srmin;
my $srmax;

my %want_pos;
my @buf;
while(<>)
{
    my @annot = split /\t/;
    if (@buf && $buf[0]->[0] ne $annot[0])
    {
	&flush;
    }
    if (!exists $want_pos{$annot[3]} &&
	findsnpref ($annot[0], $annot[3], $annot[3]))
    {
	$want_pos{$annot[3]} = {};
    }
    push @buf, \@annot;
}
&flush;

sub flush
{
    for (@buf)
    {
	my ($chr, $exonlength, $strand, $pos, $callbase, $refbase, $match,
	    $quality, @read_id) = @$_;
	pop @read_id;
	my $read_id = "@read_id";
	push @$_, $read_id;
	$want_pos{$pos}->{$read_id} = 1 if defined $want_pos{$pos};
	
    }
    for my $target_pos (sort keys %want_pos)
    {
	my $next_alignment;
	my @alignments_out;
	my %read_id_alignment;
	for my $annot (@buf)
	{
	    next if $annot->[3] < $target_pos - 16 - 12 - 1;
	    next if $annot->[3] > $target_pos + 16 + 12 + 1;
	    if ($want_pos{$target_pos}->{$annot->[-1]})
	    {
		my $this_alignment = $read_id_alignment{$annot->[-1]};
		if (!defined ($this_alignment))
		{
		    $read_id_alignment{$annot->[-1]} =
			$this_alignment =
			$next_alignment;
		    $alignments_out[$this_alignment] = [];
		    $next_alignment++;
		}
		push (@ { $alignments_out[$this_alignment] },
		      @$annot[-1,3,4,2,7]);
	    }
	}
	for my $align (@alignments_out)
	{
	    my $firstpos = $align->[1];
	    my $lastpos = $align->[-4];
	    my $thisread = "n" x (1 + $lastpos - $firstpos);
	    my $thisquality = "." x (1 + $lastpos - $firstpos);
	    my $read_id = $align->[0];
	    $read_id =~ s/\s/:/g;
	    my $strand = $align->[3] eq "F" ? "+" : "-";
	    while (@$align)
	    {
		my ($chr, $pos, $callbase, $strand, $quality)
		    = splice @$align, 0, 5;
		substr ($thisread, $pos-$firstpos, 1) = $callbase;
		substr ($thisquality, $pos-$firstpos, 1) = chr(33+$quality/10);
	    }
	    @$align = ($read_id, $firstpos, $strand, length($thisread), $thisread, $thisquality);
	}
	for my $align (sort { ($a->[1] <=> $b->[1]
			       ||
			       index($a->[4], "n") <=> index($b->[4], "n") )
			      } @alignments_out)
	{
	    my $read_id = shift @$align;
	    print (join ("\t",
			 $read_id,
			 $buf[0]->[0],
			 @$align,
			 ), "\n");
	}
    }
    @buf = ();
    %want_pos = ();
}

sub findsnpref
{
    my ($chr, $startpos, $endpos) = @_;

    # srmin left over from the previous search already points to the
    # next interesting position after the previous read's startpos.
    # Usually this is the relevant part of the search for this read,
    # too.  Let's check this common case quickly before doing the full
    # binary search.

    if (($chr cmp $snpref[$srmin]->[0]
	 || $endpos <=> $snpref[$srmin]->[1]) < 0
	# sought read ends before location [srmin]

	&& ($srmin == 0
	    ||
	    ($chr cmp $snpref[$srmin-1]->[0]
	     || $startpos <=> $snpref[$srmin-1]->[1]) > 0)
	# sought read starts after location [srmin-1]
	)
    {
	return undef;
    }

    # startpos and endpos tend to proceed toward srmin. perhaps they
    # got there:

    if ($chr eq $snpref[$srmin]->[0] &&
	$startpos <= $snpref[$srmin]->[1] &&
	$endpos >= $snpref[$srmin]->[1])
    {
	return 1;
    }

    # just past?

    if ($srmin < $#snpref &&
	($chr cmp $snpref[$srmin]->[0]
	 || $startpos <=> $snpref[$srmin]->[1]) > 0 &&
	($chr cmp $snpref[$srmin+1]->[0]
	 || $endpos <=> $snpref[$srmin+1]->[1]) < 0)
    {
	++$srmin;
	return undef;
    }

    $srmin = 0;
    $srmax = $#snpref;
    while ($srmin < $srmax)
    {
	my $srmid = int (($srmin + $srmax) / 2);
	my $cmp = $chr cmp $snpref[$srmid]->[0]
	    || $startpos <=> $snpref[$srmid]->[1];
	if ($cmp < 0)		# sought read starts before location [srmid] --
				# if it covers anything after [srmid], it must
				# also cover [srmid].
	{
	    $srmax = $srmid;
	}
	elsif ($cmp > 0)	# sought read starts after location [srmid] --
				# it can't cover [srmid] or anything before it.
	{
	    $srmin = $srmid + 1;
	}
	else
	{
	    $srmin = $srmid;
	    return 1;
	}
    }

    return ($chr eq $snpref[$srmin]->[0]
	    && $startpos <= $snpref[$srmin]->[1]
	    && $endpos >= $snpref[$srmin]->[1]);
}
