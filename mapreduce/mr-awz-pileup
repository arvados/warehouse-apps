#!/usr/bin/perl
# -*- mode: perl; perl-indent-level: 2; -*-

###MR_DESCRIPTION:pivot input and output consensus placements 
###MR_INPUT:manifest
###MR_KNOBS:MERGEKEYS= 
###MR_KNOBS:FILENAME=0:chr1:0 
###MR_KNOBS:CHUNKNUM=235
###MR_KNOBS:CHUNKBITS=20
###MR_KNBOS:CUTOFF=3 

use strict; 
use Warehouse;
use Warehouse::Manifest;
use Warehouse::Stream;

my $whc = new Warehouse
      (memcached_size_threshold => $ENV{KNOB_MEMCACHED_SIZE});  #needed? 
 
my $manifestkey = $ENV{MR_INPUT0}; 
my @mergekeys = split /:/, $ENV{KNOB_MERGEKEYS};
push @mergekeys, $manifestkey; 

my $r = $ENV{KNOB_CUTOFF}; 

if ($ENV{MR_LEVEL} == 0) {
  $ENV{MR_INPUT} = $manifestkey; 
  for (0..$ENV{KNOB_CHUNKNUM}) {
    print STDERR "+++mrjobstep 1 $_+++\n"; 
  }
  print STDERR "+++mrout d41d8cd98f00b204e9800998ecf8427e+++\n";
  exit 0;
}
elsif ($ENV{MR_LEVEL} == 1) {

  my %pileup;

  my $want_chr_position = $ENV{MR_INPUT}*(2**$ENV{KNOB_CHUNKBITS});

  foreach my $current_key (@mergekeys) {
    
    print STDERR "Reading manifest: $current_key\n";
    
    my $manifest = new Warehouse::Manifest (whc => $whc,
					    key => $current_key);
    $manifest->rewind;   

    my @placements; 
    
    while (my $instream = $manifest->subdir_next ) {
      while (my ($pos, $size, $filename) = $instream->file_next) {
	last if !defined $pos; 
	
	my ($prefix, $chr_pos, $chunk_length) = split (/\./, $filename);
	if ($chr_pos != $want_chr_position) {
	  #print STDERR "skipping $filename\n";
	  next; 
	}
	$instream->seek ($pos); 
       
	while (my $placement = $instream->read_until($pos+$size, "\n")) {
	  my ($mer, $position, $id_16, $id_32) = split ' ', $$placement; 
	  
	  my $bp; 
	  my $count = 0; 	
	  while ($mer =~ m/[acgt]*([ACGT])/g) {
	    $position += (pos($mer)-1);
	    $bp = $1; 
	    $count++;
	  }  
	  if ($count == 1) {
	    my $id = $id_16<<22|$id_32; 
	    if (!exists ($pileup{$position}{$id})) {
	      $pileup{$position}{$id}=$bp;
	      #print "$position $id $pileup{$position}{$id}\n";
	    }
	    elsif ( $pileup{$position}{$id} !~ m/($bp)/) { 
	      $pileup{$position}{$id}.=$bp; 
	      #print "$position $id $pileup{$position}{$id}\n";
	    }
	  }
	}	
      }
    } 
  } 
  my $outstream = new Warehouse::Stream (whc => $whc);
  $outstream->name ("./$ENV{KNOB_FILENAME}");
  $outstream->clear;
  $outstream->write_start ("$want_chr_position.txt"); 
 
  my $count; 

  for (my $i=0; $i<2**$ENV{KNOB_CHUNKBITS}; $i++){
    my %hash; 
    my @ids; 
    for my $id (keys %{$pileup{$i}}) {
      my $bp = $pileup{$i}{$id}; 
      if (length($bp)==1){
	$hash{$bp}++; #degenerates don't vote 
      } 
      push @ids, "$bp$id"; 
    }
    if (@ids) {
      my @votes;
      push @votes, "$hash{'A'}A";
      push @votes, "$hash{'C'}C";
      push @votes, "$hash{'G'}G";
      push @votes, "$hash{'T'}T";
      my @call = sort { $b <=> $a } @votes;  
      
      my $ratio = $hash{substr($call[0],-1,1)}/
	  (1+$hash{substr($call[1],-1,1)}+$hash{substr($call[2],-1,1)});   
      if ($ratio >= $r) {
	$outstream->write_data("$i $ratio @call @ids\n"); 	
	$count++; 
      }
    }
  }
  $outstream->write_finish; 

  print STDERR "Found $count variants at $want_chr_position on ".
      "$ENV{KNOB_FILENAME}\n"; 

  my $fragkey = $whc->store_block ($outstream->as_string)
      or die "store_block failed: ".$whc->errstr;
  print STDERR "+++mrout ".$fragkey."+++\n";
  print STDERR $whc->iostats;
  exit 0;
}
