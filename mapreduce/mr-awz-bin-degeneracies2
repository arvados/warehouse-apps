#!/usr/bin/perl
# -*- mode: perl; perl-indent-level: 2; -*-

###MR_DESCRIPTION:visit all subdirectories and partition reads into "bins" by the first bit of each mer.   
###MR_INPUT:manifest

use strict; 
use Warehouse;
use Warehouse::Manifest;
use Warehouse::Stream;

my @numeric2_bp = ( 'a', 'c', 'g', 't'); 

my %bp_numeric2 = (
  'a' => 0, 
  'c' => 1,
  'g' => 2,
  't' => 3
    ); 

my @RevcTable;
foreach my $x (0 .. 255) {
  my $bp;
  my $x_rc; 
  for (my $i = 6 ; $i >= 0; $i-=2) { 
    $bp .= $numeric2_bp[($x>>$i)&3];
  }
  $bp =~ tr/acgt/tgca/;
  my $bp_rc = reverse $bp; 
  while ($bp_rc =~ m/(.)/g) {
    $x_rc = ($x_rc)<<2|$bp_numeric2{$1}; 
  }
  $RevcTable[$x]=$x_rc; 
}

my $manifestkey = $ENV{MR_INPUT0};

if ($ENV{MR_LEVEL} == 0)
{
  $ENV{MR_INPUT} = $manifestkey; 
  for(0..255) 
  { 
    print STDERR "+++mrjobstep 1 $_+++\n"; 
  }
  print STDERR "+++mrout d41d8cd98f00b204e9800998ecf8427e+++\n";
  exit 0;
}
elsif ($ENV{MR_LEVEL} == 1)
{
  my $whc = new Warehouse
      (memcached_size_threshold => $ENV{KNOB_MEMCACHED_SIZE});
  
  my $manifest = new Warehouse::Manifest (whc => $whc,
					  key => $manifestkey);
	
  my $outstream = new Warehouse::Stream (whc => $whc);
  my $name = "./".$ENV{MR_INPUT}; 
  my $prefix = $ENV{MR_INPUT};

  $outstream->name ($name);
  $outstream->clear;
  $outstream->write_start ("reads.bin2"); 

  my $count = 0; 

  while (my $instream = $manifest->subdir_next)
  {

    my $id_16 = $instream->name;
    $id_16 =~ s/.\/([0-9]*)/$1/;

    #print STDERR "reading $id_16\n"; 

    while (my ($pos, $size, $filename) = $instream->file_next)
    {
      last if !defined $pos; 
      $instream->seek ($pos); 
      my $read_data;
      if ($filename =~ m/\.bin/) {
	while (my $dataref = $instream->read_until ($pos + $size))
	{
	  $read_data .= $$dataref; 
	}
      }
      else {
	next; 
      }    
      my @reads = unpack "N*", $read_data; 

      for (my $i = 0; $i < @reads; $i+=3) {
				      
	if ( ($reads[$i+1]>>24) == $prefix ) {	  
	  $outstream->write_data (pack "SSSSSN", 
				  $reads[$i+1] >>16, 
				  $reads[$i+1] & 0xFFFF, 
				  $reads[$i] >> 16,
				  $reads[$i] & 0xFFFF,
				  $id_16, 
	                          $reads[$i+2]);	  
	  $count++; 
	}
	if ( $RevcTable[$reads[$i]&0xFF] == $prefix ) {	  
	  $outstream->write_data (pack "SSSSSN", 
				  revc($reads[$i]) >>16, 
				  revc($reads[$i]) & 0xFFFF, 
				  revc($reads[$i+1]) >> 16,
				  revc($reads[$i+1]) & 0xFFFF,
				  $id_16, 
	                          $reads[$i+2]);	  
	  $count++; 
	}
      }
    }
  }
  print STDERR "$prefix $count\n"; 
  $outstream->write_finish; 

  my $fragkey = $whc->store_block ($outstream->as_string)
      or die "store_block failed: ".$whc->errstr;
  print STDERR "+++mrout ".$fragkey."+++\n";
  print STDERR $whc->iostats;
 
  exit 0;  
}

sub revc {
  my ($read_numeric) = @_; 
  
  return ($RevcTable[$read_numeric & 0xff] << 24) | 
      ($RevcTable[($read_numeric >> 8) & 0xff] << 16) | 
      ($RevcTable[($read_numeric >> 16) & 0xff] << 8) | 
      ($RevcTable[($read_numeric >> 24) & 0xff]);
  
}
