#!/usr/bin/perl
# -*- mode: perl; perl-indent-level: 2; -*-

###MR_DESCRIPTION:convert solexa reads to <=2000000-read bfq streams
###MR_INPUT:hash
###MR_KNOBS:ALL2STD_PL=3733b1cc64cf5f8e59511c0ecdc42d44
###MR_KNOBS:MAQ_DEB=715ba7d3755667609193c68cdb5dec04
###MR_KNOBS:INPUTFORMAT=solexa

use strict; 
use Warehouse;
use Safepipe;

$ENV{KNOB_ALL2STD_PL} ||= "3733b1cc64cf5f8e59511c0ecdc42d44";
$ENV{KNOB_MAQ_DEB} ||= "715ba7d3755667609193c68cdb5dec04";
$ENV{KNOB_INPUTFORMAT} ||= "solexa";

my $tmp = $ENV{MR_JOBSTEP_TMP};
chdir ($tmp) or die "chdir $tmp: $!";
mkdir "out" or die "mkdir out: $!";

my $whc = new Warehouse;
my $whget_command;
my $formatfilter = "gzip -cdf";

if ($ENV{MR_LEVEL} == 0)
{
  $whget_command = "whget '$ENV{MR_INPUT0}' -";
  my $in = $whc->fetch_block_ref ((split(",", $ENV{MR_INPUT0}))[0])
      or die "fetch_block_ref($ENV{MR_INPUT0}) failed";
  if ($$in =~ m{ ^\.(/\S+)?\ ([0-9a-f]{32}\S*\ )+\d+:\d+:(\S+)\n$ }sx)
  {
    # just one file
    $whget_command = "whget '$ENV{MR_INPUT0}$1/$3' -";
  }
  elsif ($$in =~ m{ ^\.(/\S+)? (\ [0-9a-f]{32}\S*)+ \ \d+:\d+: }sx)
  {
    my $linenumber = 0;
    foreach (split ("\n", $$in))
    {
      ++$linenumber;
      if (m{ ^\.(/\S+)?	# stream name
		 ( (?:\ [0-9a-f]{32}\S*) +) # data blocks
		 ( (\ \d+:\d+:(\S+)_1\.fastq(\.gz)?\ \d+:\d+:(\S+)_2\.fastq(\.gz)?) +)
		 $ }sx)
      {
	# paired reads
	my $datablocks = $2;
	my @files = split (/ /, $3);
	shift @files if $files[0] eq "";
	$datablocks =~ s/^ //;
	while (@files >= 2)
	{
	  print STDERR "+++mrjobstep 1 $datablocks $files[0] $files[1]+++\n";
	  splice @files, 0, 2;
	}
      }
      elsif ($$in =~ m{ ^\.(/\S+)?	# stream name
			    ( (?:\ [0-9a-f]{32}\S*) +) # data blocks
			    ( (\ \d+:\d+:(\S+)(\.fastq|\.txt)(\.gz)?) + )
			    $ }sx)
      {
	# unpaired reads
	my $datablocks = $2;
	my @files = split (/ /, $3);
	shift @files if $files[0] eq "";
	$datablocks =~ s/^ //;
	for (@files)
	{
	  print STDERR "+++mrjobstep 1 $datablocks $_+++\n";
	}
      }
      else
      {
	warn "Did not find .fastq or .txt files on line $linenumber";
      }
    }
    print STDERR "+++mrout d41d8cd98f00b204e9800998ecf8427e+++\n";
    exit 0;
  }
}

if ($ENV{KNOB_INPUTFORMAT} eq "solexa")
{
  fetch_to_file ($whc, $ENV{KNOB_ALL2STD_PL}, "all2std.pl");
  $formatfilter .= " | perl all2std.pl sol2std";
}
elsif ($ENV{KNOB_INPUTFORMAT} eq "std")
{
}
else
{
  die "Unsupported INPUTFORMAT knob";
}

fetch_to_file ($whc, $ENV{KNOB_MAQ_DEB}, "maq.deb");
system ("dpkg --extract maq.deb .")
    == 0 or die "dpkg exited $?";

if ($ENV{MR_LEVEL} == 1)
{
  my $instream = new Warehouse::Stream (whc => $whc, subdir => ". $ENV{MR_INPUT}\n");

  my $base;
  $instream->rewind;
  while (my ($pos, $size, $filename) = $instream->file_next)
  {
    last if !defined $pos;
    if (!defined $base) { $base = $filename; $base =~ s/\.fastq(\.gz)?$//; }
    else
    {
      substr ($filename, length $base) = "" if length $filename > length $base;
      substr ($base, length $filename) = "" if length $filename < length $base;
      while ($base ne $filename || $base =~ /[-_\.]$/)
      {
	substr ($base, -1) = "";
	substr ($filename, -1) = "";
      }
    }
  }

  $instream->rewind;
  while (my ($pos, $size, $filename) = $instream->file_next)
  {
    last if !defined $pos;
    $filename =~ s/\.gz$//;
    $instream->seek ($pos);
    open PIPE, "|-", "bash -c 'set -o pipefail; $formatfilter | ./usr/bin/maq fastq2bfq -n 2000000 - out/$filename'";
    while (my $dataref = $instream->read_until ($pos + $size))
    {
      print PIPE $$dataref;
    }
    close PIPE or die "close(PIPE): exit status $?, $!";
  }
  opendir D, "out" or die "opendir: $!";
  for my $f (readdir D)
  {
    if ($f =~ /^(.*)\@(\d+)\.bfq/)
    {
      mkdir "out/$base\@$2";
      rename "out/$f", "out/$base\@$2/$f" or die "rename out/$f out/$base\@$2/$f: $!";
    }
  }
  my ($key) = `whput out/` =~ /([0-9a-f]{32}\S*)/s;
  my $outref = $whc->fetch_block_ref ($key) or die $whc->errstr;
  $$outref =~ s{^\. *\n}{}s;	# whput prints empty directories
  print STDERR "+++mrout $$outref+++\n";
  exit 0;
}

system ("bash -c 'set -o pipefail; $whget_command | $formatfilter | ./usr/bin/maq fastq2bfq -n 2000000 - out/fastq'")
    == 0 or die "whget|zcat|all2std.pl|maq pipeline exited $?";
opendir D, "out" or die "opendir: $!";
while (my $f = readdir D)
{
  if ($f =~ /^fastq\@(\d+)\.bfq/)
  {
    mkdir "out/$1" or die "mkdir out/$1: $!";
    rename "out/$f", "out/$1/$f" or die "rename out/$f out/$1/$f: $!";
  }
}
my $key = `whput out/`;
$key =~ s/^(.*? |)([0-9a-f]{32}\S*).*/$2/s
    or die "whput did not provide a manifest key";
print STDERR "+++mrout $key+++\n";
exit 0;

sub fetch_to_file
{
  my ($whc, $hash, $filename) = @_;
  my $dataref = $whc->fetch_block_ref ($hash) or die "fetch $hash: ".$whc->errstr;
  open F, ">", $filename or die "open $filename: $!";
  print F $$dataref or die "write $filename: $!";
  close F or die "close $filename: $!";
  return 1;
}
