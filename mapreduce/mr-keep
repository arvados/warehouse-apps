#!/usr/bin/perl
# -*- mode: perl; perl-indent-level: 2; -*-

###MR_DESCRIPTION:copy data to long term storage
###MR_INPUT:manifest
###MR_KNOBS:KEEP=2

use strict; 
use Warehouse;
use Warehouse::Manifest;
use Warehouse::Stream;

my $nnodes = $ENV{KNOB_KEEP} || 2;
my $whc = new Warehouse;

if ($ENV{MR_LEVEL} == 0)
{
  my $manifest = new Warehouse::Manifest (whc => $whc,
					  key => $ENV{MR_INPUT0});
  $manifest->rewind;
  while (my $stream = $manifest->subdir_next)
  {
    my $step = $stream->as_string;
    chomp $step;
    print STDERR "+++mrjobstep 1 $step+++\n";
  }
}

elsif ($ENV{MR_LEVEL} == 1)
{
  my $subdir = $ENV{MR_INPUT};

  my ($name, @hash) = split (/ /, $subdir);
  foreach (@hash)
  {
    last if /^\d+:/;
    if (/\+K([0-9a-f]{2})\@(\w+)/ && $2 eq $whc->{warehouse_name})
    {
      # already stored in Keep -- try to fetch required number of copies
      if ($whc->fetch_from_keep ($_, { nnodes => $nnodes }))
      {
	next;
      }
    }
    my $keephash = $whc->store_in_keep (hash => $_,
					nnodes => $nnodes)
	or die "store_in_keep ($_) failed: ".$whc->errstr;
    $_ = $keephash;
  }
  my $fragkey = $whc->store_block ("$name @hash\n")
      or die "store_block failed: ".$whc->errstr;
  print STDERR "+++mrout ".$fragkey."+++\n";
  print STDERR $whc->iostats;
}
