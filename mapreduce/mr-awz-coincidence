#!/usr/bin/perl
# -*- mode: perl; perl-indent-level: 2; -*-

###MR_DESCRIPTION:visit all subdirectories and place samples from files ending in .txt 
###MR_INPUT:manifest
###MR_KNOBS:PREFIXBITS=0
###MR_KNOBS:SUFFIXBITS=32

use strict; 
use Warehouse;
use Warehouse::Manifest;
use Warehouse::Stream;
use IO::Uncompress::Gunzip qw(gunzip $GunzipError);
use Digest::SHA qw(sha512);

my @numeric2_bp = ( 'a', 'c', 'g', 't'); 

my $manifestkey = $ENV{MR_INPUT0};

if ($ENV{MR_LEVEL} == 0) {
  $ENV{MR_INPUT} = $manifestkey; 
  for(0..(2**$ENV{KNOB_PREFIXBITS})-1) 
  { 
    print STDERR "+++mrjobstep 1 $_+++\n"; 
  }
  print STDERR "+++mrout d41d8cd98f00b204e9800998ecf8427e+++\n";
  exit 0;
}
elsif ($ENV{MR_LEVEL} == 1) {
  my $whc = new Warehouse
      (memcached_size_threshold => $ENV{KNOB_MEMCACHED_SIZE});
  
  my $manifest = new Warehouse::Manifest (whc => $whc,
					  key => $manifestkey);
  
  
  my $outstream = new Warehouse::Stream (whc => $whc);
  my $name = "./".$ENV{MR_INPUT}; 
  $outstream->name ($name);
  $outstream->clear;
  $outstream->write_start ("foo.txt"); 

  my $filename; 
  
  my $suffixmask = 2**$ENV{KNOB_SUFFIXBITS}-1; 

  my $big_vector; 
  vec ($big_vector, 2**32, 4);
 
  while (my $instream = $manifest->subdir_next) {    
    while (my ($pos, $size, $filename) = $instream->file_next) {
      last if !defined $pos; 
      $instream->seek ($pos); 
      my $readsblob; 
      my @reads; 
      if ($filename =~ m/\.bin$/){
	while (my $dataref = $instream->read_until ($pos + $size)) {
	  $readsblob .= $$dataref; 
	} 	
      }
      else {
	next; 
      }
      @reads = unpack "I*", $readsblob;  
      
      for (my $i = 0; $i < @reads; $i+=3) {
	if (vec ($big_vector, $reads[$i], 4) < 16) {
	  vec ($big_vector, $reads[$i], 4)++; 
	}
   	if (vec ($big_vector, $reads[$i+1], 4) < 16) {
	  vec ($big_vector, $reads[$i+1], 4)++; 
	}
      } 
    }
  }  
  for (my $i = 0; $i < 2**32; $i++) {
    $outstream->write_data(pack "C", vec($big_vector, $i, 4));
  }
  $outstream->write_finish; 
  
  my $fragkey = $whc->store_block ($outstream->as_string)
      or die "store_block failed: ".$whc->errstr;
  print STDERR "+++mrout ".$fragkey."+++\n";
  print STDERR $whc->iostats;
  
  exit 0;  
}

sub revc {
  my ($bp) = @_; 
 
  $bp =~ tr/acgtACGT/tgcaTGCA/;
  return reverse $bp; 
}
