#!/usr/bin/perl

# run genome_analyzer

# KNOB_DATA_TARBALL => warehouse locator for ref/gene data
# KNOB_GETEV_JSON => warehouse locator for get-evidence snapshot
# KNOB_GET_VERSION => git commit id in get-evidence repository
# KNOB_GIT_REPO => git://git.clinicalfuture.com/get-evidence.git

use Safeget;
use Safepipe;
use Warehouse;
use Warehouse::Manifest;
use Warehouse::Stream;
use Fcntl ':flock';

chdir ($ENV{MR_JOBSTEP_TMP})
    or die "chdir $ENV{MR_JOBSTEP_TMP}: $!";

# Set up get-evidence source tree
my $get_dir = $ENV{MR_JOB_TMP}."/get-evidence";
Safeget::git ($ENV{KNOB_GIT_REPO},
	      $get_dir,
	      $ENV{KNOB_GET_VERSION});
symlink "config.default.py", "$get_dir/server/config.py";
if (open (L, "+>>", "$get_dir.lock") &&
    flock (L, LOCK_EX) &&
    !-l "$get_dir/.build_done") {
    system ("cd '$get_dir/server' && python setup.py build_ext --inplace") == 0
	or die "python setup.py build_ext --inplace failed: $?";
    symlink ".", "$get_dir/.build_done";
}
close L;
$ENV{PYTHONPATH} = "$get_dir/server";

# set up reference data dir
my $data_dir = $ENV{MR_JOB_TMP}."/data";

my $whc = new Warehouse;
my $m = new Warehouse::Manifest (whc => $whc,
				 key => $ENV{MR_INPUT0});
my $dirindex = -1;
$m->rewind;
while (my $s = $m->subdir_next)
{
    ++$dirindex;
    my $outdir = $s->name;
    my $indir = $s->name;
    $indir .= '/';
    $indir =~ s{^\./}{};
    my $fileindex = -1;
    while (my ($pos, $size, $filename) = $s->file_next)
    {
	++$fileindex;
	last if !defined $pos;

	# If this is level 0 (i.e., job step 0) then just queue up one
	# step for each file in the input.
	if ($ENV{MR_LEVEL} == 0) {
	    if ($filename !~ /\.json$/ && $filename ne 'log') {
		print STDERR "+++mrjobstep 1 $dirindex $fileindex+++\n";
	    }
	    next;
	}

	# If this isn't the file we're supposed to be working on in
	# this job step, just move along.
	if ($ENV{MR_INPUT} ne "$dirindex $fileindex") {
	    next;
	}

	# Finally we're on level 1 (really doing the work) and this is
	# the file we're supposed to be working on.

	# Store the processed data in a subdir named ./{dir}/{filename_base}
	my $subdir = $s->name;
	my $rename_subdir = 0;
	if ($filename !~ /^ns.gff(.gz)?$/ ||
	    $subdir !~ /^[0-9a-f]{40}/) {
	    # doesn't look like the result of a previous get-evidence
	    # run, so we'll try our best to come up with a unique
	    # subdir name -- for now just based on the input subdir +
	    # filename, in case we can't get a sha1 of the source file
	    # (see below).
	    $subdir .= '/' . $filename ;
	    $subdir =~ s{(\.(gff|gz|bz2))*$}{}i;
	    $rename_subdir = 1;
	}

	# Make a temporary copy of the input file, just called "input"
	# but with the original filename extensions ("input.{exts}")
	$filename =~ /(\.[^\/]*)$/;
	$filename = "input$1";
	open GFF, ">", "$filename" or die "open $filename: $!";
	$s->seek($pos);
	while (my $dataref = $s->read_until ($pos + $size)) {
	    print GFF $$dataref or die "write $filename: $!";
	}
	close GFF or die "close $filename: $!";

	if ($rename_subdir) {
	    my ($shasum) = `sha1sum $filename` =~ /^([0-9a-f]+)/;
	    if ($shasum) {
		$subdir = "./$shasum-out";
	    }
	}

	Safeget::wh_tarball_extract ($ENV{KNOB_DATA_TARBALL}, $data_dir);
	Safeget::wh_file ($ENV{KNOB_GETEV_JSON}, "$data_dir/getev-latest.json.gz");
	$ENV{CORE} = "$get_dir/server";
	$ENV{DATA} = $data_dir;
	system ("$get_dir/server/genome_analyzer.py", "-g", "./$filename") == 0
	    or die "genome_analyzer failed: exit $?";

	Safepipe::readfrom ('main::IN',
			    "whput -r --as-stream --use-subdir='$subdir' ./.-out/",
			    'mrs-output')
	    or die "pipe failed: $!";
	close IN or die "pipe failed: $!";
	exit 0;
    }
}

if ($ENV{MR_LEVEL} == 0) {
    print STDERR "+++mrout d41d8cd98f00b204e9800998ecf8427e+++\n";
    exit 0;
}

die "never found specified index ($ENV{MR_INPUT})";
