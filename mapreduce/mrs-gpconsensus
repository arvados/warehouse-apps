#!/usr/bin/perl

my @call;
my $lastid;
while(<>)
{
    my @in = split /\t/;
    if ("$in[0].$in[3]" ne $lastid)
    {
	flush();
	$lastid = "$in[0].$in[3]";
    }
    push @buf, \@in;
}
flush();

sub flush
{
    return if !@buf;

    my @out = @{$buf[0]}[0,3,4];

    # sort by quality
    @buf = sort { $a->[7] <=> $b->[7] } @buf;

    # skip lowest quality
    shift @buf;

    # sum quality for each call base
    my $call;
    my @baseq;
    for (@buf)
    {
	my $binbase = fasta2bin($_->[4]);
	$baseq[$binbase] += $_->[7];
	$call |= $binbase;
    }

    push @out, bin2fasta($call);

    for (1,2,4,8)
    {
	push @out, 0+$baseq[$_];
    }

    print (join ("\t", @out), "\n");
    @buf = ();
}

sub fasta2bin
{
    my $x = shift;
    $x =~ tr/a-z/A-Z/;
    $x =~ tr/XACMGRSVTWYHKDBN/0123456789abcdef/;
    $x = hex($x);
    while ($x & ~0xf)
    {
	$x = ($x & 0xf) | ($x >> 4);
    }
    return $x;
}

sub bin2fasta
{
    my $x = sprintf ("%x", shift);
    $x =~ tr/0123456789abcdef/XACMGRSVTWYHKDBN/;
    return $x;
}
