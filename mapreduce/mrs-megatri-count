#!/usr/bin/perl
# -*- mode: perl; perl-indent-level: 2; -*-

my ($nmin, $nmax) = split (/-/, $ENV{KNOB_N});
$nmax ||= $nmin;

my ($mmin, $mmax) = split (/-/, $ENV{KNOB_M});
$mmax ||= $mmin;

open MEGABLAST, "<&STDIN";
close STDIN;

my $npipes = 0;
for my $m ($mmin..$mmax)
{
  for my $n ($nmin..$nmax)
  {
    pipe STDIN, "pipe$npipes" or die "pipe failed: $!";
    my $child = fork();
    die "fork failed: $!" if !defined $child;
    if (!$child)
    {
      close "pipe$npipes";
      open (MEGATRI, "-|", "$ENV{MR_REVISION_INSTALLDIR}/src/apps/awz/megatri.pl", "-n", $n, "-m", $m, @megatri_options)
	  or die "open pipe megatri: $!";
      close STDIN;

      my %mismatch;
      my %freq; 
      my $examples = "";
      while (<MEGATRI>)
      {
	my $used_as_example = 0;
	while (/(\S+)\}(\S+)/g)
	{
	  my ($xxx, $yyy) = ($1, $2);
	  $freq{$xxx."}".$yyy}++; 
	  my $x = substr $xxx, $m, 1;
	  my $y = substr $yyy, $m, 1;
	  if (++$mismatch{$x.$y} <= $ENV{KNOB_EXAMPLES}
	      || $ENV{KNOB_EXAMPLES} eq "all")
	  {
	    if (!$used_as_example)
	    {
	      $examples .= "#example: m=$m n=$n $x$y ".$_;
	      $used_as_example = 1;
	    }
	  }
	}
	$summary = $1 if /^\#summary: (\S+=\d* .*)/;
      }
      print STDERR map { "m=$m n=$n $_=$mismatch{$_}\n" } keys %mismatch
	  if $ENV{KNOB_DEBUG};
      close MEGATRI or die "close MEGATRI: exit=$? error=$!";
      print map { "m=$m n=$n $_=$mismatch{$_}\n" } keys %mismatch;
      print "#summary: m=$m n=$n $summary\n";
      while ( my ($key, $value) = each(%freq) ) { 
	print "#freq $key $value \n"; 
      }
      print $examples;
      exit 0;
    }
    close STDIN;
    ++$npipes;
  }
}
close STDOUT;

while(<MEGABLAST>)
{
  for (my $p=0; $p<$npipes; $p++)
  {
    print { "pipe$p" } $_;
  }
}
close MEGABLAST;

for (my $p=0; $p<$npipes; $p++)
{
  close "pipe$p";
}

while (wait() > 0) { }

exit 0;
