#!/usr/bin/perl

my %out_1;
my %out_2;

my $pair_select = 0 + $ENV{PAIR_SELECT};

while (<>)
{
    my @F = split;
    my $out;
    if ($ENV{KNOB_COLORSPACE}) {
	my ($csread, $csqual);
	for (@F[10..$#F]) {
	    if (/CS:Z:(.*)/) { $csread = $1; }
	    elsif (/CQ:Z:(.*)/) { $csqual = $1; }
	    last if defined $csread && defined $csqual;
	}
	next if !defined $csread || !defined $csqual;
	$csread =~ tr/0123/ACGT/;
	$csread =~ s/[^ACGT]/N/g;
	$csread =~ s/^.//;
	$out = "\@$F[0]\n$csread\n+\n$csqual\n";
    } else {
	$out = "\@F=$F[1]:$F[0]\n$F[9]\n+\n$F[10]\n";
    }
    if ($ENV{PAIR_SELECT} ne '*' &&
	($F[1] & 1)) {
	next if $pair_select == 0;
	if ($F[1] & 0x40) {	# first in pair
	    if (exists $out_2{$F[0]}) {
		print $out if $pair_select == 1;
		print $out_2{$F[0]} if $pair_select == 2;
		delete $out_2{$F[0]};
	    } else {
		$out_1{$F[0]} = $out;
	    }
	} elsif ($F[1] & 0x80) { # second in pair
	    if (exists $out_1{$F[0]}) {
		print $out_1{$F[0]} if $pair_select == 1;
		print $out if $pair_select == 2;
		delete $out_1{$F[0]};
	    } else {
		$out_2{$F[0]} = $out;
	    }
	} else {		# part of an unordered pair
	    if (exists $out_1{$F[0]}) {
		print $out_1{$F[0]} if $pair_select == 1;
		print $out if $pair_select == 2;
		delete $out_1{$F[0]};
	    } else {
		$out_1{$F[0]} = $out;
	    }
	}
    } else {
	print $out if $pair_select == 0;
    }
}

if (%out_1 + %out_2) {
    warn sprintf ("giving up on %d _1 orphans and %d _2 orphans",
		  scalar (keys %out_1),
		  scalar (keys %out_2));
}
