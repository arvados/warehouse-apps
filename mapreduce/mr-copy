#!/usr/bin/perl
# -*- mode: perl; perl-indent-level: 2; -*-

###MR_DESCRIPTION:write a new manifest of exactly the same data
###MR_INPUT:manifest
###MR_KNOB:#SOURCE_MOGILEFS_TRACKERS=host:port
###MR_KNOB:#SOURCE_WAREHOUSE_CONTROLLERS=host:port

use strict; 
use Image::Magick;
use Warehouse;
use Warehouse::Manifest;
use Warehouse::Stream;

my $manifestkey = $ENV{MR_INPUT0};

if ($ENV{MR_LEVEL} == 0)
{
  $ENV{MR_INPUT} = $manifestkey;
  do "mrtask-queuesubdirs" or die "mrtask-queuesubdirs failed: $! $@";
}

elsif ($ENV{MR_LEVEL} == 1)
{
  my $wantsubdir = $ENV{MR_INPUT};
  my $whc_dest = new Warehouse;
  my $whc_source
      = ($ENV{KNOB_SOURCE_MOGILEFS_TRACKERS} ||
	 $ENV{KNOB_SOURCE_WAREHOUSE_CONTROLLERS})
      ? new Warehouse
      ("mogilefs_trackers" => $ENV{KNOB_SOURCE_MOGILEFS_TRACKERS},
       "warehouse_controllers" => $ENV{KNOB_SOURCE_WAREHOUSE_CONTROLLERS})
      : $whc_dest;

  my $manifest = new Warehouse::Manifest (whc => $whc_source,
					  key => $manifestkey);
  $manifest->rewind;
  while (my $instream = $manifest->subdir_next)
  {
    if ($instream->name eq $wantsubdir)
    {
      my $outstream = new Warehouse::Stream (whc => $whc_dest);
      $outstream->name ($instream->name);
      $outstream->clear;

      while (my ($pos, $size, $filename) = $instream->file_next)
      {
	last if !defined $pos;

	$instream->seek ($pos);
	$outstream->write_start ($filename);
	while (my $dataref = $instream->read_until ($pos + $size))
	{
	  $outstream->write_data ($dataref);
	}
	$outstream->write_finish;
      }
      my $fragkey = $whc_dest->store_block ($outstream->as_string)
	  or die "store_block failed: ".$whc_dest->errstr;
      print STDERR "+++mrout ".$fragkey."+++\n";
      print STDERR $whc_source->iostats;
      print STDERR $whc_dest->iostats if $whc_source ne $whc_dest;
      exit 0;
    }
  }
  die "Subdir not found: $wantsubdir";
}
