#!/usr/bin/perl
# -*- mode: perl; perl-indent-level: 2; -*-

###MR_DESCRIPTION:run MAQ against reference
###MR_INPUT:manifest
###MR_KNOBS:REFERENCE=99259f4330907e84fe7253bd4e52dd3e
###MR_KNOBS:REFERENCEFILE=homo_sapiens.bfa

use strict; 
use Warehouse;
use Warehouse::Manifest;
use Warehouse::Stream;
use Safepipe;
use Fcntl ':flock';


my $tmp = $ENV{MR_JOB_TMP};

my $src = "$ENV{MR_REVISION_INSTALLDIR}";
my $traces_manifest_key = $ENV{MR_INPUT0} or die;
my $reference_manifest_key = $ENV{KNOB_REFERENCE} or die;
my $reference_manifest_file = $ENV{KNOB_REFERENCEFILE} or die;
#my $batchsize = 1_000_000;
my $batchsize = 2_200_000;
my $max_mismatches = $ENV{KNOB_MAX_MISMATCHES};
$max_mismatches = 2 unless defined $max_mismatches;
my $reffile = "$tmp/$reference_manifest_file";
my $MAQ_bin_key = '71d95666f636d7f250664cd733b2f9ef';

my $MAQ_path="$tmp/maq";

my $whc = new Warehouse;

if ($ENV{MR_LEVEL} == 0)
{
  # queue a level 1 jobstep for each file in the input manifest

  my $ref = new Warehouse::Manifest (whc => $whc,
				     key => $traces_manifest_key);
  while (my $s = $ref->subdir_next)
  {
    my $subdir = $s->name;
    $subdir =~ s/^\.\///;
    while (my ($pos, $size, $filename) = $s->file_next)
    {
      last if !defined $pos;
      next if $filename !~ /(.*)_1.bfq$/;
      $filename = $1;
      print STDERR "+++mrjobstep 1 $subdir $filename+++\n";
    }
  }
  print STDERR "+++mrout d41d8cd98f00b204e9800998ecf8427e+++\n";
  exit 0;
}
if ($ENV{MR_LEVEL} == 1)
{
  my ($subdir, $filename) = split (/ /, $ENV{MR_INPUT}, 2);

  atomic_whget("$reference_manifest_key/$reference_manifest_file", $reffile);
  atomic_whget($MAQ_bin_key, $MAQ_path);
  chmod 0755, $MAQ_path;

  my $readfile1 = "$tmp/${filename}_1.bfq";
  my $readfile2 = "$tmp/${filename}_2.bfq";
  atomic_whget("$traces_manifest_key/$subdir/${filename}_1.bfq", $readfile1);
  atomic_whget("$traces_manifest_key/$subdir/${filename}_2.bfq", $readfile2);

  my $count = `$src/apps/miron/bfq-split.pl $batchsize '$readfile1'` 
	or die;

  for (my $ind = 0 ; $ind < $count ; $ind++) {
	print STDERR "+++mrjobstep 2 $subdir $filename $ind+++\n";
  }
  
  print STDERR "+++mrout d41d8cd98f00b204e9800998ecf8427e+++\n";
  exit 0;
}
if ($ENV{MR_LEVEL} == 2)
{
  my ($subdir, $filename, $ind) = split (/ /, $ENV{MR_INPUT}, 3);

  my $readfile1 = "$tmp/${filename}_1.bfq";
  my $readfile2 = "$tmp/${filename}_2.bfq";

  my $batchfile1 = "$tmp/${filename}c${ind}_1.bfq";
  my $batchfile2 = "$tmp/${filename}c${ind}_2.bfq";

  atomic_whget("$traces_manifest_key/$subdir/${filename}_1.bfq", $readfile1);
  atomic_whget("$traces_manifest_key/$subdir/${filename}_2.bfq", $readfile2);

  system("$src/apps/miron/bfq-split.pl $batchsize $readfile1 $ind '$batchfile1'") == 0 or die "could not create $batchfile1";
  system("$src/apps/miron/bfq-split.pl $batchsize $readfile2 $ind '$batchfile2'") == 0 or die "could not create $batchfile2";

  Safepipe::readfrom
      ("main::MAQ",
       "$MAQ_path map -n $max_mismatches -m 0.001 -a 250 - '$reffile' '$batchfile1' '$batchfile2'",
       "mrs-store './$subdir' '$filename.map'",
       "mrs-output",
      )
      or die "pipe failed: $!";
  close MAQ or die "Pipe failed: $!";
  unlink $batchfile1;
  unlink $batchfile2;
  exit 0;
}

sub atomic_whget {
  my ($source, $target) = @_;

  if (open (L, "+>>", "$target.lock") &&
      flock (L, LOCK_EX) &&
      !-e ($target))
  {
    if (0 != system "whget '$source' '$target.tmp'")
    {
      system "rm -rf '$target.tmp'";
      close L;
      die "whget exited $?";
    }
    rename "$target.tmp", $target;
    system "rm -rf '$target.tmp'";
  }
  close L;
  die "Failed to whget $source -> $target" if !-e $target;
}
