#!/usr/bin/perl
# -*- mode: perl; perl-indent-level: 2; -*-

###MR_DESCRIPTION:visit all subdirectories and personalize files ending in .fa (gunzip first for .fa.gz)
###MR_INPUT:manifest
###MR_KNOBS:INDIVIDUALS=3
###MR_KNOBS:PLOIDY=2 
###MR_KNOBS:SNPBITS=11
###MR_KNOBS:SEED=12345

use strict; 
use Warehouse;
use Warehouse::Manifest;
use Warehouse::Stream;
use IO::Uncompress::Gunzip qw(gunzip $GunzipError);
use Digest::SHA qw(sha512);

my $manifestkey = $ENV{MR_INPUT0};

if ($ENV{MR_LEVEL} == 0)
{
  $ENV{MR_INPUT} = $manifestkey; 
  for(0..($ENV{KNOB_INDIVIDUALS}*$ENV{KNOB_PLOIDY})-1) 
  { 
    print STDERR "+++mrjobstep 1 $_+++\n"; 
  }
  print STDERR "+++mrout d41d8cd98f00b204e9800998ecf8427e+++\n";
  exit 0;
}
elsif ($ENV{MR_LEVEL} == 1)
{
  my $whc = new Warehouse
      (memcached_size_threshold => $ENV{KNOB_MEMCACHED_SIZE});
  
  my $manifest = new Warehouse::Manifest (whc => $whc,
					  key => $manifestkey);

  my $outstream = new Warehouse::Stream (whc => $whc);

  my $individual = int($ENV{MR_INPUT}/$ENV{KNOB_PLOIDY});
  my $ploidy = $ENV{MR_INPUT}%$ENV{KNOB_PLOIDY};
 
  my $name = "./$individual.$ploidy"; 
  $outstream->name ($name);
  $outstream->clear;

  my $total = 0; 

  #setup global variables for "awzprng" 
  $main::awzprngseed = $ENV{KNOB_SEED}.$name;
  $main::awzprngbits = 0; 
  $main::awzprngblocks = 0; 
  print STDERR "AWZPRNGSEED = $main::awzprngseed\n";
		  
  while (my $instream = $manifest->subdir_next)
  {
    while (my ($pos, $size, $filename) = $instream->file_next)
    {
      last if !defined $pos; 
      $instream->seek ($pos); 
      my $reference;
      if ($filename =~ m/hap|rand/) {
	#this clause should be controlled by a knob 
	print STDERR "ignoring $filename\n"; 
	next; 
      }
      elsif ($filename =~ s/\.fa\.g?z$//i){
	my $zblob = ""; 
	while (my $dataref = $instream->read_until ($pos + $size))
	{
	  $zblob .= $$dataref; 
	}
	gunzip \$zblob => \$reference or die $GunzipError;	
      }
      elsif ($filename =~ s/\.fa//i) {
	while (my $dataref = $instream->read_until ($pos + $size)) {
	  $reference .= $$dataref; 
	}
      }
      else {
	next; 
      }        
      my $count = 0; 
      $reference =~ s/^>.*\n//;
      $reference =~ s/\n//g;
      $reference = lc ($reference); 
      $reference =~ s/([acgt]{1})([^acgt]+)/$1 x (1 + length($2))/ge;
      $reference =~ s/^([^acgt]+)([acgt]{1})/$2 x (1 + length($1))/e;
      
      my @bp_array = ("a", "c", "g", "t"); 
      my $i = awzprng($ENV{KNOB_SNPBITS}); 
      while ($i < length ($reference)) {
	my $ref = substr ($reference, $i, 1);   
	my $snp = $bp_array[awzprng(2)];
	if ($ref ne $snp) {
	  substr($reference, $i, 1) = uc ($snp); 
	  $count++; 
	  $total++; 
	}
	$i+= (awzprng($ENV{KNOB_SNPBITS})+1);
      }	
      print STDERR "inserted $count SNPs into $name/$filename\n";

      my $ind = $individual ? "$individual:" : ""; 
      my $pl = $ploidy ? ":$ploidy" : ""; 
      $outstream->write_start ("$ind$filename$pl.fa"); 
      $outstream->write_data ($reference); 
      $outstream->write_finish; 
    }     
  }
  #report total SNPs 
  print STDERR "inserted $total SNPs into $name in total\n";
 
  #report randomness consumed 
  print STDERR "used AWZPRNGBLOCKS = $main::awzprngblocks\n";
 
  my $fragkey = $whc->store_block ($outstream->as_string)
      or die "store_block failed: ".$whc->errstr;
  print STDERR "+++mrout ".$fragkey."+++\n";
  print STDERR $whc->iostats;
 
  exit 0;  
}

sub awzprng {
   my ($bits) = @_;  
   if ( $main::awzprngbits < $bits) {     
     $main::awzprngseed = sha512($main::awzprngseed); 
     $main::awzprngbits = 512; 
     $main::awzprngblocks++; 
    }
   my $rand = vec($main::awzprngseed,512-$main::awzprngbits--,1);
   for (my $i = 1; $i < $bits; $i++) { 
     $rand = $rand<<1|vec($main::awzprngseed,512-$main::awzprngbits--,1);
   }
   return $rand; 
}


