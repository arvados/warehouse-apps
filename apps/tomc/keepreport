#!/usr/bin/perl

use Warehouse;
use Warehouse::Manifest;
use Warehouse::Stream;
use Digest::MD5 qw(md5_hex);
use LWP::UserAgent;
use HTTP::Request::Common;

my $whc = new Warehouse;
$whc->_hash_keeps();
my $ua = new LWP::UserAgent;

my %stats;

print STDERR "Scanning manifests: ";
my %expect;
my %sawmanifestmd5;
my %md5size;
my @manifest = $whc->list_manifests;
foreach (@manifest)
{
    my ($key, $name) = @$_;
    if ($key =~ /\+K([0-9a-f]{2})/)
    {
	print STDERR ".";
	next if $key !~ /^([0-9a-f]{32})\b/;
	++$stats{manifestnames};
	next if 1 != ++$sawmanifestmd5{$1};
	++$stats{manifests};

	my $m = new Warehouse::Manifest (whc => $whc, key => $key);
	$m->rewind;
	while (my $s = $m->subdir_next)
	{
	    my $ss = $s->as_string;
	    while ($ss =~ / ([0-9a-f]{32}\S*\+K\S+)/gs)
	    {
		my $hash = $1;
		my $expect = expecthowmany ($hash);
		$hash =~ s/\+[^\d\+][^\+]*//g;
		$expect{$hash} = $expect if $expect{$hash} < $expect;
		if ($hash =~ /^(.*)\+(\d+)$/)
		{
		    $md5size{$1} = $2;
		}
	    }
	}
	foreach (split (",", $key))
	{
	    my $expect = expecthowmany ($_);
	    $expect{$_} = $expect if $expect{$_} < $expect;
	}
    }
}
$stats{blocksexpected} = scalar keys %expect;
print STDERR "\n";


print STDERR "Getting indices: ";
my %got_on_host;
my %got;
foreach my $keep_server (@{$whc->{keeps}})
{
    $got_on_host{$keep_server} = {};
    $keep_server =~ s/:(\d+)$/":".($1+1)/e;
    my $url = "http://".$keep_server."/index";
    my $req = HTTP::Request->new (GET => $url);
    my $r = $ua->request ($req);
    die "$url failed: ".$r->status_line unless $r->is_success;
    my $index = $r->content;
    while ($index =~ /(.*?)\n/gs)
    {
	my $hash = $1;
	$hash =~ s/ .*//;
	next if $hash !~ /\+/;
	++$got_on_host{$keep_server}->{$hash};
	++$got{$hash};
    }
    print STDERR ".";
}
print STDERR "\n";

foreach (keys %got)
{
    /^([^\+]+).*\+(\d+)/ or die "$_ has no size hint";

    if (exists $md5size{$1} && $md5size{$1} != $2)
    { warn "Size mismatch: Keep has $1+$2, expected ".$md5size{$1}." bytes\n" }
    else
    {
	$gotmd5{$1} += $got{$_};
	$md5size{$1} = $2;
    }

    $stats{bytes} += $2;
    $stats{blocks} ++;
    $stats{diskbytes} += $2 * $got{$_};
    $stats{diskblocks} += $got{$_};
}

my %expectmd5;
map { $expectmd5{$1} = $expect{$_} if /^([0-9a-f]+)/ && $expectmd5{$1}<$expect{$_} } keys %expect;
delete $expectmd5{"d41d8cd98f00b204e9800998ecf8427e"};

my %gotmd5;
map { $gotmd5{$1} += $got{$_} if /^([0-9a-f]+)/ } keys %got;
delete $gotmd5{"d41d8cd98f00b204e9800998ecf8427e"};

foreach (sort keys %expectmd5)
{
    my $got = $gotmd5{$_} + 0;
    my $md5size = $md5size{$_};
    my $expectmd5 = $expectmd5{$_};
    if (!$got)
    {
	$stats{blocksmissing}++;
    }
    elsif ($got > $expectmd5)
    {
	$stats{blockstoomany}++;
	$stats{bytestoomany} += ($got - $expectmd5) * $md5size;
    }
    elsif ($got < $expectmd5)
    {
	$stats{blockstoofew}++;
    }

    my $nfound = 0;
    my $nwouldfind = 0;
    my ($keeps, @bucket) = $whc->_hash_keeps (undef, $_);
    foreach my $bucket (@bucket)
    {
	my $keep_server = $keeps->[$bucket];
	if ($got_on_host{$keep_server}->{$_."+".$md5size})
	{
	    ++$nfound;
	    if ($nfound > $expectmd5)
	    {
		print "$keep_server DELETE $_\n";
		$stats{bytestoomanycheck} += $md5size;
	    }
	    elsif ($got > $expectmd5)
	    {
		print "$keep_server VERIFY $_\n";
	    }
	}
	elsif ($nfound + $nwouldfind < $expectmd5)
	{
	    ++$nwouldfind;
	    print "$keep_server KEEP $_+$md5size probe=$nwouldfind got=$got\n";
	}
    }
    $stats{"bytesexpected$expectmd5"} += $md5size;
    $stats{"blocksexpected${expectmd5}unknownsize"} ++ if !$md5size;
}

foreach (sort keys %gotmd5)
{
    if (!$expectmd5{$_})
    {
	$stats{blocksgarbage}++;
	$stats{bytesgarbage} += $md5size{$_} * $gotmd5{$_};
	foreach my $keep_server (@{$whc->{keeps}})
	{
	    if ($got_on_host{$keep_server}->{$_."+".$md5size{$_}})
	    {
		print "$keep_server DELETE $_\n";
	    }
	}
    }
}

map { print STDERR "$_ = $stats{$_}\n" } sort keys %stats;


sub expecthowmany
{
    my $hash = shift;
    my $expect = 0;
    if ($hash =~ /\+K([0-9a-f]{2})/)
    {
	for my $bit (0..7)
	{
	    if ((hex($1) >> $bit) & 1)
	    {
		++$expect;
	    }
	}
    }
    return $expect || 1;
}
