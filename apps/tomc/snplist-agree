#!/usr/bin/perl

use strict;

my @x;
while (@ARGV && $ARGV[0] ne '--') { push @x, shift @ARGV }
shift @ARGV;
my @y = @ARGV or die "usage: $0 snplist sniplist ... -- snplist snplist ...\n";

my @xlists;
for my $xfile (@x)
{
    print "\t$xfile";
    push @xlists, readsnplist ($xfile);
}
print "\n";
for my $yfile (@y)
{
    print "$yfile";
    my $ylist_orig = readsnplist ($yfile);
    my @xscore;
    my $xhighscore;
    for my $xlist_orig (@xlists)
    {
	my $xlist = [ @$xlist_orig ];
	my $ylist = [ @$ylist_orig ];
	my $xypoints = scalar @$xlist + scalar @$ylist;
	my $points = 0;
	while (@$xlist && @$ylist)
	{
	    my $cmp = $xlist->[0]->[0] cmp $ylist->[0]->[0]
		|| $xlist->[0]->[1] <=> $ylist->[0]->[1];
	    if ($cmp < 0)
	    {
		shift @$xlist;
		--$xypoints;
	    }
	    elsif ($cmp > 0)
	    {
		shift @$ylist;
		--$xypoints;
	    }
	    else
	    {
		# same position
		if ($xlist->[0]->[3] eq
		    $ylist->[0]->[3])
		{
		    # same bp at this position
		    $points += 2;
		}
		elsif ($xlist->[0]->[3] eq "NoCall"
		       ||
		       $ylist->[0]->[3] eq "NoCall")
		{
		    $xypoints -= 2;
		}
		shift @$xlist;
		shift @$ylist;
	    }
	}
	my $score = sprintf "%.2f", 100*$points/$xypoints;
	push @xscore, $score;
	$xhighscore = $score if $xhighscore < $score;
    }
    print map { "\t".($_ > $xhighscore*.8 ? "*" : " ")."$_" } @xscore;
    print "\n";
}

sub readsnplist
{
    my $file = shift;
    open IN, "<", $file or die "$file: $!";
    my @snplist;
    while (<IN>)
    {
	chomp;
	my ($chr, $pos, $refbp, $seqbp) = split (/\t/, $_, 5);
	push @snplist, [$chr, $pos, $refbp, fasta_flatten ($seqbp)];
    }
    return [ sort { $a->[0] cmp $b->[0] || $a->[1] <=> $b->[1] } @snplist ];
}

sub fasta_flatten
{
    my $fasta = shift;
    return $fasta if $fasta eq 'NoCall';
    $fasta =~ tr/a-z/A-Z/;
    $fasta =~ tr/XACMGRSVTWYHKDBN/0123456789abcdef/;
    $fasta = hex($fasta);
    while ($fasta & ~0xf)
    {
	$fasta = ($fasta & 0xf) | ($fasta >> 4);
    }
    $fasta = sprintf ("%x", $fasta);
    $fasta =~ tr/0123456789abcdef/XACMGRSVTWYHKDBN/;
    return $fasta;
}
