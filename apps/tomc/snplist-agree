#!/usr/bin/perl

use strict;
use Getopt::Long;
use FileHandle;
use File::Temp qw/ :seekable /;
use File::Spec;
use Fcntl qw/ :seek /;

my $usage;
do { local $/ = undef; $usage = <__DATA__>; };

my $debug_enable = 0;
my $snpdig_enable = 1;
my $snpdig_base = "http://genomerator-dev.freelogy.org/pgp10factory/snpdig.cgi/";

if ($ARGV[0] =~ /^-/) {
    GetOptions ("debug" => \$debug_enable,
		"snpdig!" => \$snpdig_enable,
		"snpdig-base=s" => \$snpdig_base) or die $usage;
}

my %snplists;

my @x;
while (@ARGV && $ARGV[0] ne '--') { push @x, shift @ARGV }
shift @ARGV;
my @y = @ARGV or die $usage;

print "<TABLE>";
my @xlists;
print "<TR><TH></TH>\n";
for my $xfile (@x)
{
    printf "<TH><code>%8.8s</code></TH>\n", unique_part ($xfile, @x);
    push @xlists, &readsnplist ($xfile);
}
print ("<!--\n", (map { "x $_\n" } @x), (map { "y $_\n" } @y), "-->\n");
my @xhash = map { readlink($_) =~ /([0-9a-f]{32})/ || /([0-9a-f]{32})/ } @x;
my @yhash = map { readlink($_) =~ /([0-9a-f]{32})/ || /([0-9a-f]{32})/ } @y;
my @snpcounts;
print "</TR>\n";
for my $yfile (@y)
{
    printf "<TR><TH><CODE>%8.8s</CODE></TH>\n", unique_part ($yfile, @y);
    my $ylist_orig = &readsnplist ($yfile);
    my $yhash = shift @yhash;
    my @xscore;
    my $xhighscore = 0;
    for (my $xi=0; $xi <= $#xlists; $xi++)
    {
	my $xlist_orig = $xlists[$xi];

	printf STDERR ("%s vs. %s\n",
		       $xlist_orig->{"object_name"},
		       $ylist_orig->{"object_name"})
	    if $debug_enable;
	my $xlist = $xlist_orig->{"data"};
	my $ylist = $ylist_orig->{"data"};
	$xlist_orig->reset();
	$ylist_orig->reset();
	$xlist_orig->load1();
	$xlist_orig->load1();
	$ylist_orig->load1();
	$ylist_orig->load1();
	my $score_nocall_x = 0;
	my $score_nocall_y = 0;
	my $score_yes = 0;
	my $score_no = 0;
	while (@$xlist && @$ylist)
	{
	    my $cmp = $xlist->[0]->[0] cmp $ylist->[0]->[0]
		|| $xlist->[0]->[1] <=> $ylist->[0]->[1];
	    if ($cmp < 0)
	    {
		shift @$xlist;
		$xlist_orig->load1();
	    }
	    elsif ($cmp > 0)
	    {
		shift @$ylist;
		$ylist_orig->load1();
	    }
	    else
	    {
		# same position
		my $nocall_x = $xlist->[0]->[2] =~ /^[NX]/;
		my $nocall_y = $ylist->[0]->[2] =~ /^[NX]/;
		if ($nocall_x && !$nocall_y)
		{
		    ++$score_nocall_x;
		}
		elsif (!$nocall_x && $nocall_y)
		{
		    ++$score_nocall_y;
		}
		elsif ($nocall_x && $nocall_y)
		{
		}
		elsif ($xlist->[0]->[2] eq
		       $ylist->[0]->[2])
		{
		    ++$score_yes;
		}
		else
		{
		    ++$score_no;
		}
		shift @$xlist;
		shift @$ylist;
		$xlist_orig->load1();
		$ylist_orig->load1();
	    }
	}
	my $score = ($score_yes + $score_no)
	    ? 100*$score_yes/($score_yes+$score_no)
	    : "-";
	push @xscore, [$score, $score_yes, $score_no, $score_nocall_x, $score_nocall_y];
	$xhighscore = $score if $xhighscore < $score;
    }
    for (my $xi=0; $xi <= $#xscore; $xi++)
    {
	my $score = $xscore[$xi]->[0];
	my $star = $score > $xhighscore*.9;
	my $redness = ($score-60) * 128/40;
	$redness = 0 if $redness < 0;
	my $color = sprintf ("#ff%02x%02x",
			     255 - $redness,
			     255 - $redness);
	printf "<TD style=\"background: $color\">%.0f%s</TD>", $xscore[$xi]->[0], $star ? "*" : "";
	if ($star || ($xhighscore == 0 && $xi == 0))
	{
	    my $xhash = $xhash[$xi];
	    my $label = sprintf ("<code>%8.8s / %8.8s</code>",
				 &unique_part ($yfile, @y),
				 &unique_part ($x[$xi], @x));
	    my ($x, $yes, $no, $nocallx, $nocally) = @ { $xscore[$xi] };
	    my $yeshtml = $yes;
	    $yeshtml = qq{<a href="$snpdig_base$yhash;agree-$xhash">$yes</a>} if $snpdig_enable;
	    my $nohtml = $no;
	    $nohtml = qq{<a href="$snpdig_base$yhash;disagree-$xhash">$no</a>} if $snpdig_enable;
	    my $nocallyhtml = $nocally;
	    $nocallyhtml = qq{<a href="${snpdig_base}nocall-$yhash;call-$xhash">$nocally</a>} if $snpdig_enable;
	    push @snpcounts, qq{<TR><TH>$label</TH><TD>$yeshtml</TD><TD>$nohtml</TD><TD>$nocallyhtml</TD></TR>\n};
	    push @snpcounts, qq{<!-- $yhash $xhash $yes $no $nocally -->\n};
	}
    }
    print "</TR>\n";
}
print "</TABLE>\n";
unshift @snpcounts, qq{<TR><TD><u>high scoring pair (y/x)</u></TD><TD><u>concordant</u></TD><TD><u>discordant</u></TD><TD><u>nocall_y:call_x</u></TD></TR>\n};
print "<TABLE>", @snpcounts, "</TABLE>";

sub readsnplist
{
    my $file = shift;
    if (exists $main::snplists{$file}) {
	my $fh = new FileHandle ($main::snplists{$file}->{"tempfile"}->filename, "r");
	return  new snplist ("object_name" => $file,
			     "tempfile" => $fh);
    }

    print STDERR "Reading $file\n" if $debug_enable;
    $file =~ s/:.*//;
    if ($file =~ /^[0-9a-f]{32}/ && !-e $file)
    {
	open STDIN, "-|", "whget", "-r", $file, "-" or die "whget: $!";
	open STDIN, "-|", "gzip", "-cdf" or die "gzip: $!";
    }
    else
    {
	open STDIN, "<", $file or die "$file: $!";
    }
    my @snplist;
    while (<STDIN>)
    {
	chomp;
	my @F = split (/\t/);
	my ($chr, $pos, $seqbp);
	if ($F[3] =~ /^\d+$/ && $F[4] =~ /^\d+$/ && $F[3] == $F[4] && $F[8] =~ /alleles ([^\s;]+)/) {
	    # GFF format
	    ($chr, $pos, $seqbp) = ($F[0], $F[3], $1);
	    $seqbp =~ s:[^A-Z]::g;
	}
	elsif ($F[1] =~ /^\d+/ && $F[2] =~ /^.$/) {
	    # "snplist" format
	    ($chr, $pos, $seqbp) = @F[0,1,3];
	}
	else {
	    next;
	}
	push @snplist, [$chr, $pos, fasta2bin ($seqbp)];
    }
    close STDIN or die "input: $!";
    while (0 < wait) { }
    print STDERR "Sorting $file\n" if $debug_enable;
    my $listref = [ sort { $a->[0] cmp $b->[0] || $a->[1] <=> $b->[1] } @snplist ];
    my $tempfile = new File::Temp (TEMPLATE => 'snplist.XXXXXXXXXX',
				   SUFFIX => '.tmp',
				   DIR => File::Spec->tmpdir);
    print STDERR "Created ".$tempfile->filename."\n" if $debug_enable;
    foreach (@$listref) {
	print $tempfile (join ("\t", @$_), "\n");
    }
    $main::snplists{$file} = new snplist ("tempfile" => $tempfile,
					  "object_name" => $file);
    return $main::snplists{$file};
}

sub fasta2bin
{
    my $fasta = shift;
    return "N" if $fasta =~ /^N/;
    return "X" if $fasta eq "X";
    $fasta =~ tr/a-z/A-Z/;
    $fasta =~ tr/XACMGRSVTWYHKDBN/0123456789abcdef/;
    $fasta = hex($fasta);
    while ($fasta & ~0xf)
    {
	$fasta = ($fasta & 0xf) | ($fasta >> 4);
    }
    return $fasta;
}

sub unique_part
{
    @_ = @_;
    for (@_) { s/^.*?:(.)/$1/ || s/://; s/[\r\n]//g; }
    my $this = shift;
    my $thislen = length($this);
    my $ustart = $thislen;
    my $uend = $thislen;
    for (@_)
    {
	$ustart-- while substr ($this, 0, $ustart) ne substr ($_, 0, $ustart);
	$uend-- while $uend && substr ($this, $thislen-$uend) ne substr ($_, length($_)-$uend);
    }
    $ustart = 0 if $ustart <= 3;
    return substr ($this, $ustart, $thislen - $uend - $ustart);
}

package snplist;
use Fcntl qw/ :seek /;

sub new {
    my $class = shift;
    my $self = {@_};
    bless $self, $class;
    $self->{"data"} = [];
    return $self;
}

sub reset {
    my $self = shift;
    $self->{"tempfile"}->seek (0, SEEK_SET) or die $self->{"tempfile"} . ": " . $!;
    @{$self->{"data"}} = ();
}

sub load1 {
    my $self = shift;
    my $tempfile = $self->{"tempfile"};
    return if eof ($tempfile);
    local $_ = <$tempfile>;
    chomp;
    my @f = split /\t/;
    push @{$self->{"data"}}, \@f;
}

__DATA__

usage: snplist-agree [options --] snplist snplist ... -- snplist snplist ...
