#!/usr/bin/perl

# usage: $0 [options] < blasttable > out.txt
# options :
#  --bed         output alignments in BED format (covering probes and introns)
#  --correct     output the first alignment that matches the answer key
#  --nocorrect   output probes that did not have any A+B alignments
#  --falsealign  output other alignments
#  --minidentity=N     minimum "% identity" field (from megablast field)
#  --minmatchlength=N  minimum "match length" field (from megablast field)
#  --maxmismatch=N     maximum # mismatches (from megablast field)
#  --maxinterval=N     maximum distance between A and B (up/downstream) probes

my %opt = (
	   maxinterval => 1000,
	   maxmismatch => 25,
	   minidentity => 0,
	   minmatchlength => 1,
	   );
while (@ARGV && $ARGV[0] =~ /^--(.*?)(?:=(.*))?$/)
{
    $opt{$1} = defined($2) ? $2 : 1;
    shift @ARGV;
}

my %warned;
my %stat = (
	    alignments => 0,
	    probes => 0,
	    found => 0,
	    foundcheck => 0,
	    foundfalsealign => 0,
	    foundfalseprobe => 0,
	    );
my %probe;
my @align;

while(<>)
{
    my @allfields = split;
    next if @allfields < 11;

    my ($id_part, $chr, $pos0, $pos1) = @allfields[0,1,8,9];
    my ($querystring, $hitstring) = @allfields[12,13];
    my ($probe_id, $part)
	= $id_part =~ /^(.*?)(?:-([AB]))?$/;
    warn "no -A or -B: $probe_id\n" if !$part && !$warned{"input_$probe_id"}++;
    my ($refchr, $refpos0, $refpos1, $id) = split (/:/, $probe_id);
    $id = $probe_id if !defined $id;
    $probe{$id} ||= {};
    $probe{$id}->{align} .= $_;

    next if $allfields[2] < $opt{minidentity};
    next if $allfields[3] < $opt{minmatchlength};
    next if $allfields[4] > $opt{maxmismatch};

    push @align, [$refchr, $refpos0, $refpos1, $id, $part, $chr, $pos0, $pos1, $pos0>$pos1, $querystring, $hitstring, $., $_];
    if ($chr eq $refchr)
    {
	if ($refpos0 == $pos0) { $probe{$id}->{foundrefpos0} = 1; }
	if ($refpos1 == $pos1-1) { $probe{$id}->{foundrefpos1} = 1; }
	if ($refpos0 == $pos1) { $probe{$id}->{foundrefpos0} = 1; }
	if ($refpos1 == $pos0-1) { $probe{$id}->{foundrefpos1} = 1; }
    }
    ++$stat{alignments};
}

my @align_bypos = sort { $a->[5] cmp $b->[5] or $a->[6] <=> $b->[6] } @align;

my%foundfalseprobe;
my %sawprobe;
my $chr;
for (my $alignid=0; $alignid<=$#align_bypos; $alignid++)
{
    my $align = $align_bypos[$alignid];
    %sawprobe = (), $chr = $align->[5] if $chr ne $align->[5];
    my $id = $align->[3];
    $sawprobe{$id} ||= [];
    my $align_start = min (@{$align}[6,7]);
    while ($sawprobe{$id}->[0] &&
	   $align_start - max (@{$sawprobe{$id}->[0]}[6,7]) > $opt{maxinterval})
    {
	shift @{$sawprobe{$id}};
    }
    for my $prev (@{$sawprobe{$id}})
    {
	if ($prev->[4] ne $align->[4] &&
	    ($prev->[6] < $prev->[7]) == ($align->[6] < $align->[7]) &&
	    $align_start - max (@{$prev}[6,7]) <= $opt{maxinterval})
	{
	    if (!defined $align->[2])
	    {
		# no answer key -- assume first one found is correct
		if (defined $align->[0]
		    ? ($align->[0] eq $align->[5])
		    : !exists $foundfalseprobe{$id})
		{
		    $foundfalseprobe{$id} = 0;
		    report_correct ($prev, $align);
		}
		else
		{
		    ++$foundfalseprobe{$id};
		    ++$stat{foundfalsealign};
		    report_falsealign ($prev, $align);
		}
	    }
	    elsif ($align->[0] eq $align->[5]
		   &&
		   (($align->[1] == $prev->[7] &&
		     $align->[2] == $align->[6]-1)
		    ||
		    ($align->[1] == $prev->[6] &&
		     $align->[2] == $align->[7]-1)))
	    {
		++$stat{foundcheck};
		report_correct ($prev, $align);
	    }
	    else
	    {
		++$foundfalseprobe{$id};
		++$stat{foundfalsealign};
		report_falsealign ($prev, $align);
	    }
	}
    }
    push @{$sawprobe{$id}}, $align;
}

$stat{foundfalseprobe} = scalar grep { $_ > 0 } values %foundfalseprobe;

foreach my $id (keys %probe)
{
    if ($probe{$id}->{foundrefpos0} && $probe{$id}->{foundrefpos1})
    {
	++$stat{found};
    }
    else
    {
	print $probe{$id}->{align} if $opt{nocorrect};
    }
    ++$stat{probes};
}
warn "$stat{alignments} alignments\n";
warn "$stat{probes} probes\n";
warn "$stat{found} found\n";
warn "$stat{foundcheck} foundcheck\n";
warn "$stat{foundfalsealign} foundfalsealign\n";
warn "$stat{foundfalseprobe} foundfalseprobe\n";


sub report_falsealign
{
    return if !$opt{falsealign};
    my ($a, $b) = @_;
    my $int0 = max(@{$a}[6,7]) + 1;
    my $int1 = min(@{$b}[6,7]) - 1;
    my $int = $int1 - $int0 + 1;
    my $id = $a->[3];
    my $chr = $a->[5];
    my $pos1 = $a->[7];
    my $exact = 1;
    for my $align ($a, $b)
    {
	my $qs = $align->[9];
	my $hs = $align->[10];
	my $part = $align->[4];
	if ($part eq "A") { $exact &&= ( (split(/\t/,$align->[-1]))[7] == 25 && substr($qs, -5, 5) eq substr($hs, -5, 5) ); }
	if ($part eq "B") { $exact &&= ( (split(/\t/,$align->[-1]))[6] == 1 && substr($qs, 0, 5) eq substr($hs, 0, 5) ); }
    }
    $exact += 0;
    print "$exact\t$int\t".$a->[-1];
    print "$exact\t$int\t".$b->[-1];
}

sub report_correct
{
    my ($a, $b) = @_;
    if ($opt{correct})
    {
	print $a->[-1].$b->[-1];
    }
    if ($opt{bed})
    {
	my @pos = ($a->[6], $a->[7], $b->[6], $b->[7]);
	@pos = reverse @pos if $pos[0] > $pos[3];
	my $orig_id = $a->[3];
	$orig_id =~ s/:/_/g;
	printf ("%s\t%d\t%d\t%s:%s:%d:%d\n",
		$a->[5],
		$pos[0]-1, $pos[3], # bed-style {A,intron,B} coordinates
		$orig_id,	# original probe ID
		$a->[5], $pos[1], $pos[2]-1, # bed-style intron coordinates
		);
    }
}

sub min
{
    my $r = shift;
    for (@_) { $r = $_ if $r > $_ }
    return $r;
}
sub max
{
    my $r = shift;
    for (@_) { $r = $_ if $r < $_ }
    return $r;
}
