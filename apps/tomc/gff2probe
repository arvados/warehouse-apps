#!/usr/bin/perl

my %opt;
while ($ARGV[0] =~ /^--(\S+?)(=(.*))?$/)
{
    $opt{$1} = defined($2) ? $3 : 1;
    shift @ARGV;
}

my $gff_in = shift;
my $fasta_dir = shift;
my $context = shift || 0;

open STDIN, "<", $gff_in unless $gff_in eq "-";

my $chr = {};
while (<STDIN>)
{
    chomp;
    my @infield = split;
    my $inchr = $infield[0];
    $inchr =~ s/^chr([\dXYMT]+)$/$1/;
    if ($inchr ne $chr->{name}) { $chr = readchr($inchr); }
    my ($instart, $inend, $inname) = @infield[1,2,3];
    if (@infield > 4)		# gff/gtf
    {
	($instart, $inend) = @infield[3,4];
	$instart--;
    }
    my $start = $instart-$context;
    my $len = $inend-$instart+2*$context;
    if ($start < 0)
    {
	$len += $start;
	$start = 0;
    }
    if ($start + $len > length $chr->{data})
    {
	$len - length ($chr->{data}) - $start;
    }
    my $end = $start + $len - 1;
    my $str = substr ($chr->{data}, $start, $len);
    $str = rc($str) if $infield[6] eq '-';
    my %desc;
    while (/([\w_]+) "(.*?)"/g) { $desc{$1}=$2; }
    if (@infield > 4)
    {
	$inname = $desc{"transcript_id"}.".".$desc{"exon_number"};
    }
    my $outname;
    if ($opt{"one-based"})
    {
	$outname = $inname."=chr".$inchr."\@".($start+1)."-".$end;
    }
    else
    {
	$outname = $inname.":chr".$inchr.":".$start.":".$end.":".$infield[6];
    }
    print ">$outname\n";
    $str =~ s/(.{50})/$1\n/g;
    chomp $str;
    print $str;
    print "\n";
}

sub readchr
{
    my $chrname = shift;
    my $chr = { name => $chrname };
    if (-e "$fasta_dir/chr$chrname.fa") { open FASTA, "<", "$fasta_dir/chr$chrname.fa"; }
    elsif (-e "$fasta_dir/chr$chrname.fa.gz") { open FASTA, "-|", "zcat", "$fasta_dir/chr$chrname.fa.gz"; }
    elsif (-e "$fasta_dir/hs_ref_chr$chrname.fa.gz") { open FASTA, "-|", "zcat", "$fasta_dir/hs_ref_chr$chrname.fa.gz"; }
    elsif (-e "$fasta_dir/hs_alt_chr${chrname}_HuRef.fa.gz") { open FASTA, "-|", "zcat", "$fasta_dir/hs_alt_chr${chrname}_HuRef.fa.gz"; }
    else { die "No reference file for $chrname"; }
    local $/ = undef;
    print STDERR "Reading chr$chrname.fa ... ";
    $chr->{data} = <FASTA>;
    print STDERR "preparing ... ";
    $chr->{data} =~ s/^>.*?\n//;
    $chr->{data} =~ s/\r?\n//g;
    print STDERR "done\n";
    return $chr;
}

sub rc
{
    local $_ = shift;
    tr/ACGTacgt/TGCAtgca/;
    scalar reverse $_;
}

