#!/usr/bin/perl
# -*- mode: perl; perl-indent-level: 4; indent-tabs-mode: nil; -*-

use strict;

=head1 NAME

whpipeline

=head1 SYNOPSIS

  whpipeline [options] [param=value ...] pipeline-spec.json

  PIPELINE_param=value whpipeline [options] pipeline-spec.json

Execute the specified pipeline and report results.

=head1 DESCRIPTION

whpipeline is analogous to make(1).  It determines the sequence of
warehouse jobs needed to compute a result, submits jobs to the
warehouse controller, monitors their progress, provides status
notifications via text files, HTTP, and tty output.

The general form of the pipeline is described in a JSON document
(analogous to a Makefile).  Specific parameters and inputs are
provided on the command line.

Before submitting a new job, whpipeline checks for an equivalent job
which is already queued, running, or finished.  This makes it easy to
reuse existing results.  It also means whpipeline can be interrupted
and restarted without losing track of intermediate results and
partially completed jobs.  For regression tests, this behavior can be
overridden with the --no-reuse option.

=head1 OPTIONS

  --callback-url http://server:port/path

		URL where pipeline status should be POSTed
		periodically

  --callback-url -

		Print pipeline status on stdout periodically

  --callback-url /path/file

		File to write pipeline status to periodically
		(/path/file.tmp.* will be used to achieve atomic
		writes)

  --callback-param foo=bar

		Additional parameters to send to callback URL

  --callback-timeout 10

		Timeout (in seconds) when attempting to POST to
		callback URL

  --callback-type application/x-www-form-urlencoded

		Content type for callback (default
		multipart/form-data)

  --debug	Print diagnostic messages on stderr

  --detach

		Fork and detach from the parent process.  This returns
		control to the calling process immediately, while
		whpipeline continues to submit jobs, monitor pipeline
		progress, and perform callbacks in the background.

  --help	Print usage message

  --lockfile /path/file

		Obtain an exclusive lock on the specified file before
		doing anything else, and keep the lock for the
		duration of this process.  If the file does not exist,
		create it.  If the file is already locked by another
		process, or an exclusive lock cannot be obtained right
		now for any other reason, just quit.  This can be used
		to avoid having multiple whpipeline processes
		shepherding identical pipelines.

  --max-nodes 10

		Maximum number of nodes to request for each new job
		(default 2)

  --no-keep-going Abandon the pipeline if any step fails

  --no-new-jobs Do not start any new jobs

  --no-reuse	Always run new jobs, even if jobs already exist
		that match the pipeline requirements

  --no-wait	Do not wait for jobs to finish, exit asap

  --secret-key keyid

		Encrypt/decrypt alldata using the specified GPG key

  --[no-]tty-status

		[Do not] print status summary to STDERR.  Default:
		print summary if STDERR is a tty.

  --label string

		Display the specified string in each row of the status
		display, and include it as the value for the "label"
		key of each pipeline in the JSON data passed to
		callback handlers

  --warehouse-apps-work-tree /path/to/warehouse-apps

		Path to a local clone of the warehouse-apps git
		repository.  If the path does not exist, it will be
		created using "git clone".  If it does exist, it will
		be updated using "git fetch origin".  Default
		{posix-temp}/$WAREHOUSE-warehouse-apps-$USER/.

=head1 PIPELINE PARAMETERS

A pipeline specification typically refers to some user-provided
parameters like input data and configuration settings.  Values for
these parameters can be given on the command line or in PIPELINE_*
environment variables.

For example, if some pipeline steps refer to a REFERENCE parameter:

 ...
 "params": [
  {"name": "REFERENCE", "value": null},
 ...

The value for REFERENCE can be provided on the command line:

 whpipeline ... REFERENCE=acbd18db4cc2f85cedef654fccc4a4d8 ...

Or in an environment variable:

 PIPELINE_REFERENCE=acbd18db4cc2f85cedef654fccc4a4d8 whpipeline ...

If step #0 and step #1 each have a parameter called REFERENCE, and you
want them to have different values, you can specify a different value
for each step like this:

 whpipeline ... \
   0/REFERENCE=acbd18db4cc2f85cedef654fccc4a4d8 \
   1/REFERENCE=37b51d194a7513e45b56f6524f2d51f2 \
   ...

=head1 SEE ALSO

whintro(1p), wh(1p)

=cut

use Getopt::Long;
use JSON;			# apt-get install libjson-perl
use Pod::Usage;
use Warehouse;			# apt-get install libwarehouse-perl
				# or see http://factories.freelogy.org
use Fcntl;
use POSIX;
use File::Basename;
use Digest::MD5;

$SIG{"CHILD"} = "IGNORE";	# otherwise GnuPG::Interface wrecks everything

my $callbackurl;
my %callbackparam = ( "json" => "{}" );
my $callbacktimeout;
my $callbacktype = "form-data";
my $debugflag;
my $detachflag;
my $helpflag;
my $lockfile;
my $maxnodes_default = 2;
my $nokeepgoingflag;
my $nonewjobsflag;
my $noreuseflag;
my $nowaitflag;
my $secretkey;
my $gpg_keys;
my $ttyflag = -t STDERR;
my $label;
my $worktree;

$main::Options = { "maxnodes" => 1024 };

GetOptions (
    "callback-url=s"		=> \$callbackurl,
    "callback-param=s"		=> \%callbackparam,
    "callback-timeout=i"	=> \$callbacktimeout,
    "callback-type=s"		=> \$callbacktype,
    "debug"			=> \$debugflag,
    "detach"			=> \$detachflag,
    "help"			=> \$helpflag,
    "lockfile=s"		=> \$lockfile,
    "max-nodes=i"		=> \$main::Options->{"maxnodes"},
    "no-keep-going"		=> \$nokeepgoingflag,
    "no-new-jobs"		=> \$nonewjobsflag,
    "no-reuse"			=> \$noreuseflag,
    "no-wait"			=> \$nowaitflag,
    "secret-key=s"		=> \$secretkey,
    "gpg-keys=s"		=> \$gpg_keys,
    "tty-status!"		=> \$ttyflag,
    "label=s"			=> \$label,
    "warehouse-apps-work-tree=s"=> \$worktree,
    )
    or die "Failed to parse command line options.  Try:  $0 --help\n";

if ($helpflag)
{
    pod2usage(1);
}


if (defined $lockfile)
{
    open LOCKFILE, ">>", $lockfile or die "Can't open lockfile $lockfile: $!";
    if (!flock LOCKFILE, Fcntl::LOCK_EX | Fcntl::LOCK_NB) {
	warn "Could not lock $lockfile: $!" if $debugflag;
	exit 0;
    }
}


if (defined $detachflag)
{
    use POSIX 'setsid';
    my $child = fork;
    die "Fork failed: $!" if !defined $child;
    exit 0 if $child;
    setsid or die "Detach failed: $!";
}


my $supplied_param = {};

while (@ARGV && $ARGV[0] =~ /^(.*?)=(.*)/s)
{
    $supplied_param->{$1} = $2;
    shift @ARGV;
}
while (my ($key, $value) = each %ENV)
{
    if ($key =~ s/^PIPELINE_// && !exists $supplied_param->{$key})
    {
	$supplied_param->{$key} = $value;
    }
}


my $whc = new Warehouse;


# Update the local copy of the git repository
if (!defined $worktree) {
    $worktree = dirname(tmpnam())."/".$whc->{warehouse_name}."-warehouse-apps-".scalar(getpwuid($>));
}
my @cmd;
if (-d $worktree) {
    die "$worktree exists but is not a git repository" if !-d "$worktree/.git";
    @cmd = ('git', "--git-dir=$worktree/.git", "fetch", "origin");
} else {
    @cmd = ('git', 'clone', $whc->{config}->{git_clone_url}, $worktree);
}
system(@cmd) == 0
    or die "@cmd: exit $?";


my $configurl = $whc->get_config ("configurl");
$configurl =~ /^(.*?\/\/([^:\/]+).*\/)/ or die "disgrok configurl";
my $controller_key_url = $1."server_key.txt";
my $controller_hostname = $2;

if ($secretkey)
{
    my $import = `wget -O- -q '$controller_key_url' | gpg --import 2>&1`;
    $import =~ /^gpg: key \S+: [^<]*<(root\@\Q$controller_hostname\E)>/m
	or die "disgrok gpg import";
    my $controller_key_id = $1;
    print STDERR "Imported key for $controller_key_id\n"
	if $debugflag;

    if (!$gpg_keys) {
        local $ENV{ENCRYPT_TO} = "$controller_key_id,$secretkey";
        my $cryptwhc = new Warehouse;
        my $secretexport = `gpg --export-secret-key '$secretkey'`
            or die "could not export secret key $secretkey";
        $gpg_keys = $cryptwhc->store_block ($secretexport);
        print STDERR "Stored encrypted secret key $secretkey in $gpg_keys\n"
            if $debugflag;
    }
    $ENV{SIGN_AS} = $secretkey;
    delete $ENV{NOSIGN};
}
elsif ($gpg_keys) {
    # try to determine email address to use as $secretkey by reading
    # $gpg_keys
    my %tried;
  GPG2SEC:
    while (`whget '$gpg_keys' | gpg --list-packets` =~ /keyid ([\dA-F]+)/gm) {
        my $keyid = $1;
        next if exists $tried{$keyid};
        $tried{$keyid} = 1;
        while (`gpg --list-keys '$keyid'` =~ /<(\S+\@\S+?)>/gm) {
            my $keyemail = $1;
            my @keys = sort ("root\@$controller_hostname", $keyemail);
            warn "trying ... @keys\n" if $debugflag;
            my $stored_key_block = $whc->fetch_manifest_key_by_name
                ('/gpg/' .
                 Digest::MD5::md5_hex(join(',',@keys)) .
                 '/' .
                 Digest::MD5::md5_hex(`gpg --export-secret-key '$keyemail'`));
            warn "$stored_key_block\n" if $debugflag;
            if (($stored_key_block =~ /(\+GM[0-9a-f]{32,})/)[0] eq
                ($gpg_keys =~ /(\+GM[0-9a-f]{32,})/)[0]) {
                warn "Using SIGN_AS=$keyemail\n" if $debugflag;
                $secretkey = $keyemail;
                last GPG2SEC;
            }
        }
    }
    if (!$secretkey) {
        die "Could not figure out key id stored in --gpg-keys parameter.  Specify key email address in --secret-key parameter.\n";
    }
    $ENV{SIGN_AS} = $secretkey;
    delete $ENV{NOSIGN};
}


$JSON::UnMapping = 1;
my $json;
do {
    local $/ = undef;
    $json = <>;
};
my $pipe;
if (exists &from_json) {
    $pipe = from_json ($json);
} else {
    # old JSON API
    $pipe = jsonToObj ($json);
};
$pipe->{"label"} = $label if defined $label;
my $failed = 0;
my $more_todo = 1;
for (my $iteration = 0;
     $iteration == 0
     || ($iteration == 1 && !$nonewjobsflag)
     || !$nowaitflag;
     $iteration++)
{
    last if !$more_todo;
    if ($iteration > 1)
    {
	printf STDERR "Sleeping 10 seconds starting at %s\n", scalar localtime
	    if $debugflag;
	sleep 10;
	print STDERR "Woke up\n" if $debugflag;
    }

    $more_todo = 0;
    for my $stepno (0..$#{$pipe->{"steps"}})
    {
	if (do_step ($pipe, $stepno, $iteration == 0))
	{
	    $more_todo = 1;
	}
	elsif ($pipe->{"steps"}->[$stepno]->{"failed"} && $nokeepgoingflag)
	{
	    $nonewjobsflag = 1;
	}
    }
    if ($callbackurl =~ m{^https?://})
    {
	use LWP::UserAgent;
	use HTTP::Request::Common;
	my $ua = LWP::UserAgent->new;
	$ua->timeout ($callbacktimeout) if defined $callbacktimeout;
	my @postdata;
	for (keys %callbackparam)
	{
	    push @postdata, ($_,
			     $callbackparam{$_} eq "{}"
			     ? json_encode ($pipe)
			     : $callbackparam{$_});
	}
	my $req = $ua->request (POST $callbackurl,
				Content_Type => $callbacktype,
				Content => \@postdata);
	if (!$req->is_success)
	{
	    printf STDERR "Callback request failed: %s\n", $req->status_line
		if $debugflag;
	}
    }
    elsif ($callbackurl eq "-")
    {
	print json_encode ($pipe, { "pretty" => 1 });
	print "\n";
    }
    elsif ($callbackurl =~ /^\//)
    {
	my $tmpfile = "$callbackurl.tmp.$$";
	if (!sysopen STATUS, $tmpfile, O_CREAT|O_EXCL|O_WRONLY)
	{
	    print STDERR "Error creating $tmpfile: $!\n";
	}
	elsif (!print STATUS json_encode ($pipe, { "pretty" => 1 }))
	{
	    print STDERR "Error writing $tmpfile: $!\n";
	    close STATUS;
	    unlink $tmpfile;
	}
	elsif (!close STATUS)
	{
	    print STDERR "Error writing $tmpfile: $!\n";
	    unlink $tmpfile;
	}
	elsif (!rename $tmpfile, $callbackurl)
	{
	    print STDERR "Error renaming $tmpfile to $callbackurl: $!\n";
	    unlink $tmpfile;
	}
    }
    elsif (defined $callbackurl)
    {
	printf STDERR "Callback URL \"%s\" not understood;\ntry \"http://host/uri\" or \"-\" or \"/path/to/local/file\"\n", $callbackurl
	    if $debugflag;
    }
    if ($ttyflag)
    {
	print_status_summary ($pipe);
    }
}


sub do_step
{
    # Try to make progress on a step.  Return true if there is any
    # point in checking up on this step again.

    my $pipe = shift;
    my $stepno = shift;
    my $dryrunflag = shift;

    my $step = $pipe->{"steps"}->[$stepno];

    # If this step is already deemed to be complete or failed, there
    # is no point in reinspecting

    return undef if (($step->{"failed"} || $step->{"complete"}) &&
                     ref $step->{"warehousejob"} &&
		     $step->{"warehousejob"}->{"metakey"});

    delete $step->{"errors"};
    delete $step->{"warnings"};
    delete $step->{"waitingfor"};

    if (!ref $step->{"warehousejob"} &&
	exists $supplied_param->{$stepno."/warehousejob"}) {
	$step->{"warehousejob"} = { "id" => $supplied_param->{$stepno."/warehousejob"}};
    }
    goto KNOW_JOB_ID if ref $step->{"warehousejob"};

    my $mrparam = {};
  PARAM:
    for my $param (@{$step->{"params"}})
    {
	my $value;
	my $paramtype;
	map { $paramtype = $_ if exists $param->{$_} } qw(value hash data_locator);
	$value = $supplied_param->{$stepno."/".$param->{"name"}};
	$value = $supplied_param->{$param->{"name"}} if !defined $value && $param->{"name"} ne "INPUT";
	$value = $param->{$paramtype} if !defined $value && defined $paramtype;

	if (defined $value)
	{
	    $paramtype = "value" if !defined $paramtype;
	    $param->{$paramtype} = $value;
	}
	elsif (exists $param->{"from_step"} ||
	       exists $param->{"from_step_name"})
	{
	    my $from_pipe = $pipe;
	    if (exists $param->{"from_pipeline_id"})
	    {
		undef $from_pipe;
		foreach (@{$pipe->{"pipelines_referred_to"}}) 
		{
		    if ($_->{"id"} eq $param->{"from_pipeline_id"})
		    {
			$from_pipe = $_;
			last;
		    }
		}
		if (!defined $from_pipe)
		{
		    push @{$step->{"errors"}},
		    "Cannot find pipeline with id \"".$param->{"from_pipeline_id"}."\" in input";
		    next PARAM;
		}
	    }
	    if (!defined $param->{"from_step"})
	    {
		my $n = -1;
		foreach (@{$from_pipe->{"steps"}})
		{
		    ++$n;
		    if ($_->{"name"} eq $param->{"from_step_name"})
		    {
			$param->{"from_step"} = $n;
			last;
		    }
		}
		if (!defined $param->{"from_step"})
		{
		    push @{$step->{"errors"}},
		    "Cannot find step with name \"".$param->{"from_step_name"}."\" in pipeline with id \"".$from_pipe->{"id"}."\"";
		    next PARAM;
		}
	    }
	    my $from_step = $param->{"from_step"} + 0;
	    if (exists $param->{"from_param_name"})
	    {
		my $found = 0;
		for (@{$from_pipe->{"steps"}->[$from_step]->{"params"}})
		{
		    if ($_->{"name"} eq $param->{"from_param_name"})
		    {
			for my $k (qw(value data_locator))
			{
			    $param->{$k} = $_->{$k} if exists $_->{$k};
			}
			$value = $param->{"value"} || $param->{"data_locator"};
			$found = 1;
			last;
		    }
		}
		if (!$found)
		{
		    push @{$step->{"errors"}},
		    "Cannot find param with name \"".$param->{"from_param_name"}."\" in step $from_step of pipeline with id \"".$from_pipe->{"id"}."\"";
		}
	    }
	    elsif ($from_pipe->{"steps"}->[$from_step]->{"complete"})
	    {
		$value = $from_pipe->{"steps"}->[$from_step]->{"output_data_locator"};
		$param->{"value"} = $value;
	    }
	    else
	    {
		if ($from_pipe->{"steps"}->[$from_step]->{"failed"} ||
		    $from_pipe->{"steps"}->[$from_step]->{"errors"})
		{
		    push @{$step->{"errors"}},
		    sprintf ("Cannot run because step %d of pipeline id %d failed",
			     $from_step, $from_pipe->{"id"});
		}
		else
		{
		    push @{$step->{"waitingfor"}}, $from_step;
		}
	    }
	}
	elsif ($param->{"optional"})
	{
	    ;
	}
	elsif (!defined $paramtype)
	{
	    push @{$step->{"errors"}},
	    "Unsupported parameter type for \"" . $param->{"name"} . "\"";
	    next;
	}
	else
	{
	    push @{$step->{"errors"}},
		"Missing value for \"".$param->{"name"}."\" param";
	    $mrparam = undef;
	}

	if (defined $value && $value ne "" && !length $value)
	{
	    die "JSON->perl mapping problem -- setting JSON::UnMapping failed?"
	}
	if (defined $value)
	{
	    if (defined $param->{"subpath"})
	    {
		$value .= $param->{"subpath"};
	    }
	    $mrparam->{$param->{"name"}} = $value;
	}
    }
    if ($step->{"errors"})
    {
	$step->{"failed"} = 1;
	return undef;
    }
    return undef if $step->{"waitingfor"};

    # If we get this far, all of our inputs are available and our
    # dependencies are satisfied.

    my $step_job;
    if (ref $step->{"warehousejob"} &&
        $step->{"warehousejob"}->{"id"} > 0)
    {
KNOW_JOB_ID:
	my $joblist = $whc->job_list
	    ("id_min" => $step->{"warehousejob"}->{"id"},
	     "id_max" => $step->{"warehousejob"}->{"id"},
	    );
	if (!$joblist || !($step_job = $joblist->[0]))
	{
	    push @{$step->{"warnings"}}, "Error looking up status of job " . $step->{"warehousejob"}->{"id"} . " at " . scalar localtime;
	    return 1;
	}
    }
    else
    {
	my $sysparam = {
	    "max_steps_per_node" => $pipe->{"max_steps_per_node"},
	    "max_nodes" => $pipe->{"max_nodes"} || $main::Options->{"maxnodes"},
	    "min_revision" => $pipe->{"min_revision"},
	    "max_revision" => $pipe->{"max_revision"},
	    "min_memory" => $pipe->{"min_memory"},
	};
	my $mrjobspec = {
	    "mrfunction" => $step->{"function"},
	};
	my @knobs;
	while (my ($param, $value) = each %$mrparam)
	{
	    if ($param eq "INPUT") { $mrjobspec->{"inputkey"} = $value; }
	    elsif (exists $sysparam->{$param})
	    {
		warn "param->{\"$param\"} is deprecated, use step->{\"$param\"} instead\n" if $debugflag;
		$sysparam->{$param} = $value;
	    }
	    else { push @knobs, "$param=$value"; }
	}
	while (my ($param, $value) = each %$step)
	{
	    if (exists $sysparam->{$param}) { $sysparam->{$param} = $value; }
	}
	push @knobs, "GPG_KEYS=$gpg_keys" if $gpg_keys;

        # allow command-line override of max_nodes for a particular step
        if (exists $supplied_param->{$stepno."/max_nodes"}) {
            $sysparam->{"max_nodes"} = $supplied_param->{$stepno."/max_nodes"};
        }
        # allow command-line reduction of pipeline's specified max_nodes
        elsif ($sysparam->{"max_nodes"} > $main::Options->{"maxnodes"}) {
            $sysparam->{"max_nodes"} = $main::Options->{"maxnodes"};
        }
        # if nobody has specified max_nodes at all, use the built-in default
        $sysparam->{"max_nodes"} ||= $maxnodes_default;

	map { s/\\/\\\\/g; s/\n/\\n/g; } @knobs;
	$mrjobspec->{"knobs"} = join ("\n", sort @knobs);
	$step_job = find_job ($mrjobspec, $sysparam, $stepno, $step);

	if (!defined $step_job)
	{
	    # Error looking up existing jobs
	    return 1;
	}
	elsif ($step_job eq "None")
	{
	    return 1 if $dryrunflag && !$nonewjobsflag;
            $mrjobspec->{"revision"} = "master";
	    $mrjobspec->{"photons"} = 1; # todo: command line parameter?
	    while (my ($p, $v) = each %$sysparam)
	    {
		next if !defined $v;
		$mrjobspec->{"revision"} = commit_resolve($v)
                    if $p eq "max_revision";
		$mrjobspec->{"nodes"} = $v
                    if $p eq "max_nodes";
		$mrjobspec->{"stepspernode"} = $v
                    if $p eq "max_steps_per_node";
	    }
	    $mrjobspec->{"nodes"} .= "," . $sysparam->{"min_memory"} . "M"
		if $sysparam->{"min_memory"};
	    $step_job = start_job ($mrjobspec);
	    return !$nonewjobsflag if $step_job eq "None";
	    if (!$step_job)
	    {
		push @{$step->{"warnings"}}, "Error starting job";
		return 1;
	    }
	}
    }

    $step->{"warehousejob"} = {};
    $step->{"warehousejob"}->{"id"} = $step_job->{"id"};
    $step->{"warehousejob"}->{"nodes"} = $step_job->{"nodes"};
    $step->{"warehousejob"}->{"metakey"} = $step_job->{"metakey"};
    $step->{"warehousejob"}->{"revision"} = $step_job->{"revision"};
    $step->{"warehousejob"}->{"starttime"} = $step_job->{"starttime"};
    printf STDERR ("Using job %d for step %d\n",
		   $step->{"warehousejob"}->{"id"}, $stepno) if $debugflag;

    if (($step_job->{"success"} || $step_job->{"finishtime"}) &&
	!$step_job->{"metakey"} &&
	$step_job->{"finishtime_s"} < (scalar(time) - 600)) {
	# If no metakey appears within 10 minutes of job ending, use
	# "-" as a placeholder to make sure we don't keep waiting for
	# it to appear
	$step->{"warehousejob"}->{"metakey"} = "-";
    }

    if ($step_job->{"success"})
    {
	$step->{"warehousejob"}->{"elapsed"} = $step_job->{"finishtime_s"} - $step_job->{"starttime_s"};
	$step->{"warehousejob"}->{"finishtime"} = $step_job->{"finishtime"};
	$step->{"output_data_locator"} = $step_job->{"outputkey"};
	$step->{"output_data_locator"} =~ s/\+[^,]*//g;
	$step->{"complete"} = 1;
	delete $step->{"progress"};
	return undef;
    }
    elsif ($step_job->{"finishtime"})
    {
	$step->{"warehousejob"}->{"finishtime"} = $step_job->{"finishtime"};
	$step->{"failed"} = 1;
	delete $step->{"progress"};
	return undef;
    }
    else
    {
	$step->{"progress"} = sprintf
	    ("%d+%d/%d",
	     $step_job->{"steps_done"},
	     $step_job->{"steps_running"},
	     $step_job->{"steps_done"} +
	     $step_job->{"steps_running"} +
	     $step_job->{"steps_todo"});
	$step->{"warehousejob"}->{"elapsed"} = time - $step_job->{"starttime_s"} if $step_job->{"starttime_s"};
	return !$nowaitflag;
    }
}


sub find_job
{
    return "None" if $noreuseflag;

    my $mrjobspec = shift;
    my $sysparam = shift;
    my $stepno = shift;
    my $step = shift;
    my $joblist = $whc->job_list (%$mrjobspec);
    if (!$joblist &&
	!($joblist = $whc->job_list (%$mrjobspec)))
    {
	push @{$step->{"warnings"}}, "Error retrieving job list";
	return undef;
    }
    printf STDERR ("Controller returned %d candidate%s for step %d (%s)\n",
		   $#$joblist + 1,
		   $#$joblist == 0 ? "" : "s",
		   $stepno,
		   $step->{"function"}) if $debugflag;
    my $quoted_jobspec = { %$mrjobspec };

    my $step_job = "None";
  J:
    for my $j (@$joblist) {
	for my $k (qw(mrfunction inputkey knobs)) {
	    my $want = $quoted_jobspec->{$k};
	    my $got = $j->{$k};
	    if ($k eq "inputkey")
	    {
		$want =~ s/\+[^,\/]+//g;
		$got =~ s/\+[^,\/]+//g;
	    }
	    if ($want ne $got) {
		printf STDERR ("%d has wrong %s (want %s got %s)\n", $j->{"id"}, $k, $quoted_jobspec->{$k}, $j->{$k}) if $debugflag;
		next J;
	    }
	}
	next J if ref $step_job && $step_job->{"success"} && !$j->{"success"};
	next J if !$j->{"success"} && (length $j->{"success"} || length $j->{"finishtime_s"});

        # Legacy handling for subversion revision numbers
	next J if ($sysparam->{"min_revision"} &&
                   $sysparam->{"min_revision"} =~ /^\d{1,5}$/ &&
                   $j->{"revision"} =~ /^\d{1,5}$/ &&
                   $j->{"revision"} < $sysparam->{"min_revision"});
	next J if ($sysparam->{"max_revision"} &&
                   $sysparam->{"min_revision"} =~ /^\d{1,5}$/ &&
                   $j->{"revision"} =~ /^\d{1,5}$/ &&
                   $j->{"revision"} > $sysparam->{"max_revision"});

        # Convert all commit-ish and svn revision numbers to commit ids
        my $minrev = commit_resolve($sysparam->{"min_revision"} eq 0 ? undef : $sysparam->{"min_revision"});
        my $maxrev = commit_resolve($sysparam->{"max_revision"});
        next J if (!defined $j->{"revision"} ||
                   $j->{"revision"} !~ /\S/); # controller should have prevented this
        next J if (defined $minrev &&
                   !commit_reachable_from($minrev, commit_resolve($j->{"revision"})));
        next J if (defined $maxrev &&
                   !commit_reachable_from(commit_resolve($j->{"revision"}), $maxrev));

	printf STDERR "Job %d is the best yet\n", $j->{"id"} if $debugflag;
	$step_job = $j;
    }
    if ($step_job eq "None") {
	my $shorter_knobs = $mrjobspec->{knobs};
	if ($shorter_knobs =~ s/^(GPG_KEYS=[0-9a-f]{32}\S*)\+\S+$/$1/m) {
	    return find_job ({ %$mrjobspec, "knobs" => $shorter_knobs },
			     $sysparam, $stepno, $step);
	}
    }
    return $step_job;
}


sub start_job
{
    my $mrjobspec = shift;
    print STDERR ("starting new job:\n", map { "    $_:".$mrjobspec->{$_}."\n" } keys %$mrjobspec)
	if $debugflag;

    if ($nonewjobsflag)
    {
	return "None";
    }

    my $id = $whc->job_new (%$mrjobspec);
    printf STDERR ("started job %d\n", $id)
	if $debugflag;

    return undef if !$id;

    my $newjob = $whc->job_list ("id_min" => $id, "id_max" => $id)->[0];
    if (!$newjob)
    {
	$newjob = { "id" => $id };
    }
    return $newjob;
}


sub print_status_summary
{
    my $pipe = shift;

    printf STDERR "\n%s\n", scalar localtime;

    my $stepno = -1;
    for my $step (@{$pipe->{"steps"}})
    {
	++$stepno;
	my $j = $step->{"warehousejob"};
	my $status;
	$status = "queued" if $j && $j->{"id"};
	$status = sprintf ("%s after %d s", $step->{"progress"}, $j->{"elapsed"}) if $j && $j->{"elapsed"};
	$status = $step->{"output_data_locator"} if $step->{"complete"};
	$status = "failed: " . join ("; ", $step->{"errors"} ? @{$step->{"errors"}} : $step->{"warnings"} ? @{$step->{"warnings"}} : ()) if $step->{"failed"};
	my $jobno = "-";
	$jobno = $j->{"id"} if $j;
	printf STDERR "%-8s ", $pipe->{"label"} if exists $pipe->{"label"};
	printf STDERR "%2d %-12.12s %6s %s\n", $stepno, $step->{"name"}, $jobno, $status;
    }
}

# Cache of subversion r# -> commit id and commit-ish -> commit mappings
my %commit_resolve;

sub commit_resolve
{
    my $commitish = shift;
    return undef if !defined $commitish;
    return undef if $commitish eq "";
    if (!exists $commit_resolve{$commitish}) {
        my $cmd;
        if ($commitish =~ /^r?(\d{1,5})$/) {
            # subversion revision number
            my $svn_revision = $1;
            my $commit_id_arg = "--glob='*'";
            $main::git_version = `git --version`
                if !defined $main::git_version;
            $commit_id_arg = "HEAD"
                if ($main::git_version =~ / 1\.(\d)/ && $1 < 7);
            $cmd = "git --git-dir='$worktree/.git' rev-list --grep='git-svn-id:.*/trunk\@$svn_revision ' $commit_id_arg";
        }
        else {
            $cmd = "git --git-dir='$worktree/.git' rev-list --max-count=1 '$commitish'";
        }
        my $commit = `$cmd`;
        chomp($commit);
        if ($commit !~ /^[a-f0-9]{40}$/s) {
            warn "Could not resolve commitish $commitish -- proceeding with undefined results";
            return "";
        }
        $commit_resolve{$commitish} = $commit;
        warn "commit_resolve: $commitish => $commit_resolve{$commitish}\n"
            if $debugflag;
    }
    return $commit_resolve{$commitish};
}

# Cache of "commit A reachable from commit B?" answers
my %commit_reachable_from;      # ("child,parent" => 0, "parent,child" => 1)

sub commit_reachable_from
{
    my ($parent, $child) = @_;
    if (!exists $commit_reachable_from{$parent,$child}) {
        my $cmd = "git --git-dir=$worktree/.git rev-list '$child'";
        my @reachable_from_child = `$cmd`;
        if ($? != 0) {
            warn "$cmd failed -- proceeding with undefined results";
            return undef;
        }
        my $is = 0;
        for (@reachable_from_child) {
            chomp;
            if ($_ eq $parent) {
                $is = 1;
                last;
            }
        }
        $commit_reachable_from{$parent,$child} = $is;
        warn "commit_reachable_from: $parent,$child => $is\n"
            if $debugflag;
    }
    return $commit_reachable_from{$parent,$child};
}

sub json_encode
{
    if (exists &to_json) {
        return to_json(splice @_);
    } else {
        return objToJson(splice @_);
    }
}
