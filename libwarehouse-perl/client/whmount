#!/usr/bin/perl

=head1 NAME

whmount

=head1 SYNOPSIS

  whmount [options] manifesthash /path/to/mountpoint

Make the contents of the specified manifest appear as part of the unix
filesystem.

  whmount [options] / /path/to/mountpoint

Mount any manifest on demand: make the contents of any manifest H
appear at /path/to/mountpoint/H/.

  fusermount -u /path/to/mountpoint

Unmount.

=head1 OPTIONS

  --debug

	Print extra debugging information on stderr.  Implies
	--no-detach.

  --threaded

	Use multiple threads: better performance, greater risk of
	bugs.

  --cache-count

        Maximum number of data blocks to keep in LRU cache.  Default
        is 8.

  --help

	Display this page.

  --no-detach

	Run in the foreground.  The default behavior is to detach from
	the parent process.

=head1 CAVEATS

Mounts are read-only.

When using "whmount / /mnt", a command like "ls /mnt" will not give
you a list of available manifests.  The permissions of /mnt are set to
0111 (executable but not readable) so this shortcoming does not seem
so confusing to standard filesystem tools.

File creation, modification, and access times for files and
directories are set to the time when whmount was invoked.

Performance is optimized for long sequential reads.

When whmount is invoked as "whmount / ...", it only keeps one manifest
in memory at a time, and loading a manifest is relatively slow.
Therefore, if you are doing something that requires alternating
accesses between two manifests -- for example, comparing the contents
of two manifests -- it is much more efficient to launch a separate
whmount process for each manifest.

=cut

use strict;
use Getopt::Long;
use Pod::Usage;
use Warehouse;
use Warehouse::Manifest;
use Warehouse::Stream;
use Fuse;
use POSIX qw(ENOENT EAGAIN EINVAL EPERM setsid);
use threads;
use threads::shared;

my $debugflag = 0;
my $helpflag = 0;
my $nodetachflag = 0;
my $threadedflag = 0;
my $cachecount = 8;

GetOptions (
    "debug"			=> \$debugflag,
    "help"			=> \$helpflag,
    "no-detach"			=> \$nodetachflag,
    "threaded"                  => \$threadedflag,
    "cache-count=i"             => \$cachecount,
    )
    or die "usage: $0 [options] manifesthash mountpoint (or try --help)\n";

if ($helpflag)
{
    pod2usage(1);
}

$nodetachflag = 1 if $debugflag;
$main::debugflag = $debugflag;

@ARGV == 2 or die "usage: $0 [options] manifesthash mountpoint (or try --help)\n";
my ($manifesthash, $mountpoint) = @ARGV;

my $loaded;
my $faketime = scalar time;
my $fakeblocksize = 512;	# Although it should work fine to set this to
				# 1024 or 2^26, fuse doesn't seem to
				# care what we set it to.  A
				# fakeblocksize of 512 seems to be
				# necessary to make "du" report
				# reasonable values.
my $whc = new Warehouse;
my $m;
my %fs;
my @fs;

my $cache = new ThreadableCache(max_count => $cachecount);
$whc->{local_cache} = $cache;

do { load($manifesthash) == 0 or die } if $manifesthash ne '/';
map { print STDERR $_."\n" } @fs if $debugflag;

if (!$nodetachflag) {
    defined (my $child = fork) or die "Cannot fork: $!\n";
    if ($child) { exit 0; }
    setsid or die "Can't start a new session: $!\n";
}

Fuse::main(
    'mountpoint' => $mountpoint,
    'getattr' => 'main::fuse_getattr',
    'getdir' => 'main::fuse_getdir',
    'read' => 'main::fuse_read',
    'debug' => $debugflag,
    'threaded' => $threadedflag,
    );

sub chmanifest {
    if ($debugflag) {
        print STDERR "chmanifest ". ${$_[0]} ."\n";
    }
    return 0 if $manifesthash ne '/';
    my $fnref = shift;
    if ($$fnref =~ s:^/([0-9a-f]{32}[^/]*)::) {
	return load ($1);
    }
    if ($$fnref eq '/') {
	return -EPERM();
    }
    return -ENOENT();
}

sub load {
    print STDERR "load @_\n" if $debugflag;

    my $manifesthash = shift;
    return if $loaded eq $manifesthash;
    $m = undef;
    %fs = ();
    @fs = ();
    $loaded = undef;
    {
        my $dataref = $cache->get($manifesthash);
        if (defined $dataref) {
            $m = new Warehouse::Manifest ('whc' => $whc,
                                          'data' => $dataref);
        }
        else {
            eval {
                $m = new Warehouse::Manifest ('whc' => $whc,
                                              'key' => $manifesthash);
            };
            warn $@ if $@ && $debugflag;
            return -ENOENT() if ($@);

            $cache->put($manifesthash, $m->{data});
        }
    }
    $m->rewind;
    while (my $s = $m->subdir_next) {
	my $dir = $s->name;
	if ($dir =~ /^\.$/) { $dir = '/'; }
	else { $dir = $dir . '/'; }
	$dir =~ s:^\./:/:;
	$s->rewind;
	add_parent_dirs ($dir);
	while (my ($pos, $size, $basename) = $s->file_next) {
	    last if !defined $pos;
	    my $filename = $dir . $basename;
	    if (!exists $fs{$filename}) {
		$fs{$filename} = [$s, $pos, $size];
		if ($basename =~ m:/:) {
		    add_parent_dirs ($filename);
		}
	    }
	}
	@fs = sort keys %fs;
    }
    $loaded = $manifesthash;
    return 0;
}

sub add_parent_dirs {
    my $name = shift;
    while ($name =~ s:/[^/]*$::) {
	$fs{$name.'/'} = 1;
    }
}

sub fuse_getattr
{
    my $filename = shift;
    if ($filename eq '/' && $manifesthash eq '/') {
	return (1, 1, 040111, 1, 0, 0, 0, 0, $faketime, $faketime, $faketime, 1, 1);
    }
    chmanifest(\$filename) == 0 or return -ENOENT();
    if ($filename eq '/' || exists $fs{$filename.'/'}) {
	return (1, 1, 040755, 1, 0, 0, 0, 0, $faketime, $faketime, $faketime, 1, 1);
    } elsif (defined ($fs{$filename})) {
	return (1, 1, 0100644, 1, 0, 0, 0, $fs{$filename}->[2], $faketime, $faketime, $faketime, $fakeblocksize, int (($fs{$filename}->[2] + $fakeblocksize - 1) / $fakeblocksize));
    } else {
	return -ENOENT();
    }
}

sub fuse_getdir
{
    my $dirname = shift;
    my $err = chmanifest(\$dirname);
    $err == 0 or return $err;
    $dirname .= '/' if $dirname !~ m:/$:;
    my $min = 0;
    my $max = $#fs;
    while ($min <= $max) {
	my $i = int(($min + $max)/2);
	my $cmp = substr($fs[$i],0,length $dirname) cmp $dirname;
	if ($cmp < 0) {
	    $min = $i + 1;
	}
	else {
	    $max = $i - 1;
	}
    }
    my @ret;
    while ($min <= $#fs && substr($fs[$min],0,length $dirname) eq $dirname) {
	if ($#ret == -1) { push @ret, '.', '..'; }
	else {
	    push @ret, substr($fs[$min], length $dirname);
	    $ret[-1] =~ s:/$::;
	    pop @ret if $ret[-1] =~ m:/:;
	}
	$min++;
    }
    return (@ret, 0) if @ret;
    return -ENOENT();
}

sub fuse_read
{
    my ($filename, $readsize, $offset) = @_;
    chmanifest(\$filename) == 0 or return -ENOENT();
    if (defined ($fs{$filename})) {
	my ($s, $pos, $filesize) = @{$fs{$filename}};
	$readsize = $filesize - $offset if $readsize + $offset > $filesize;
	$s->seek ($pos + $offset);
	my $until = $pos + $offset + $readsize;
	$until = $pos + $filesize if $offset + $readsize > $filesize;
	my $buf = "";
	while (my $dataref = $s->read_until ($until)) {
	    $buf .= $$dataref;
	}
	return -EAGAIN() if $readsize != length $buf;
	$main::tot += $readsize;
	return $buf;
    } else {
	return -ENOENT();
    }
}


package ThreadableCache;
use threads;
use threads::shared;

%ThreadableCache::cache = ();

sub new
{
    my $class = shift;
    my $self = { @_ };
    $self->{max_count} ||= 8;
    bless ($self, $class);
    share(%ThreadableCache::cache);
    return $self;
}
sub get
{
    my $self = shift;
    my $key = shift;
    lock(%ThreadableCache::cache);
    if (defined $ThreadableCache::cache{$key}) {
        $ThreadableCache::cache{$key}->{atime} = time;
        if ($main::debugflag) {
            print STDERR "cache get $key atime ".$ThreadableCache::cache{$key}->{atime}."\n";
        }
        return $ThreadableCache::cache{$key}->{data};
    }
    else {
        if ($main::debugflag) {
            print STDERR "cache miss $key\n";
        }
        return undef;
    }
}
sub put
{
    my $self = shift;
    my $key = shift;
    my $data = shift;
    lock(%ThreadableCache::cache);
    if (!defined $ThreadableCache::cache{$key}) {
        $ThreadableCache::cache{$key} = shared_clone({});
    }
    $ThreadableCache::cache{$key}->{data} = shared_clone($data);
    $ThreadableCache::cache{$key}->{atime} = time;
    if ($main::debugflag) {
        print STDERR "cache put $key atime ".$ThreadableCache::cache{$key}->{atime}."\n";
    }
    $self->clean;
}
sub clean
{
    my $self = shift;
    lock(%ThreadableCache::cache);
    return if $self->{max_count} >= keys(%ThreadableCache::cache);
    my @atimes;
    while (my ($key, $cache) = each %ThreadableCache::cache) {
        push @atimes, $cache->{atime};
    }
    @atimes = reverse sort @atimes;
    my $too_old = pop @atimes;
    foreach my $key (keys %ThreadableCache::cache) {
        if ($ThreadableCache::cache{$key}->{atime} <= $too_old) {
            if ($main::debugflag) {
                print STDERR "cache purge $key atime ".$ThreadableCache::cache{$key}->{atime}."\n";
            }
            delete $ThreadableCache::cache{$key};
        }
    }
}
