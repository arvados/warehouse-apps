#!/usr/bin/perl

use strict;
use Fcntl ':flock';
use Warehouse;
use POSIX;
my $whc = new Warehouse;

@ARGV == 1
    or die qq{
usage: $0 workdir

example: $0 /var/cache/maq-jobs-workdir

};

my ($workdir) = @ARGV;

my %hash_is;

opendir (D, $workdir) or die "$workdir: $!";
for my $workfile (readdir D)
{
    next unless $workfile =~ /^([0-9a-f]{32}(?:,[0-9a-f]{32})*)(?:\.is(.*))?$/;
    my $hash = $1;
    my $is = $2;
    $hash_is{$hash} ||= [];
    push @ { $hash_is{$hash} }, $2 if defined $2;
}
closedir D;

foreach my $hash (sort keys %hash_is)
{
    my @is = @ { $hash_is{$hash} };
    if (@is)
    {
	print "$hash is @is\n" if $ENV{DEBUG};
    }
    else
    {
	my $chunk = `whget $hash - | gzip -cdf | head -c 20480`;
	if ($chunk =~ m{^\.(/\S+)? ([0-9a-f]{32}[^\'\s]*) [0-9a-f]}s)
	{
	    $chunk = `whget '$2' - | gzip -cdf | head -c 20480`;
	}
	else
	{
	    sysopen F, "$workdir/$hash.nomanifest", O_WRONLY|O_CREAT|O_EXCL;
	    close F;
	}
	if ($chunk =~ m{^(\@\S+\n[A-Za-z]+\n\+\S*\n\S+\n){4}}s)
	{
	    if ($chunk !~ m{^(\@\S+\n[A-Za-z]+\n\+\S*\n[\0-I]+\n){40}}s
		&&
		$chunk !~ m{^(\@\S+\n[A-Za-z]+\n\+\S*\n[\0-I]+\n)+$}s)
	    {
		print "$hash is solexa fastq reads\n";
		sysopen F, "$workdir/$hash.issolexa", O_WRONLY|O_CREAT|O_EXCL;
		close F;
	    }
	    else
	    {
		print "$hash is sanger fastq reads\n";
	    }
	    sysopen F, "$workdir/$hash.isreads", O_WRONLY|O_CREAT|O_EXCL;
	    close F;
	}
	elsif ($chunk =~ /^((>[^\n]+|[-a-z\*]+)\n){4}/is)
	{
	    sysopen F, "$workdir/$hash.isgenome", O_WRONLY|O_CREAT|O_EXCL;
	    close F;
	    print "$hash is fasta genome\n";
	}
	elsif ($chunk =~ /^Mapping Analysis\r?\n\tSNP ID\tTSC ID\tdbSNP RS ID\tChromosome\tChromosomal Location\t.*\t\d+[SN]_(\S+).*\r?\n\d+\tSNP/s ||
	       $chunk =~ /^\#CHP File=[^\n]*\\(.+)\.chp\r?\n.*\nAFFX-/s)
	{
	    my $affyscan_id = $1;
	    sysopen F, "$workdir/$hash.isaffyscan", O_WRONLY|O_CREAT|O_EXCL;
	    close F;
	    sysopen F, "$workdir/$hash.comment", O_WRONLY|O_CREAT|O_EXCL;
	    syswrite F, $affyscan_id;
	    close F;
	    print "$hash is affy scan, id is $affyscan_id\n";
	}
	elsif ($chunk =~ /^(chr\S+\s\d+\s\d+(\srs\d+\s\d+\s[-\+])?\r?\n){10}/s)
	{
	    sysopen F, "$workdir/$hash.issnplist", O_WRONLY|O_CREAT|O_EXCL;
	    close F;
	    print "$hash is snplist\n";
	}
	elsif ($chunk =~ /\n\#%netaffx-annotation-tabular-format-version=1.0/)
	{
	    my %headinfo = $chunk =~ /\n\#%(\S+?)=([^\r\n]*)/g;
	    my $affymap_id = ($headinfo{"netaffx-annotation-date"}
			      . " " .
			      $headinfo{"netaffx-annotation-netaffx-build"}
			      . " " .
			      ($headinfo{"genome-version-ncbi"} ||
			       $headinfo{"genome-version"}));
	    sysopen F, "$workdir/$hash.isaffymap", O_WRONLY|O_CREAT|O_EXCL;
	    close F;
	    sysopen F, "$workdir/$hash.comment", O_WRONLY|O_CREAT|O_EXCL;
	    syswrite F, $affymap_id;
	    close F;
	    print "$hash is affy map, $affymap_id\n";
	}
	else
	{
	    sysopen F, "$workdir/$hash.isunknown", O_WRONLY|O_CREAT|O_EXCL;
	    close F;
	    print "$hash is unknown\n";
	}
    }
}

__END__
