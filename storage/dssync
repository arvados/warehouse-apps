#!/usr/bin/perl

use strict;
use Digest::MD5;
use HTTP::Request::Common;
use LWP::UserAgent;
use Fcntl ':flock';

$HTTP::Request::Common::DYNAMIC_FILE_UPLOAD = 1;


my %defopts = qw(
		 httptimeout 360
		 bigfilesize 3000000
		 batch     12
		 domain    images
		 class     single
		 positions ./position_list.dat
		 cycles    ./all_cycles.cfg
		 hybrid    000
		 lockfile  ./dssync.lock
		 localdir  .
		 quick     0
		 n         0
		 v         0
		 all       0
		 );
my %opts = %defopts;
while ($ARGV[0] =~ /^-/)
{
    if ($ARGV[0] =~ /^--(.*?)(=(.*))?$/)
    {
	$opts{$1} = defined($3) ? $3 : 1;
    }
    else
    {
	$ARGV[0] =~ /^-(.*)/;
	$opts{$1} = 1;
    }
    shift @ARGV;
}

if (@ARGV != 2)
{
    print STDERR <<EOF;
usage:
       $0 [options] dataset-name-or-keyprefix http://lims-server
options:
       --lockfile=/path/to/lockfile            default = $defopts{lockfile}
       --localdir=/path/to/images/raw          default = $defopts{localdir}
       --cycles=/path/to/all_cycles.cfg        default = $defopts{cycles}
       --positions=/path/to/position_list.dat  default = $defopts{positions}
       --hybrid=subdir,subdir,subdir           default = $defopts{hybrid}
       --include=subdir,subdir,file            default = $defopts{include}
       --domain=mogilefsdomain        default = $defopts{domain}
       --class=mogilefsclass          default = $defopts{class}
       --batch=maxfilesperrequest     default = $defopts{batch}
       --bigfilesize=maxfilesizeinram default = $defopts{bigfilesize}
       --httptimeout=seconds          default = $defopts{httptimeout}
       --quick                        don't compare md5 of existing files
       --all                          upload entire directory tree
       -n                             don't really upload anything
       -v                             verbose
examples:
       $0 --localdir=/tmp/RAW foo_01 http://tomc
       $0 --all --localdir=/tmp/RAW /foo_01/IMAGES/RAW http://tomc
EOF
;
    exit 1;
}

if (!open (LOCKFILE, ">>$opts{lockfile}")
    ||
    !flock (LOCKFILE, LOCK_EX | LOCK_NB))
{
    die "$0: Couldn't lock $opts{lockfile} -- exiting.\n";
}

my $keyprefix;
my ($dsid, $remote) = @ARGV;

if ($opts{all})
{
  $keyprefix = $dsid;
  if ($keyprefix !~ m|^/[^/]|)
  {
    die "$0: Invalid keyprefix \"$keyprefix\" -- should look like \"/datasetname\".\n";
  }
}
elsif ($dsid =~ m|^/([^/]+)/IMAGES/RAW$|)
{
  $keyprefix = $dsid;
  $dsid = $1;
}
elsif ($dsid =~ m|/|)
{
  die "$0: Invalid dataset name \"$dsid\" -- shouldn't contain slashes.\n";
}
else
{
  $keyprefix = "/$dsid/IMAGES/RAW";
}


if ($opts{v}) { warn "Getting manifest.\n"; }

my $format = $opts{quick} ? "1md5" : "2md5";
my %storedmd5;

my $ua = LWP::UserAgent->new ("timeout" => $opts{httptimeout});
my $r = $ua->request
    (GET $remote."/manifest.cgi?format=$format&keyprefix=$keyprefix/");

if (!$r->is_success)
{
  die "$0: Error retrieving manifest from $remote/manifest.cgi: ".$r->status_line;
}


my $manifest = $r->content;
undef $r;
my $manifestsize = length $manifest;
if ($opts{v}) { warn "Received $manifestsize bytes.\n"; }

if ($manifestsize & 0xf != 0)
{
    die "$0: Binary manifest was not a multiple of 16 bytes. Stopping.\n";
}

my $recsize = $format eq "2md5" ? 32 : 16;
if (substr ($manifest, -$recsize, $recsize) ne "\0" x $recsize)
{
    die "$0: Binary manifest did not end with $recsize NUL bytes. Stopping.\n";
}
$manifestsize -= $recsize;

if ($opts{v}) { warn "Manifest looks okay.\n"; }



if ($opts{v}) { warn "Building hash table.\n"; }
my $oldfh = select STDERR; $| = 1; select $oldfh;

my $progress_step = 160000;
my $progress_next = $opts{v} ? $progress_step : $manifestsize;
if ($format eq "1md5")
{
    for (my $pos = 0; $pos < $manifestsize; $pos += 16)
    {
	$storedmd5{substr ($manifest, $pos, 16)} = "";
	if ($pos > $progress_next)
	{
	    print STDERR "\r$pos";
	    $progress_next += $progress_step;
	}
    }
}
else
{
    for (my $pos = 0; $pos < $manifestsize; $pos += 32)
    {
	$storedmd5{substr ($manifest, $pos, 16)} =
	    substr ($manifest, $pos+16, 16);
	if ($pos > $progress_next)
	{
	    print STDERR "\r$pos";
	    $progress_next += $progress_step;
	}
    }
}

if ($opts{v}) { warn " done.\n"; }


my %cycle;
my %hybrid;
my %include;
my $nframes = 0;

if (!$opts{all})
{
  if ($opts{v}) { warn "Reading position list.\n"; }

  open POSITIONS, "<$opts{positions}" or die "Can't open $opts{positions}: $!\n";
  my @positions = <POSITIONS>;
  close POSITIONS or die "read error: $opts{positions}: $!";
  foreach (@positions)
  {
    my ($frame_id, $x, $y, $w, $h) = split;
    if ($frame_id !~ /^\d+$/) { next; }
    ++$nframes;
  }
  if (!$opts{n})
  {
    warn "Uploading position list.\n" if $opts{v};
    maybe_upload($keyprefix."/positions", $opts{positions}, 0);
  }

  if ($opts{v}) { warn "Reading cycle list.\n"; }

  open CYCLES, "<$opts{cycles}" or die "Can't open $opts{cycles}: $!\n";
  my @cycles = <CYCLES>;
  my @cycles_orig = @cycles;
  close CYCLES or die "read error: $opts{cycles}: $!";

  foreach (@cycles)
  {
    s/\;.*//;
    my ($datasetname, $cycle_id, $wellnumber, $x, $x, @exposures) = split(",");
    $cycle{$cycle_id} = 0;
  }
  if (!$opts{n})
  {
    warn "Uploading cycle list.\n" if $opts{v};
    maybe_upload($keyprefix."/cycles", $opts{cycles}, 0);
  }

  foreach (split (",", $opts{hybrid}))
  {
    $hybrid{$_} = 1;
  }

  foreach (split (",", $opts{include}))
  {
    $include{$_} = 1;
    if (-e $_ && !-d $_)
    {
	my $basename = $_;
	$basename =~ s|.*/||;
	maybe_upload ("/$dsid/files/$basename", $_, 0);
    }
  }

  upload();			# must flush here before chdir or paths to
				# positions/cycles might not work any more
}

if ($opts{v}) { warn "Checking local files.\n"; }

my $uploadtotal = 0;
my $queuesize = 0;
my @uploadqueue;
my @warn;
chdir ($opts{localdir}) or die "$0: Can't chdir to $opts{localdir}: $!\n";

if ($opts{all})
{
  recursive_upload ($keyprefix, ".");
}
else
{
  opendir DIR, "."
      or die "$0: Can't read dir $opts{localdir}: $!\n";
  foreach my $subdir (sort (readdir DIR))
  {
    if (!-d $subdir) { next; }
    if ($subdir eq '.') { next; }
    if ($subdir eq '..') { next; }

    if ($subdir ne '999'
	&& !defined($hybrid{$subdir})
	&& !defined($cycle{$subdir})
	&& !defined($include{$subdir}))
    {
	push (@warn, "Subdir \"$subdir\" is not listed in $opts{cycles}\n");
    }
    $cycle{$subdir} = 1;	# we found it

    opendir SUBDIR, $subdir
	or die "$0: Can't read dir $opts{localdir}/$subdir: $!\n";
    my $ext = "raw";
    my @raw = grep (/\.\Q$ext\E$/i, readdir SUBDIR);
    if (@raw == 0)
    {
	rewinddir SUBDIR;
	$ext = "tif";
	@raw = grep (/\.\Q$ext\E$/i, readdir SUBDIR);
    }
    if (@raw == 0)
    {
	rewinddir SUBDIR;
	$ext = "tif.gz";
	@raw = grep (/\.\Q$ext\E$/i, readdir SUBDIR);
    }
    my $complete = (@raw == (($subdir eq '999' || defined($hybrid{$subdir}))
			     ? $nframes : $nframes * 4));
    if ($complete)
    {
	unshift (@warn, "Subdir \"$subdir\" is complete.\n");
    }
    else
    {
	my $nraw = scalar @raw;
	push (@warn, "Subdir \"$subdir\" is incomplete ($nraw images)\n");
    }
    if ($complete || $include{$subdir})
    {
	foreach my $file (@raw)
	{
	    my $fixed_file = $file;
	    if ($fixed_file !~ /^(SC|WL)_\d\d\d\d\.$ext/)
	    {
		if ($fixed_file =~ /(\d\d\d\d)/)
		{
		    if ($subdir eq '999')
		    {
			$fixed_file = "WL_$1.$ext";
		    }
		    else
		    {
			$fixed_file = "SC_$1.$ext";
		    }
		}
	    }
	    maybe_upload ($keyprefix."/".$subdir."/".$fixed_file,
			  $subdir."/".$file,
			  $opts{quick});
	}
    }
  }
}

upload();
print STDERR @warn;
print STDERR "$uploadtotal files uploaded.\n";

sub recursive_upload
{
  my ($remotedir, $localdir) = @_;

  opendir D, $localdir or die "$0: Can't read dir $localdir: $!";
  my @files = sort readdir D;
  closedir D or die "directory read error: $localdir/: $!";

  foreach my $file (@files)
  {
    next if ($file eq "." || $file eq "..");
    if (-l "$localdir/$file")
    {
      push (@warn, "Skipped symbolic link $localdir/$file\n");
    }
    elsif (-d "$localdir/$file")
    {
      recursive_upload ("$remotedir/$file", "$localdir/$file");
    }
    elsif (-f "$localdir/$file")
    {
      maybe_upload ($remotedir."/".$file,
		    $localdir."/".$file,
		    $opts{quick});
    }
    else
    {
      push (@warn, "Skipped special file $localdir/$file\n");
    }
  }
}

sub maybe_upload
{
    my ($key, $file, $quick) = @_;

    my $filesize = -s $file;
    my $keymd5 = Digest::MD5::md5 ("$key $filesize");

    if ($quick)
    {
	if (exists($storedmd5{$keymd5}))
	{
	    print STDERR "skip:    ".(" "x32)." $key\n";
	    return;
	}
	if ($opts{n})
	{
	    print STDERR "new:     ".(" "x32)." $key\n";
	    return;
	}
    }

    my $file_is_big = ($opts{bigfilesize} < $filesize);

    my $data;
    if (!$quick && !$file_is_big)
    {
	local $/ = undef;
	open FILE, "<$file" or die "$0: Can't open $file: $!\n";
	$data = <FILE>;
	close FILE or die "read error: $file: $!";
    }

    my $md5bin = "";
    my $md5hex = " " x 32;

    if (!$quick)
    {
	if (defined ($data))
	{
	    $md5bin = Digest::MD5::md5 ($data);
	    $md5hex = Digest::MD5::md5_hex ($data);
	}
	else
	{
	    open FILE, "<$file" or die "$0: Can't open $file: $!\n";
	    my $m = Digest::MD5->new;
	    my $buf;
	    my $bytes;
	    while ($bytes = read FILE, $buf, 1048576) {
		$m->add($buf);
	    }
	    if (!defined $buf)
	    {
		die "read error: $file: $!";
	    }
	    close FILE or die "read error: $file: $!";
	    $md5bin = $m->digest;
	    $md5hex = $m->hexdigest;
	}
	if ($storedmd5{$keymd5} eq $md5bin)
	{
	    print STDERR "skip:    $md5hex $key\n";
	    return;
	}
    }

    if (length($storedmd5{$keymd5}) == 16)
    {
	print STDERR "update:  $md5hex $key\n";
    }
    else
    {
	print STDERR "new:     $md5hex $key\n";
    }

    upload($key, $file, $data) unless $opts{n};
}

sub upload
{
    my ($key, $filename, $data) = @_;
    if (defined ($key) && (defined $data ? length($data) : -s $filename))
    {
	my $n = $queuesize;
	if ($n == 0) { $n = ""; }
	if (defined ($data))
	{
	  push (@uploadqueue,
		"upload$n" => [ undef, $key,
				"Content-Length" => length($data),
				"Content-Type" => "application/binary",
				"Content" => $data ]);
	}
	else
	{
	  push (@uploadqueue,
		"upload$n" => [ $filename, $key,
				"Content-Length" => -s $filename,
				"Content-Type" => "application/binary" ]);
	}
	++$queuesize;
	++$uploadtotal;
    }
    if ($queuesize >= $opts{batch} || (!defined($key) && $queuesize > 0))
    {
	warn "flush\n" if $opts{v} && $opts{batch} > 1;
	my $r = $ua->request
	    (POST $remote."/upload.cgi",
	     "Content-Type" => "form-data",
	     "Content"
	     => [ "domain" => $opts{domain},
		  "class" => $opts{class},
		  @uploadqueue ]);
	@uploadqueue = ();
	$queuesize = 0;
    }
}

# arch-tag: ae2f054a-fd2d-11db-9207-0015f2b17887
