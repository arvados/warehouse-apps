#!/usr/bin/perl

=head1 NAME

wh - command line interface to cloud computing and storage facilities

=head1 SYNOPSIS

 wh {category} {command} [option=value ...]

Working with batch jobs:

 wh job new ...              Submit a batch job (see SUBMITTING)
 wh job wait id=123          Wait for job to stop; print output locator
 wh job show id=123          Describe job (function, version, inputs)
 wh job show id=123 X Y Z    Describe job specified fields (see INSPECTING)
 wh job freeze id=123        Save state of a running job, leave it running
 wh job freeze id=123 stop=1 Save state of a running job, then stop it

Working with named manifests:

 wh manifest name ...      Assign a locator to a name
 wh manifest list          List all named manifests
 wh manifest lookup name=X Show locator of manifest with name X

Working with data: see whget(1p), whput(1p), whless(1p).

Other tools:

 wh block bucket hash={locator}  Compute probe order for locator
 wh block bucket < ./locatorlist Compute probe order for many locators

=head1 SUBMITTING

Example of a simple job submission, using only the minimum required options:

 wh job new photons=1 nodes=1 mrfunction=gzip \
            inputkey=ecd39d68e3db311b841dc4af4f4a59ed+252+K@templeton

Required options:

=over

=item *

B<photons=1> indicates that the priority/urgency of this job is low.  A higher number indicates higher priority.

=item *

B<nodes=1> indicates that this job should be run on 1 node.  The specified number of nodes will be allocated for the duration of the job, regardless of how many concurrent steps the job actually uses.

=item *

B<mrfunction=gzip> indicates the program to be run.  In this case the program {repository-base}/mapreduce/mr-gzip will be run.

=item *

B<inputkey=ecd39d68e3db311b841dc4af4f4a59ed+252+K@templeton> specifies the value to pass in the MR_INPUT0 environment variable in each invocation of the mr-function.

=back

Additional options:

=over

=item *

B<revision=2964> specifies the revision number to check out from the repository.  The default is to use the latest revision.

=item *

B<stepspernode=3> limits the number of steps that will be run concurrently on a single node.  This is useful for mr-functions that use lots of RAM.  The default is the number of CPU cores in each node.

=item *

B<FOO=bar> options with uppercase names are passed through to the mr-function as configuration settings ("knobs").  Each invocation of the mr-function will have an environment variables called "KNOB_FOO" with value "bar".

=back

=head1 INSPECTING

 wh job show [searchfield=value] ... [displayfield] ...

"searchfield" and "displayfield" can be: id, inputkey, revision,
mrfunction, knobs, stepspernode, nodes, photons, steps_done,
steps_running, steps_todo, starttime, starttime_s, finishtime,
finishtime_s, frozentokey, thawedfromkey, metakey, outputkey, success.

Additionally, "displayfield" can be "steps" as a shortcut for
"steps_done steps_running steps_todo".

If no displayfield is given, the default is "inputkey revision
mrfunction stepspernode knobs".

If a single displayfield is given, the output is just the value of the
displayfield for each job.  Otherwise, each field/value pair is given
as "field=value" with the value shell-quoted if needed:

 $ wh job show id=40000 starttime
 2009-08-31 13:40:26
 $ wh job show id=40000 starttime finishtime success
 starttime="2009-08-31 13:40:26" finishtime="2009-08-31 13:55:46" success=1

=head2 EXAMPLES

Inspect a single job:

 wh job show id=123

Search for jobs with a particular input:

 wh job show inputkey=ecd39d68e3db311b841dc4af4f4a59ed

Search for jobs with a particular revision number, and display only
their job IDs:

 wh job show revision=2100 id

Submit a job identical to job 123:

 eval wh job new `wh job show id=123` photons=1 nodes=2

Submit a job identical to job 123 but with a different revision:

 eval wh job new `wh job show id=123` photons=1 nodes=2 revision=1234

=head1 SEE ALSO

whintro(1p), whget(1p), whput(1p), whless(1p)

=cut

eval 'exec /usr/bin/perl  -S $0 ${1+"$@"}'
    if 0; # not running under some shell

use strict;

use Warehouse;

my $commands = {
    "help" => \&help,
    "block bucket" => \&block_bucket,
    "job freeze" => \&job_freeze,
    "job list" => \&job_list,
    "job new" => \&job_new,
    "job show" => \&job_show,
    "job wait" => \&job_wait,
    "keep" => \&keep,
    "manifest list" => \&manifest_list,
    "manifest lookup" => \&manifest_lookup,
    "manifest name" => \&manifest_name,
    "snap" => \&snap,
};

my $cmd = shift @ARGV;
while (!$commands->{$cmd})
{
    help() if !@ARGV;
    $cmd .= " ".(shift @ARGV);
}

my %opt;
map { $opt{$1} = $2 if /(.+?)=(.*)/s } @ARGV;

# Putting in a newline as a separator for knob keypairs is unwieldy on the
# command line. Instead, let's just accept a space as separator and turn it
# into a proper newline here, which is what the new_job warehouse function
# expects. If you need to include spaces in knobs, submit the knobs as
# separate opts like FOO="bar baz" instead of knobs="FOO=bar baz".
$opt{'knobs'} =~ s/ /\n/g if exists $opt{'knobs'};

my $whc;
$whc = new Warehouse ($opt{warehouse_name}
		      ? (warehouse_name => $opt{warehouse_name})
		      : ());

$commands->{$cmd}->();

sub help
{
    use Pod::Usage;
    pod2usage(-exitval => 1);
}

sub block_bucket
{
    my $hash = $opt{hash};
    while (1)
    {
	$hash = <> if !defined $opt{hash};
	chomp $hash;
	last if !defined $hash;
	my ($keeps, @bucket) = $whc->_hash_keeps (undef, $hash);
	print ($hash, (map { (" ", $keeps->[$_]) } @bucket), "\n");
	last if defined $opt{hash};
    }
}

sub job_wait
{
    my $jobid = $opt{id} or die "No job id specified";
    my $needcleanup;
    while (1)
    {
	my $joblist = $whc->job_list (id_min => $jobid, id_max => $jobid);
	if (!$joblist)
	{
	    # temporary error retrieving job list
	    sleep 10;
	    next;
	}
	@$joblist or die "job does not exist: $jobid\n";
	my $j = $joblist->[0];
	if ($j->{success})
	{
	    print STDERR "\n" if $needcleanup;
	    print ($j->{outputkey}, "\n");
	    exit 0;
	}
	elsif (length $j->{success})
	{
	    print STDERR "\n" if $needcleanup;
	    die "job failed: $jobid\n";
	}
	if ($opt{tty} || -t)
	{
	    printf STDERR ("\r%d: %d elapsed %d done %d run %d todo   ",
			   $jobid,
			   time() - $j->{starttime_s},
			   $j->{steps_done},
			   $j->{steps_running},
			   $j->{steps_todo},
			   );
	    $needcleanup = 1;
	}
	sleep 10;
    }
}

sub job_freeze
{
    my $ok = 1;
    my $oldfrozento;
    my $joblist;
    if (($joblist = $whc->job_list (id_min => $opt{id},
				    id_max => $opt{id}))
	&& $#$joblist == 0)
    {
	$oldfrozento = $joblist->[0]->{frozentokey};
    }
    if (!$whc->job_freeze (%opt))
    {
	$ok = 0;
	warn ($whc->errstr . "\n");
    }
    for (qw(0 1 2 2 3 3 4 4 5 5 5 10 10 10 10))
    {
	print STDERR "." if $_ >= 2;
	sleep $_;
	if (($joblist = $whc->job_list (id_min => $opt{id},
					id_max => $opt{id}))
	    && $#$joblist == 0)
	{
	    return 1 if !$joblist->[0]->{starttime}; # never started
	    my $newfrozento = $joblist->[0]->{frozentokey};
	    if ($newfrozento ne $oldfrozento)
	    {
		print STDERR "\n" if $_ >= 2;
		print "$newfrozento\n";
		return;
	    }
	}
	return if !$ok;
    }
    print STDERR " timed out waiting for new frozentokey to appear.\n";
    print STDERR "Previous frozentokey is $oldfrozento\n" if $oldfrozento;
}

sub job_list
{
    if ($opt{id} && !$opt{id_min} && !$opt{id_max})
    {
	$opt{id_min} = $opt{id_max} = $opt{id};
    }
    my $joblist = $whc->job_list (%opt);
    if ($joblist)
    {
	foreach my $j (@$joblist)
	{
	    print join (", ", map { $_ . "=" . $j->{$_} } sort keys %$j) . "\n";
	}
    }
    else { warn ($whc->errstr . "\n"); }
}

sub job_show
{
    my $joblist = $whc->job_list (id_min => $opt{id} || $opt{id_min},
				  id_max => $opt{id} || $opt{id_max},
				  %opt);
    if ($joblist)
    {
	my @fieldlist = grep { !/=/ } @ARGV;
	for (0..$#fieldlist)
	{
	    if ($fieldlist[$_] eq "steps")
	    {
		splice (@fieldlist, $_, 1,
			qw(steps_done steps_running steps_todo));
		$_ += 2;
	    }
	}
	@fieldlist = qw(inputkey revision mrfunction stepspernode knobs)
	    if !@fieldlist;
      J:
	foreach my $j (@$joblist)
	{
	    for (keys %opt)
	    {
		if (!/^id(_min|_max|)$/)
		{
		    if (/^[A-Z]/)
		    {
			if ($j->{knobs} !~ /(^|\\n)\Q$_=$opt{$_}\E(\\n|$ )/x)
			{
			    next J;
			}
		    }
		    elsif ($_ ne "inputkey" && $opt{$_} ne $j->{$_})
		    {
			next J;
		    }
		}
	    }
	    my @out;
	    foreach (@fieldlist)
	    {
		if ($_ eq "knobs")
		{
		    foreach (split (/\n/, $j->{knobs}))
		    {
			push @out, shellquote (freezeunquote ($_));
		    }
		}
		else
		{
		    my $arg = $j->{$_};
		    if (@fieldlist > 1)
		    {
			push @out, "$_=".shellquote($arg);
		    }
		    else
		    {
			push @out, $arg;
		    }
		}
	    }
	    print "@out\n";
	}
    }
    else { warn ($whc->errstr . "\n"); }
}

sub job_new
{
    my @knobs = split (/\n/, $opt{'knobs'});
    foreach (sort keys %opt)
    {
	if (!/[a-z]/)		# treat uppercase wh opts as job knobs
	{
	    push @knobs, $_."=".freezequote($opt{$_});
	    delete $opt{$_};
	}
    }
    $opt{'knobs'} = join ("\n", @knobs);

    my $jobid = $whc->job_new (%opt);
    if ($jobid) { print ($jobid . "\n"); }
    else { warn ($whc->errstr . "\n"); }
}

sub keep
{
    my $key = $opt{key};
    my $nnodes = $opt{nnodes} || 2;
    my $keepkey = $whc->store_in_keep (hash => $key,
				       nnodes => $nnodes);
    if ($keepkey) { print "$keepkey\n"; }
    else { warn ($whc->errstr . "\n"); }
}

sub manifest_list
{
    foreach my $keyname ($whc->list_manifests)
    {
	my ($key, $name, $keyid) = @$keyname;
	if ((!defined $opt{key} || $key eq $opt{key})
	    &&
	    (!defined $opt{name} || $name eq $opt{name}))
	{
	    print "$key $name $keyid\n";
	}
    }
}

sub manifest_lookup
{
    my $manifestkey = $whc->fetch_manifest_key_by_name ($opt{name});
    if (defined $manifestkey)
    {
	print "$manifestkey\n";
    }
    else
    {
	die "Lookup failed: " . $whc->errstr . "\n";
    }
}

sub manifest_name
{
    if (defined $opt{oldkey} && $opt{oldkey} eq "*")
    { $opt{oldkey} = $whc->fetch_manifest_key_by_name ($opt{name}); }
    if ($whc->store_manifest_by_name ($opt{newkey}, $opt{oldkey}, $opt{name}))
    { print "$opt{newkey}\n"; }
    else { warn ($whc->errstr . "\n"); }
}

sub snap
{
    my %got;

    my $warehouse_name = $whc->{warehouse_name};
    $whc->write_start or die "Write failed: ".$whc->errstr;
    foreach my $keyname ($whc->list_manifests)
    {
	my ($key, $name) = @$keyname;
	my $needthis = 0;
	foreach (split (",", $key))
	{
	    if (!exists $got{$_}) { $needthis = $got{$_} = 1; }
	}
	next if !$needthis;

	$whc->write_data (". ");
	foreach (split (",", $key))
	{
	    if ($key !~ /\+K[0-9a-f]*\@\Q$warehouse_name\E\b/ && $opt{'keep'})
	    {
		$key .= "+K\@$warehouse_name";
	    }
	    $whc->write_data ($key." ");
	}
	$whc->write_data ("0::$name\n");
    }

    my $joblist = $whc->job_list (id_min => $opt{id}+0,
				  id_max => $opt{id}+0);
    if ($joblist)
    {
	foreach my $j (@$joblist)
	{
	    foreach (qw(inputkey outputkey metakey frozentokey thawedfromkey))
	    {
		my $arg = $j->{$_};

		next if $arg !~ /^[0-9a-f]{32}/;

		my @snapblocks;

		my $needthis = 0;
		foreach (split (",", $arg))
		{
		    if ($opt{'keep'} && !/\+K[0-9a-f]*\@\Q$warehouse_name\E\b/)
		    {
			$_ .= "+K\@$warehouse_name";
		    }
		    push @snapblocks, $_;
		    s/^([0-9a-f]{32})(\+.*)?$/$1/;
		    if (!exists $got{$_}) { $needthis = $got{$_} = 1; }
		}

		if ($needthis && @snapblocks)
		{
		    $arg =~ s/,/ /g;
		    $whc->write_data ("./".$j->{id}."/$_ @snapblocks 0::$_\n");
		}
	    }
	}
    }
    else { warn ("Nothing in job list: " . $whc->errstr . "\n"); }

    my @snapkey = $whc->write_finish or die "Write failed: ".$whc->errstr;
    my $snapkey = join (",", @snapkey);
    if ($opt{'keep'})
    {
	($snapkey) = $whc->store_in_keep (hash => $snapkey);
	$whc->store_manifest_by_name ($snapkey, undef, "/snap-".time)
    }
    print "$snapkey\n";
}


sub shellquote
{
    my $arg = shift;
    if ($arg =~ /[^-\.\w=\@\+,]/)
    {
	$arg =~ s{[\"\`\$\\]}{\\$&}gs;
	$arg = "\"$arg\"";
    }
    $arg;
}


sub freezequote
{
  my $s = shift;
  $s =~ s/\\/\\\\/g;
  $s =~ s/\n/\\n/g;
  return $s;
}


sub freezeunquote
{
  my $s = shift;
  $s =~ s{\\(.)}{$1 eq "n" ? "\n" : $1}ges;
  return $s;
}
