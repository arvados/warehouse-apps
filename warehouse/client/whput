#!/usr/bin/perl

use strict;

use Warehouse;
use Warehouse::Stream;
use Digest::MD5;
use HTTP::Request::Common;
use LWP::UserAgent;

my %opt;
while ($ARGV[0] =~ /^-(?:-(\S+?)(=(.*))?|([^-]+))$/)
{
    if ($4) { map { $opt{$_}++ } split ("", $4); }
    else { $opt{$1} = defined ($2) ? $3 : 1; }
    shift @ARGV;
}
print STDERR map { "opt{$_} = $opt{$_}\n" } keys %opt
    if $opt{v} >= 3;

my $localbase = shift @ARGV or usage();
@ARGV == 0 or usage();

my $whc = new Warehouse ("warehouse_servers" => $opt{"warehouse-controllers"},
			 "mogilefs_trackers" => $opt{"mogilefs-trackers"},
			 "debug_mogilefs_paths" => ($opt{v} >= 3),
			 );
my $manifest = "";

if (-f $localbase)
{
    write_file ($localbase);
    exit 0;
}
else
{
    traverse ($localbase, "", ".", \$manifest);

    $whc->write_start;
    $whc->write_data ($manifest);
    my $manifest_key = $whc->write_finish;

    print "Manifest key is: $manifest_key\n";


    if (my $manifestname = $opt{"name"})
    {
	print "storing: $manifestname => $manifest_key\n";

	my $oldkey = $whc->fetch_manifest_key_by_name ($manifestname);
	$whc->store_manifest_by_name ($manifest_key, $oldkey, $manifestname);

	my $checkkey = $whc->fetch_manifest_key_by_name ($manifestname);
	print "fetch says: $manifestname => $checkkey\n";
    }
}


sub write_file
{
    my $filename = shift;
    open F, "<", $filename or die "Can't open $filename: $!";
    my $s = new Warehouse::Stream (whc => $whc);
    $s->clear;
    $s->write_start ("-");
    my $buf;
    my $ok;
    while ($ok = read F, $buf, 2**26)
    {
	$s->write_data ($buf);
    }
    die "Error reading $filename: $!" if !defined $ok;
    close F;
    $s->write_finish;
    my $k = $s->as_key;
    print "$k\n";
}


sub traverse
{
    my ($localbase, $localsubdir, $remotedir, $manifestref) = @_;
    my $localdir = $localbase . $localsubdir;
    my @subdir;
    my $streampos = 0;
    my @file_positions;

    $whc->write_start;
    opendir D, "$localdir" or die "Can't open $localdir: $!";
    foreach my $file (sort readdir D)
    {
	if ($file eq '.' || $file eq '..')
	{
	    next;
	}
	if (-l "$localdir/$file")
	{
	    warn "Skipped symbolic link: $localdir/$file\n";
	    next;
	}
	if (-d "$localdir/$file")
	{
	    push @subdir, $file;
	    next;
	}
	my $filesize = send_file ($whc, "$localdir/$file");
	push @file_positions, "${streampos}:${filesize}:${file}";
	$streampos += $filesize;
    }
    closedir D;
    my @stream_hashes = $whc->write_finish;

    for (@file_positions) { s/ /_/g; }
    my $subdir_stream = "$remotedir @stream_hashes @file_positions\n";
    $$manifestref .= $subdir_stream;

    printf STDERR ("$remotedir: stored %d files in %d blocks\n",
		   scalar @file_positions,
		   scalar @stream_hashes);
    printf STDERR $whc->iostats;

    foreach my $subdir (@subdir)
    {
	traverse ($localbase,
		  "$localsubdir/$subdir",
		  "$remotedir/$subdir",
		  $manifestref);
    }
}

sub md5_file
{
    my $file = shift;
    open FILE, "<$file" or die "Can't open $file: $!";
    my $m = Digest::MD5->new;
    my $buf;
    my $bytes;
    while ($bytes = read FILE, $buf, 1048576) {
	$m->add($buf);
    }
    if (!defined $bytes)
    {
	die "Read error: $file: $!";
    }
    close FILE or die "Read error: $file: $!";
    return $m->digest;
}

sub binhex
{
    unpack ("H*", shift @ARGV);
}

sub send_file
{
    my $whc = shift;
    my $file = shift;
    open FILE, "<$file" or die "Can't open $file: $!";
    my $buf;
    my $bytes;
    my $totalsize = 0;
    while ($bytes = read FILE, $buf, 1048576) {
	$whc->write_data ($buf) or die "Warehouse::write_data failed";
	$totalsize += $bytes;
    }
    if (!defined $bytes)
    {
	die "Read error: $file: $!";
    }
    close FILE or die "Read error: $file: $!";
    return $totalsize;
}

sub usage
{
    die qq{
usage:
    $0 [options] localdir
    $0 [options] localfile
options:
    --warehouse-controllers=host:port
    --mogilefs-trackers=host:port,host:port
    --name=/manifestname

};
}
