#!/usr/bin/perl

=head1 NAME

whput - store a file or directory into the warehouse

=head1 SYNOPSIS

whput [options] localdir
whput [options] localfile
whput [options] -

Options:

    --warehouse-controllers=host:port
    --mogilefs-trackers=host:port,host:port
    --name=/manifestname
    --in-manifest or --as-manifest
    --as-stream
    --use-filename=read-from-stdin.txt

=head1 DESCRIPTION

B<whput> allows storage of a single data set from a file, or a collection from a directory.  In the directory case, a manifest will be created to describe the directory structure.

Normally the B<locator> of the data set or manifest is printed to standard-output.  This locator can then be used with [wiki:Doc/Man/Whget whget].  If I<--as-stream> is given, the output of the command will be in manifest format.  If I<--as-stream> is used with a collection, the manifest is not stored, only the constituent files.

The data set or manifest can be attached to a global name with the I<--name> option.

You can force a single file to be wrapped in a manifest (as if it was in a directory) by use of the I<--in-manifest> option.

=cut

use strict;

use Warehouse;
use Warehouse::Stream;
use Digest::MD5;
use HTTP::Request::Common;
use LWP::UserAgent;

my %opt;
while ($ARGV[0] =~ /^-(?:-(\S+?)(=(.*))?|([^-]+))$/)
{
    if ($4) { map { $opt{$_}++ } split ("", $4); }
    else { $opt{$1} = defined ($2) ? $3 : 1; }
    shift @ARGV;
}
print STDERR map { "opt{$_} = $opt{$_}\n" } keys %opt
    if $opt{v} >= 3;

my $localbase = shift @ARGV or usage();
@ARGV == 0 or usage();

my $whc = new Warehouse ("warehouse_servers" => $opt{"warehouse-controllers"},
			 "mogilefs_trackers" => $opt{"mogilefs-trackers"},
			 "debug_mogilefs_paths" => ($opt{v} >= 3),
			 );
my $manifest = "";

my $manifest_key;
if ($localbase eq "-" || -f $localbase)
{
    $manifest_key = write_file ($localbase);
}
else
{
    traverse ($localbase, "", ".", \$manifest);

    if ($opt{"as-stream"})
    {
	print $manifest;
    }
    else
    {
	$whc->write_start;
	$whc->write_data ($manifest) or die "Failed to write manifest: ".$whc->errstr;
	$manifest_key = $whc->write_finish or die "Failed to write manifest: ".$whc->errstr;

	print "$manifest_key\n";
    }
}

if (my $manifestname = $opt{"name"})
{
    if (defined $manifest_key)
    {
	print STDERR "storing: $manifestname => $manifest_key\n" if $opt{"verbose"};

	my $oldkey = $whc->fetch_manifest_key_by_name ($manifestname);
	$whc->store_manifest_by_name ($manifest_key, $oldkey, $manifestname);

	my $checkkey = $whc->fetch_manifest_key_by_name ($manifestname);
	print STDERR "$manifestname => $checkkey\n" if $opt{"verbose"};
    }
    else
    {
	die "No manifest key to store; ignoring --name request"
    }
}


sub write_file
{
    my $filename = shift;
    if ($filename eq "-")
    {
	open F, "<&STDIN" or die "Can't dup stdin: $!";
    }
    else
    {
	open F, "<", $filename or die "Can't open $filename: $!";
    }
    my $use_filename = ($opt{"use-filename"} || (split("/", $filename))[-1]);
    die "Stored filename must not end with /" if $use_filename =~ m:/$:;
    my $use_subdir = ".";
    if ($opt{"use-subdir"})
    {
	$use_subdir = $opt{"use-subdir"};
    }
    elsif ($use_filename =~ s:(.*)/(.*):$2:)
    {
	$use_subdir = $1;
    }
    $use_subdir =~ s:^/+::;
    $use_subdir = "./$use_subdir" if $use_subdir !~ m:^\.(/.*)?$:;
    while ($use_subdir =~ s:/\.\./:/:) { }
    $use_subdir =~ s://+:/:g;
    $use_subdir =~ s:/$::;

    my $s = new Warehouse::Stream (whc => $whc);
    $s->name ($use_subdir);
    $s->clear;
    $s->write_start ($use_filename);
    my $buf;
    my $ok;
    while ($ok = read F, $buf, 2**26)
    {
	$s->write_data (\$buf) or die "Warehouse::Stream::write_data failed: ".$s->errstr;
    }
    die "Error reading $filename: $!" if !defined $ok;
    close F;
    $s->write_finish;
    if ($opt{"in-manifest"} || $opt{"as-manifest"})
    {
	$whc->write_start;
	$whc->write_data ($s->as_string);
	my $k = join (",", $whc->write_finish);
	print "$k\n";
	return $k;
    }
    elsif ($opt{"as-stream"})
    {
	print $s->as_string;
	return undef;
    }
    else
    {
	my $k = $s->as_key;
	print "$k\n";
	return $k;
    }
}


sub traverse
{
    my ($localbase, $localsubdir, $remotedir, $manifestref) = @_;
    my $localdir = $localbase . $localsubdir;
    my @subdir;
    my $streampos = 0;
    my @file_positions;

    $whc->write_start;
    opendir D, "$localdir" or die "Can't open $localdir: $!";
    foreach my $file (sort readdir D)
    {
	if ($file eq '.' || $file eq '..')
	{
	    next;
	}
	if (-l "$localdir/$file")
	{
	    warn "Skipped symbolic link: $localdir/$file\n";
	    next;
	}
	if (-d "$localdir/$file")
	{
	    push @subdir, $file;
	    next;
	}
	printf STDERR ("storing %s\n", "$localdir/$file") if $opt{v} >= 3;
	my $filesize = send_file ($whc, "$localdir/$file");
	push @file_positions, "${streampos}:${filesize}:${file}";
	$streampos += $filesize;
    }
    closedir D;
    my @stream_hashes = $whc->write_finish;

    if (@file_positions) {

	die "Write failed: ".$whc->errstr if !@stream_hashes;

	for (@file_positions) { s/ /_/g; }

	my $subdir_stream = "$remotedir @stream_hashes @file_positions\n";
	$$manifestref .= $subdir_stream;

	printf STDERR ("$remotedir: stored %d files in %d blocks\n",
		       scalar @file_positions,
		       scalar @stream_hashes)
	    if $opt{v} >= 1;

	printf STDERR $whc->iostats 
	    if $opt{v} >= 2;
    }

    foreach my $subdir (@subdir)
    {
	traverse ($localbase,
		  "$localsubdir/$subdir",
		  "$remotedir/$subdir",
		  $manifestref);
    }
}

sub md5_file
{
    my $file = shift;
    open FILE, "<$file" or die "Can't open $file: $!";
    my $m = Digest::MD5->new;
    my $buf;
    my $bytes;
    while ($bytes = read FILE, $buf, 1048576) {
	$m->add($buf);
    }
    if (!defined $bytes)
    {
	die "Read error: $file: $!";
    }
    close FILE or die "Read error: $file: $!";
    return $m->digest;
}

sub binhex
{
    unpack ("H*", shift @ARGV);
}

sub send_file
{
    my $whc = shift;
    my $file = shift;
    open FILE, "<$file" or die "Can't open $file: $!";
    my $buf;
    my $bytes;
    my $totalsize = 0;
    while ($bytes = read FILE, $buf, 1048576) {
	$whc->write_data ($buf) or die "Warehouse::write_data failed";
	$totalsize += $bytes;
    }
    if (!defined $bytes)
    {
	die "Read error: $file: $!";
    }
    close FILE or die "Read error: $file: $!";
    return $totalsize;
}

sub usage
{
    die qq{
usage:
    $0 [options] localdir
    $0 [options] localfile
    $0 [options] -
options:
    --warehouse-controllers=host:port
    --mogilefs-trackers=host:port,host:port
    --name=/manifestname
    --in-manifest or --as-manifest
    --as-stream
    --use-filename=read-from-stdin.txt
    --use-subdir=./subdir/in/manifest

};
}
